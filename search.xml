<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Gradle笔记</title>
      <link href="2021/01/11/Gradle%E7%AC%94%E8%AE%B0/"/>
      <url>2021/01/11/Gradle%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-Gradle-必备基础"><a href="#第一章-Gradle-必备基础" class="headerlink" title="第一章 Gradle 必备基础"></a>第一章 Gradle 必备基础</h1><h2 id="1-1-Gradle常用命令"><a href="#1-1-Gradle常用命令" class="headerlink" title="1.1 Gradle常用命令"></a>1.1 Gradle常用命令</h2><p><strong>检查依赖是否冲突</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle dependencies</span><br></pre></td></tr></table></figure><p><strong>检查清单文件是否有重复或者其他问题</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradlew processDebugManifest --stacktrace</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android studio常见问题</title>
      <link href="2021/01/09/Android%20studio/"/>
      <url>2021/01/09/Android%20studio/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-Android-Studio常用快捷键"><a href="#第一章-Android-Studio常用快捷键" class="headerlink" title="第一章 Android Studio常用快捷键"></a>第一章 Android Studio常用快捷键</h1><ul><li>ctrl + shift + (+-)  代码伸展收缩</li></ul><h1 id="第二章-Android-Studio常用插件"><a href="#第二章-Android-Studio常用插件" class="headerlink" title="第二章 Android Studio常用插件"></a>第二章 Android Studio常用插件</h1><p><strong>快速添加依赖</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">地址：https:&#x2F;&#x2F;github.com&#x2F;wuyr&#x2F;GoogleLibraryVersionQuerier</span><br></pre></td></tr></table></figure><h1 id="第三章-常用配置"><a href="#第三章-常用配置" class="headerlink" title="第三章 常用配置"></a>第三章 常用配置</h1><h2 id="3-1-基础配置"><a href="#3-1-基础配置" class="headerlink" title="3.1 基础配置"></a>3.1 基础配置</h2><h3 id="1-AndroidStudio打开的类显示多行"><a href="#1-AndroidStudio打开的类显示多行" class="headerlink" title="1. AndroidStudio打开的类显示多行"></a>1. AndroidStudio打开的类显示多行</h3><p>右击类-去掉 Show Tabs In single Row<br><a href="http://blog.csdn.net/shayubuhuifei/article/details/78281220">http://blog.csdn.net/shayubuhuifei/article/details/78281220</a></p><h3 id="2-code-template模板个性化"><a href="#2-code-template模板个性化" class="headerlink" title="2. code template模板个性化"></a>2. code template模板个性化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">参考博客地址:https:&#x2F;&#x2F;blog.csdn.net&#x2F;denglxsc&#x2F;article&#x2F;details&#x2F;51188444</span><br><span class="line">step1: 点击 setting&gt;&gt;Editor&gt;&gt;File and code Templates </span><br><span class="line">step2: 选中includes标签</span><br><span class="line">step3: 选中File Header</span><br><span class="line">step4: 黏贴以下内容</span><br><span class="line">&#x2F;**</span><br><span class="line">  * author: $&#123;USER&#125;</span><br><span class="line">  * created on: $&#123;DATE&#125; $&#123;TIME&#125;</span><br><span class="line">  * description:</span><br><span class="line">  *&#x2F;</span><br></pre></td></tr></table></figure><h1 id="第四章-错误集锦"><a href="#第四章-错误集锦" class="headerlink" title="第四章 错误集锦"></a>第四章 错误集锦</h1><p><strong>AndroidStudio 编译异常</strong></p><p>异常信息：java.lang.OutOfMemoryError: GC overhead limit exceeded</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在build.gradle中的android&#123;&#125;添加如下脚本就可以顺利编译了 </span><br><span class="line">dexOptions &#123; </span><br><span class="line">incremental true </span><br><span class="line">javaMaxHeapSize “4g” </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Android studio中 SVN新建文件,没有弹出添加到SVN</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">解决办法:</span><br><span class="line">问题是由于在SVN下的某些目录的属性忽略文件导致的，根据以下步骤去掉就可以了。 在你的SVN库的根目录下，右键空白处，选择Properties </span><br><span class="line">单击Remove按钮，选择Recursive干掉这个属性，单击Ok就可以了。 </span><br><span class="line">参考博客: https:&#x2F;&#x2F;blog.csdn.net&#x2F;yujiayinshi&#x2F;article&#x2F;details&#x2F;51381942</span><br></pre></td></tr></table></figure><p><strong>解决支持库版本兼容问题</strong></p><p>异常信息：all com.android.support libraries must use the exact same version specification</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">在app build.gradle中添加:</span><br><span class="line">configurations.all &#123;</span><br><span class="line">    resolutionStrategy.eachDependency &#123; DependencyResolveDetails details -&gt;</span><br><span class="line">        def requested &#x3D; details.requested</span><br><span class="line">        if (requested.group &#x3D;&#x3D; &#39;com.android.support&#39;) &#123;</span><br><span class="line">            if (!requested.name.startsWith(&quot;multidex&quot;)) &#123;</span><br><span class="line">                details.useVersion &#39;25.3.1&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">参考链接:http:&#x2F;&#x2F;www.jcodecraeer.com&#x2F;a&#x2F;anzhuokaifa&#x2F;androidkaifa&#x2F;2017&#x2F;0910&#x2F;8491.html</span><br></pre></td></tr></table></figure><p><strong>安卓项目更名</strong></p><p>无法通过shift + F6 来重命名项目名,要修改,只能先关闭Android Studio,然后才在文件路径中找到项目,去修改文件夹的名称,<br>修改完成后,记得删除APP的build目录,否则无法编译安装到手机上<br>参考地址:<a href="https://blog.csdn.net/benbenxiongyuan/article/details/52125899">https://blog.csdn.net/benbenxiongyuan/article/details/52125899</a></p><p><strong>Android studio 使用多种BuildTypes时候报错</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Unable to resolve dependency for &#39;:app@dev&#x2F;compileClasspath&#39;: Could not resolve project :baselibrary.</span><br><span class="line">Open File</span><br><span class="line">Show Details</span><br><span class="line">Unable to resolve dependency for &#39;:app@dev&#x2F;compileClasspath&#39;: Could not resolve project :upplayer.</span><br><span class="line">Open File</span><br><span class="line">Show Details</span><br><span class="line"></span><br><span class="line">Unable to resolve dependency for &#39;:app@devUnitTest&#x2F;compileClasspath&#39;: Could not resolve project :baselibrary.</span><br><span class="line">Open File</span><br><span class="line">Show Details</span><br><span class="line">Unable to resolve dependency for &#39;:app@devUnitTest&#x2F;compileClasspath&#39;: Could not resolve project :upplayer.</span><br><span class="line">Open File</span><br><span class="line">Show Details</span><br></pre></td></tr></table></figure><p>​    报错原因：app中buildTypes集合不是library的buildTypes集合子集，即app中buildType属性preview在依赖的library中找不到。<br>​<br>​    解决方案：<a href="http://www.jcodecraeer.com/a/anzhuokaifa/Android_Studio/2017/1026/8646.html">http://www.jcodecraeer.com/a/anzhuokaifa/Android_Studio/2017/1026/8646.html</a><br>​    在自己构建的BuildType类型中，包含library中已有的buildType<br>​    如：matchingFallbacks = [‘release’, ‘debug’]</p><p><strong>模拟器无法启动</strong></p><p>提示：<em>Emulator:</em> <em>emulator:</em> <em>ERROR:</em> <em>Not</em> <em>enough**space</em> <em>to</em> <em>create</em> <em>userdata</em> <em>partition</em></p><p>解决：模拟器所在硬盘空间不足，释放空间后，可成功启动模拟器</p><p><strong>Android Studio 3.5编译问题</strong></p><p>编译后，无法请求网络，在Android Q手机上，加了网络权限还是不行，报错信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OkHttp: &lt;-- HTTP FAILED: java.net.SocketException: socket failed: EPERM (Operation not permitted)</span><br></pre></td></tr></table></figure><p>解决办法：卸载重新安装即可</p><p>参考地址：<a href="https://stackoverflow.com/questions/56266801/java-net-socketexception-socket-failed-eperm-operation-not-permitted">https://stackoverflow.com/questions/56266801/java-net-socketexception-socket-failed-eperm-operation-not-permitted</a></p><p><strong>编译失败</strong></p><p>异常信息：Preview is unavailable until a successful build</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解决办法：rebuild project</span><br></pre></td></tr></table></figure><p><strong>打包报错</strong></p><p>安卓打包报错：Execution failed for task ‘xxx:verifyReleaseResources’</p><p>解决参考链接：<a href="https://www.jianshu.com/p/6729bca200ea">https://www.jianshu.com/p/6729bca200ea</a></p><p>当时打包的时候，总是报错，library中的AndroidManifest.xml，但是直接编译运行则不会报错</p><p>参考文档上的方法，将library中的环境改为和APP的一致，仍然报错，最后发现APP中开启了混淆，library中minifyEnabled = false ，删掉这段代码后，打包成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;    buildTypes &#123;</span><br><span class="line">&#x2F;&#x2F;        release &#123;</span><br><span class="line">&#x2F;&#x2F;            minifyEnabled false </span><br><span class="line">&#x2F;&#x2F;            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;</span><br><span class="line">&#x2F;&#x2F;        &#125;</span><br><span class="line">&#x2F;&#x2F;    &#125;</span><br></pre></td></tr></table></figure><ol start="8"><li><p>报错Command line is too long. Shorten command line for *** or also for Spring Boot default configuration</p><p>  解决方案！<br>   修改项目下 .idea\workspace.xml，找到标签 <component name="PropertiesComponent"> ， 在标签里加一行  <property name="dynamic.classpath" value="true" /></p></li></ol><p><strong>中文乱码</strong></p><p>Eclipse项目导入Android studio 中，中文乱码问题</p><p>解决方案：因为以前Eclipse项目的默认编码是GBK,android studio 项目默认是Utf-8，所以需要修改编码</p><p>打开Settings-Editor - File Encoding，将Project encoding改为GBK,此时项目代码中中文会正常显示，但是编译的时候，仍然会报错，提示中文乱码，还需要配置一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compileOptions  &#123;</span><br><span class="line">  encoding  &quot;GBK&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>support和androidx兼容问题</strong></p><p>参考博客：<a href="https://blog.csdn.net/weixin_41618522/article/details/87165593">https://blog.csdn.net/weixin_41618522/article/details/87165593</a></p><p>1、Refactor–&gt;Migrate to AndroidX</p><p>2、向gradle.properties添加以下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android.enableJetifier=true</span><br><span class="line">android.useAndroidX=true</span><br></pre></td></tr></table></figure><p><strong>编译抽疯</strong></p><p>异常信息：windows CreateProcess error=206, 文件名或扩展名太长</p><p>解决办法：百度搜索的各种方法都不行，最后删除项目，重新clone</p><h1 id="第五章-版本升级问题"><a href="#第五章-版本升级问题" class="headerlink" title="第五章 版本升级问题"></a>第五章 版本升级问题</h1><h2 id="版本3-5"><a href="#版本3-5" class="headerlink" title="版本3.5"></a>版本3.5</h2><h3 id="1-AndroidStudio-3-5格式化xml"><a href="#1-AndroidStudio-3-5格式化xml" class="headerlink" title="1.AndroidStudio 3.5格式化xml"></a>1.AndroidStudio 3.5格式化xml</h3><p>问题：文件出现自动改变xml元素位置问题</p><p>解决办法：<a href="https://blog.csdn.net/yinxing2008/article/details/99991545">https://blog.csdn.net/yinxing2008/article/details/99991545</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android知识总结</title>
      <link href="2021/01/09/Android%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>2021/01/09/Android%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章：常用技巧"><a href="#第一章：常用技巧" class="headerlink" title="第一章：常用技巧"></a>第一章：常用技巧</h1><h2 id="1-1-常用adb命令"><a href="#1-1-常用adb命令" class="headerlink" title="1.1 常用adb命令"></a>1.1 常用adb命令</h2><p><strong>查看当前Activity</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">8.1之前</span><br><span class="line">window 通过adb shell dumpsys activity | findstr “mFocus”</span><br><span class="line">Linux 通过adb shell dumpsys activity | grep “mFocus”</span><br><span class="line">8.1之后</span><br><span class="line">window 通过adb shell dumpsys activity | findstr “mResume”</span><br><span class="line">Linux 通过adb shell dumpsys activity | grep “mResume”</span><br></pre></td></tr></table></figure><p><strong>连接模拟器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb connect 127.0.0.1:21503 &#x2F;&#x2F;逍遥浏览器</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;网易木木浏览器</span><br><span class="line">adb connect 127.0.0.1:7555 (Windows上)</span><br><span class="line">adb connect 127.0.0.1:5555 (Mac上)</span><br></pre></td></tr></table></figure><p>指定设备安装apk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb -s 设备id  install xxx.apk</span><br></pre></td></tr></table></figure><h1 id="第二章-基础知识"><a href="#第二章-基础知识" class="headerlink" title="第二章 基础知识"></a>第二章 基础知识</h1><blockquote><p>在本章节，主要包括如下内容</p><ul><li>shape，layer-list</li></ul></blockquote><h2 id="2-1-shape"><a href="#2-1-shape" class="headerlink" title="2.1 shape"></a>2.1 shape</h2><p><strong>基础属性</strong></p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>shape</td><td>定义形状：如 rectangle，ring,oval</td></tr><tr><td>corners</td><td>定义圆角</td></tr><tr><td>solid</td><td>定义内部填充色</td></tr><tr><td>stroke</td><td>定义边框</td></tr><tr><td>gradient</td><td>渐变色</td></tr></tbody></table><p><strong>常用shape</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;shape xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:shape&#x3D;&quot;rectangle&quot;&gt;</span><br><span class="line">    &lt;corners android:radius&#x3D;&quot;8dp&quot;&#x2F;&gt;</span><br><span class="line">    &lt;solid android:color&#x3D;&quot;#F2F2F2&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;shape&gt;</span><br></pre></td></tr></table></figure><h2 id="2-2-layer-list图层"><a href="#2-2-layer-list图层" class="headerlink" title="2.2 layer-list图层"></a>2.2 layer-list图层</h2><blockquote><p> layer-list和shape不同的是，layer-list可以放多个item，每个item下可以放shape等</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;layer-list xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;&gt;</span><br><span class="line">    &lt;item&gt;</span><br><span class="line">        &lt;shape</span><br><span class="line">            android:shape&#x3D;&quot;rectangle&quot;&gt;</span><br><span class="line">            &lt;corners android:radius&#x3D;&quot;8dp&quot;&#x2F;&gt;</span><br><span class="line">            &lt;solid android:color&#x3D;&quot;#FF4C00&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;shape&gt;</span><br><span class="line">    &lt;&#x2F;item&gt;</span><br><span class="line"></span><br><span class="line">    &lt;item android:left&#x3D;&quot;2dp&quot; android:right&#x3D;&quot;2dp&quot; android:top&#x3D;&quot;2dp&quot; android:bottom&#x3D;&quot;2dp&quot;&gt;</span><br><span class="line">        &lt;shape</span><br><span class="line">            android:shape&#x3D;&quot;rectangle&quot;&gt;</span><br><span class="line">            &lt;corners android:radius&#x3D;&quot;6dp&quot;&#x2F;&gt;</span><br><span class="line">            &lt;stroke android:color&#x3D;&quot;@color&#x2F;color_white&quot; android:width&#x3D;&quot;1dp&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;shape&gt;</span><br><span class="line">    &lt;&#x2F;item&gt;</span><br><span class="line">&lt;&#x2F;layer-list&gt;</span><br></pre></td></tr></table></figure><h2 id="2-3-Android-studio"><a href="#2-3-Android-studio" class="headerlink" title="2.3 Android studio"></a>2.3 Android studio</h2><h4 id="2-3-1-阿里云仓库"><a href="#2-3-1-阿里云仓库" class="headerlink" title="2.3.1 阿里云仓库"></a>2.3.1 阿里云仓库</h4><p>替换jcenter()，修改成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jcenter()&#123; url &#39;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;jcenter&#39;&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-2-编译速度优化"><a href="#2-3-2-编译速度优化" class="headerlink" title="2.3.2 编译速度优化"></a>2.3.2 编译速度优化</h4><p><strong>gradle离线模式</strong></p><p><strong>初次打开的时候不让它连接谷歌进行更新</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">找到studio安装目录，找到idea.properties文件，打开，加上下面一行配置，作用是在初次打开的时候不让它连接谷歌进行更新</span><br><span class="line">disable.android.first.run&#x3D;true</span><br></pre></td></tr></table></figure><p><strong>更改studio的VM大小</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-Xms 是JVM启动的起始堆内存，堆内存是分配给对象的内存</span><br><span class="line">-Xmx 是 Java 虚拟机启动时的参数，用于限制最大堆内存</span><br></pre></td></tr></table></figure><h1 id="第三章-Android实战开发"><a href="#第三章-Android实战开发" class="headerlink" title="第三章 Android实战开发"></a>第三章 Android实战开发</h1><h2 id="2-1RecyclerView相关"><a href="#2-1RecyclerView相关" class="headerlink" title="2.1RecyclerView相关"></a>2.1RecyclerView相关</h2><p><strong>RecyclerView嵌套滑动卡顿</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">粗暴解决方式：</span><br><span class="line">rv.setItemViewCacheSize(200);</span><br><span class="line">&#x2F;&#x2F;继续粗暴</span><br><span class="line">rv.setHasFixedSize(true);        rv.setNestedScrollingEnabled(false);</span><br></pre></td></tr></table></figure><p><strong>RecyclerView 网格布局，分割线</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public class GridSpacingItemDecoration extends RecyclerView.ItemDecoration &#123;</span><br><span class="line"></span><br><span class="line">    private int spanCount;</span><br><span class="line">    private int spacing;</span><br><span class="line">    private boolean includeEdge;</span><br><span class="line"></span><br><span class="line">    public GridSpacingItemDecoration(int spanCount, int spacing, boolean includeEdge) &#123;</span><br><span class="line">        this.spanCount &#x3D; spanCount;</span><br><span class="line">        this.spacing &#x3D; spacing;</span><br><span class="line">        this.includeEdge &#x3D; includeEdge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state) &#123;</span><br><span class="line">        int position &#x3D; parent.getChildAdapterPosition(view);</span><br><span class="line">        int column &#x3D; position % spanCount;</span><br><span class="line">        if (includeEdge) &#123;</span><br><span class="line">            outRect.left &#x3D; spacing - column * spacing &#x2F; spanCount;</span><br><span class="line">            outRect.right &#x3D; (column + 1) * spacing &#x2F; spanCount;</span><br><span class="line">            if (position &lt; spanCount) &#123;</span><br><span class="line">                outRect.top &#x3D; spacing;</span><br><span class="line">            &#125;</span><br><span class="line">            outRect.bottom &#x3D; spacing;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            outRect.left &#x3D; column * spacing &#x2F; spanCount;</span><br><span class="line">            outRect.right &#x3D; spacing - (column + 1) * spacing &#x2F; spanCount;</span><br><span class="line">            if (position &lt; spanCount) &#123;</span><br><span class="line">                outRect.top &#x3D; spacing;</span><br><span class="line">            &#125;</span><br><span class="line">            outRect.bottom &#x3D; spacing;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-自定义view"><a href="#2-2-自定义view" class="headerlink" title="2.2 自定义view"></a>2.2 自定义view</h2><p><strong>自定义长宽比ViewGroup</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;长宽比1.4</span><br><span class="line">class RatioLayout @JvmOverloads constructor(</span><br><span class="line">    context: Context, attrs: AttributeSet? &#x3D; null, defStyleAttr: Int &#x3D; 0</span><br><span class="line">) : LinearLayout(context, attrs, defStyleAttr) &#123;</span><br><span class="line"></span><br><span class="line">    override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) &#123;</span><br><span class="line">        setMeasuredDimension(getDefaultSize(0, widthMeasureSpec), getDefaultSize(0, heightMeasureSpec))</span><br><span class="line"></span><br><span class="line">        val childWidthSize &#x3D; measuredWidth</span><br><span class="line">        val mWidthMeasureSpec &#x3D; MeasureSpec.makeMeasureSpec(childWidthSize, MeasureSpec.EXACTLY)</span><br><span class="line">        val mHeightMeasureSpec &#x3D; MeasureSpec.makeMeasureSpec((childWidthSize * 1.4).toInt(), MeasureSpec.EXACTLY)</span><br><span class="line"></span><br><span class="line">        super.onMeasure(mWidthMeasureSpec, mHeightMeasureSpec);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-AAR"><a href="#2-3-AAR" class="headerlink" title="2.3 AAR"></a>2.3 AAR</h2><p><strong>打包AAR</strong></p><p>当我们代码写好后，如何打包AAR呢？找到右侧gradle，找到library-&gt; Tasks -&gt; build -&gt; assemble</p><p>AAR包生成目录:library-&gt;build-&gt;outputs-&gt;aar下</p><p><strong>AAR引用第三方库</strong></p><p>如果在aar中引用了第三方库，那么需要在APP中手动引入aar，因为aar中并不能依赖传递</p><p><strong>AAR发布</strong></p><p>AAR可以发布到Jcenter或者国内仓库，如阿里云maven(云效)</p><h2 id="2-4-XML转JSON"><a href="#2-4-XML转JSON" class="headerlink" title="2.4 XML转JSON"></a>2.4 XML转JSON</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;smart-fun&#x2F;XmlToJson</span><br><span class="line">implementation &#39;com.github.smart-fun:XmlToJson:1.4.5&#39;</span><br></pre></td></tr></table></figure><p>注意：如果xml中要解析list数据，必须设置强制解析成list，因为当list只有一条数据的时候，框架根本不知道xml里面，是解析成对象，还是list，所以必须手动指定</p><p>参考：<a href="https://github.com/smart-fun/XmlToJson#force-a-tag-to-be-a-list">https://github.com/smart-fun/XmlToJson#force-a-tag-to-be-a-list</a></p><h1 id="第四章-APP常用开发功能"><a href="#第四章-APP常用开发功能" class="headerlink" title="第四章 APP常用开发功能"></a>第四章 APP常用开发功能</h1><h2 id="4-1版本适配"><a href="#4-1版本适配" class="headerlink" title="4.1版本适配"></a>4.1版本适配</h2><h3 id="7-0-fileProvider适配"><a href="#7-0-fileProvider适配" class="headerlink" title="7.0 fileProvider适配"></a>7.0 fileProvider适配</h3><p>主要分为以下几步：</p><ul><li>1.创建file_paths文件，配置共享目录，注意命名不要和其他三方的冲突</li><li>2.在aplication节点下添加Provider，指定file_paths</li><li>3.根据版本获取不同的URI</li></ul><p><strong>实战：打开文件</strong></p><p>首先配置file_paths</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;paths&gt;</span><br><span class="line">        &lt;!--ppt存放路径--&gt;</span><br><span class="line">        &lt;external-files-path name&#x3D;&quot;resource&quot; path&#x3D;&quot;ppt&#x2F;&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;paths&gt;</span><br><span class="line">&lt;&#x2F;resources&gt;</span><br></pre></td></tr></table></figure><p>这里的external-files-path，对应getExternalFilesDir()</p><p>name是取一个别名，只要唯一字符串即可，path是真实目录,可以看出，这里使用resource隐藏了真实目录ppt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content:&#x2F;&#x2F;com.yijieyuanyoutongllyfeng1.app.fileProvider&#x2F;resource&#x2F;xxx.ppt</span><br></pre></td></tr></table></figure><p>然后配置provider</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;provider</span><br><span class="line">  android:name&#x3D;&quot;androidx.core.content.FileProvider&quot;</span><br><span class="line">  android:authorities&#x3D;&quot;$&#123;applicationId&#125;.fileProvider&quot;</span><br><span class="line">  android:exported&#x3D;&quot;false&quot;</span><br><span class="line">  android:grantUriPermissions&#x3D;&quot;true&quot;</span><br><span class="line">  tools:replace&#x3D;&quot;name,authorities,exported,grantUriPermissions&quot;&gt;</span><br><span class="line">  &lt;meta-data</span><br><span class="line">  android:name&#x3D;&quot;android.support.FILE_PROVIDER_PATHS&quot;</span><br><span class="line">  android:resource&#x3D;&quot;@xml&#x2F;file_provider&quot;</span><br><span class="line">  tools:replace&#x3D;&quot;name,resource&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;provider&gt;</span><br></pre></td></tr></table></figure><p>根据版本获取不同的URI</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fun getUriFromFile(ctx: Context,file:File):Uri&#123;</span><br><span class="line">    return if (Build.VERSION.SDK_INT &gt;&#x3D; 24)&#123;</span><br><span class="line">        &#x2F;&#x2F;provider authorities</span><br><span class="line">        FileProvider.getUriForFile(ctx, ctx.packageName + &quot;.fileProvider&quot;, file)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        Uri.fromFile(file)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用URI打开文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">fun openFile(ctx:Context,file:File)&#123;</span><br><span class="line">    val intent &#x3D; Intent(ACTION_GET_CONTENT)</span><br><span class="line">    val uri &#x3D; getUriFromFile(ctx,file)</span><br><span class="line">    Log.d(&quot;uri:&quot;,uri.toString())</span><br><span class="line">    intent.setDataAndType(uri,&quot;file&#x2F;*&quot;)</span><br><span class="line"></span><br><span class="line">    intent.action &#x3D; Intent.ACTION_VIEW </span><br><span class="line">    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK) </span><br><span class="line">    intent.addCategory(Intent.CATEGORY_DEFAULT)</span><br><span class="line">    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)</span><br><span class="line">    try &#123;</span><br><span class="line">        ctx.startActivity(intent)</span><br><span class="line">    &#125;catch (e:Exception)&#123;</span><br><span class="line">        e.printStackTrace()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-友盟统计"><a href="#4-2-友盟统计" class="headerlink" title="4.2 友盟统计"></a>4.2 友盟统计</h2><p>添加仓库和依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">maven &#123; url &#39;https:&#x2F;&#x2F;dl.bintray.com&#x2F;umsdk&#x2F;release&#39; &#125;&#x2F;&#x2F;友盟</span><br><span class="line">api &quot;com.umeng.umsdk:common:9.3.0&quot; &#x2F;&#x2F;（必选）</span><br><span class="line">api &quot;com.umeng.umsdk:asms:1.1.3&quot; &#x2F;&#x2F; asms包依赖(必选)</span><br></pre></td></tr></table></figure><p>初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private fun initUmeng() &#123;</span><br><span class="line">        val chanel &#x3D; WalleChannelReader.getChannel(this)</span><br><span class="line">        UMConfigure.init(this,Constant.UMENG_KEY,chanel?:&quot;测试&quot;,UMConfigure.DEVICE_TYPE_PHONE,null)</span><br><span class="line">        MobclickAgent.setPageCollectionMode(MobclickAgent.PageMode.AUTO)</span><br><span class="line">        &#x2F;&#x2F;友盟日志</span><br><span class="line">        UMConfigure.setLogEnabled(Constant.UMENG_LOG)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注意：这里渠道使用的美团walle渠道包技术，关于walle，在下一节walle渠道包讲解</p><h2 id="4-3-多渠道打包"><a href="#4-3-多渠道打包" class="headerlink" title="4.3 多渠道打包"></a>4.3 多渠道打包</h2><p>使用美团walle + python 实现多渠道打包</p><p><a href="https://github.com/Meituan-Dianping/walle">美团walle</a></p><p>第一步：添加插件依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &#39;com.meituan.android.walle:plugin:1.1.7&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：在build.gradle中应用插件，添加读取渠道号的依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &#39;walle&#39;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile &#39;com.meituan.android.walle:library:1.1.7&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步：配置walle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">walle &#123;</span><br><span class="line">    &#x2F;&#x2F; 指定渠道包的输出路径</span><br><span class="line">    apkOutputFolder &#x3D; new File(&quot;$&#123;project.buildDir&#125;&#x2F;outputs&#x2F;channels&quot;);</span><br><span class="line">    &#x2F;&#x2F; 定制渠道包的APK的文件名称</span><br><span class="line">    apkFileNameFormat &#x3D; &#39;$&#123;appName&#125;-$&#123;packageName&#125;-$&#123;channel&#125;-$&#123;buildType&#125;-v$&#123;versionName&#125;-$&#123;versionCode&#125;-$&#123;buildTime&#125;.apk&#39;;</span><br><span class="line">    &#x2F;&#x2F; 渠道配置文件</span><br><span class="line">    channelFile &#x3D; new File(&quot;$&#123;project.getProjectDir()&#125;&#x2F;channel&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>感觉这个可要可不要，因为我们主要是打未加固的包，然后使用360加固，然后使用python打渠道包</p><p><a href="https://blog.csdn.net/chengxuyuanchaochao/article/details/92764902">美团walle+python多渠道打包</a></p><h2 id="4-4-多module集中管理"><a href="#4-4-多module集中管理" class="headerlink" title="4.4 多module集中管理"></a>4.4 多module集中管理</h2><ul><li>1.在项目的根目录下新建extraModule文件夹</li><li>2.把所需要依赖的module都放在该目录下</li><li>3.在setting.gradle中将原有的所有的moduleName改为:extraModule:moduleName，点击同步，即可</li></ul><h1 id="第五章-开源项目"><a href="#第五章-开源项目" class="headerlink" title="第五章 开源项目"></a>第五章 开源项目</h1><h2 id="4-1-日历"><a href="#4-1-日历" class="headerlink" title="4.1 日历"></a>4.1 日历</h2><p><strong><a href="https://github.com/wenzhihao123/Android-CalendarView-master">Android-CalendarView-master</a></strong>:实现方式  GridView</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建</title>
      <link href="2021/01/09/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>2021/01/09/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-使用hexo快速搭建博客"><a href="#第一章-使用hexo快速搭建博客" class="headerlink" title="第一章 使用hexo快速搭建博客"></a>第一章 使用hexo快速搭建博客</h1><blockquote><p>​    主要参考博客：</p><p><a href="https://www.jianshu.com/p/a31beec77b57">1. 使用hexo和码云pages搭建个人博客</a></p><p><a href="https://blog.csdn.net/qq_38157825/article/details/108401691">2. Hexo 中 Butterfly主题</a></p></blockquote><h2 id="1-1环境配置"><a href="#1-1环境配置" class="headerlink" title="1.1环境配置"></a>1.1环境配置</h2><p>主要配置包括：</p><ul><li>node.js 开发环境</li><li>npm 安装工具</li><li>hexo 博客</li><li>gitee pages</li><li>butterfly 博客美化</li></ul><p>部署远端服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;gitee.com&#x2F;evancola&#x2F;evancola.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="1-2-常用命令"><a href="#1-2-常用命令" class="headerlink" title="1.2 常用命令"></a>1.2 常用命令</h2><table><thead><tr><th>hexo clean</th><th>一般很少用</th></tr></thead><tbody><tr><td>hexo g</td><td>修改配置后，重新生成</td></tr><tr><td>hexo s</td><td>本地运行，地址：<a href="http://localhost:4000/">http://localhost:4000/</a></td></tr><tr><td>hexo d</td><td>部署到远端服务器</td></tr></tbody></table><h2 id="1-3-关于页面"><a href="#1-3-关于页面" class="headerlink" title="1.3 关于页面"></a>1.3 关于页面</h2><p><a href="https://blog.csdn.net/mqdxiaoxiao/article/details/93644533">https://blog.csdn.net/mqdxiaoxiao/article/details/93644533</a></p><p>首先打开关于页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">关于: &#x2F;about&#x2F; || fas fa-heart</span><br></pre></td></tr></table></figure><p>重新生成部署后，可以看到新增的菜单项，但是单击后会报如下错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot GET &#x2F;about&#x2F;</span><br></pre></td></tr></table></figure><p>这是因为你还需运行如下命令新建相关页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;about&quot;</span><br></pre></td></tr></table></figure><p>会在source文件下创建about文件夹，文件夹下会有一个index.md文件</p><p>打开文件，文件头新增：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: about</span><br><span class="line">date: 2021-01-10 13:34:20</span><br><span class="line">type: &quot;about&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>然后你就可以编辑该文件，编写你的关于界面了，示例：</p><h2 id="1-4-分类"><a href="#1-4-分类" class="headerlink" title="1.4 分类"></a>1.4 分类</h2><p>在项目根目录执行下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>source文件夹下就会生成<code>categories</code>文件夹，修改里面的.md文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2021-01-10 10:57:09</span><br><span class="line">type: categories</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>接着在主题文件夹的<code>_config.yml</code>中开启分类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">分类: &#x2F;categories&#x2F; || fas fa-folder-open</span><br></pre></td></tr></table></figure><p>最后，要使用分类的话，只需要在发布的文章的.md中加上<code>categories</code>头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Android知识总结</span><br><span class="line">date: 2021-01-09 01:25:03</span><br><span class="line">categories: Android</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="1-5-标签"><a href="#1-5-标签" class="headerlink" title="1.5 标签"></a>1.5 标签</h2><p>在项目根目录执行下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure><p>source文件夹下就会生成<code>tags</code>文件夹，修改里面的.md文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2021-01-10 10:57:09</span><br><span class="line">type: tags</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>接着在主题文件夹的<code>_config.yml</code>中开启标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">标签: &#x2F;tags&#x2F; || fas fa-tags</span><br></pre></td></tr></table></figure><p>最后，要使用标签的话，只需要在发布的文章的.md中加上<code>tags</code>头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Android知识总结</span><br><span class="line">date: 2021-01-09 01:25:03</span><br><span class="line">categories: Android</span><br><span class="line">tags: [Android]</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h1 id="第二章-ButterFly美化博客"><a href="#第二章-ButterFly美化博客" class="headerlink" title="第二章 ButterFly美化博客"></a>第二章 ButterFly美化博客</h1><p><a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a></p><p><a href="https://butterfly.js.org/posts/dc584b87/">Butterfly 安装文档(二) 主题页面</a></p><h2 id="2-1-首页导航"><a href="#2-1-首页导航" class="headerlink" title="2.1 首页导航"></a>2.1 首页导航</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  首页: &#x2F; || fas fa-home</span><br><span class="line">  归档: &#x2F;archives&#x2F; || fas fa-archive</span><br><span class="line">  标签: &#x2F;tags&#x2F; || fas fa-tags</span><br><span class="line">  分类: &#x2F;categories&#x2F; || fas fa-folder-open</span><br><span class="line">  # List||fas fa-list:</span><br><span class="line">  #   - Music || &#x2F;music&#x2F; || fas fa-music</span><br><span class="line">  #   - Movie || &#x2F;movies&#x2F; || fas fa-video</span><br><span class="line">  链接: &#x2F;link&#x2F; || fas fa-link</span><br><span class="line">  关于: &#x2F;about&#x2F; || fas fa-heart</span><br></pre></td></tr></table></figure><h2 id="2-2-代码高亮、"><a href="#2-2-代码高亮、" class="headerlink" title="2.2 代码高亮、"></a>2.2 代码高亮、</h2><p>一共有6种模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">highlight_theme: mac light #  darker &#x2F; pale night &#x2F; light &#x2F; ocean &#x2F; mac &#x2F; mac light &#x2F; false</span><br></pre></td></tr></table></figure><h2 id="2-3-代码复制"><a href="#2-3-代码复制" class="headerlink" title="2.3 代码复制"></a>2.3 代码复制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">highlight_copy: true &#x2F;&#x2F;默认是true</span><br></pre></td></tr></table></figure><h2 id="2-4-首页大图"><a href="#2-4-首页大图" class="headerlink" title="2.4 首页大图"></a>2.4 首页大图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># The banner image of home page</span><br><span class="line">index_img: </span><br></pre></td></tr></table></figure><h2 id="2-5-归档背景"><a href="#2-5-归档背景" class="headerlink" title="2.5 归档背景"></a>2.5 归档背景</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># The banner image of archive page</span><br><span class="line">archive_img: </span><br></pre></td></tr></table></figure><h2 id="2-6-个人头像"><a href="#2-6-个人头像" class="headerlink" title="2.6 个人头像"></a>2.6 个人头像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Avatar (頭像)</span><br><span class="line">avatar:</span><br><span class="line">  img: </span><br><span class="line">  effect: false</span><br></pre></td></tr></table></figure><h2 id="2-7-运行时间"><a href="#2-7-运行时间" class="headerlink" title="2.7 运行时间"></a>2.7 运行时间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">runtimeshow:</span><br><span class="line">  enable: true</span><br><span class="line">  publish_date: 1&#x2F;10&#x2F;2021 00:00:00</span><br></pre></td></tr></table></figure><h2 id="2-9-错误页面"><a href="#2-9-错误页面" class="headerlink" title="2.9 错误页面"></a>2.9 错误页面</h2><blockquote><p>本地預覽時，訪問出錯的網站是不會跳到404頁面的。</p><p>如需本地預覽，請訪問<a href="http://localhost:4000/404.html">http://localhost:4000/404.html</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">error_404:</span><br><span class="line">  enable: true</span><br><span class="line">  subtitle: &#39;页面没找到&#39;</span><br><span class="line">  background: https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;05&#x2F;19&#x2F;aKOcLiyPl2JQdFD.png</span><br></pre></td></tr></table></figure><h2 id="2-10-背景特效"><a href="#2-10-背景特效" class="headerlink" title="2.10 背景特效"></a>2.10 背景特效</h2><h3 id="2-10-1-静止彩带"><a href="#2-10-1-静止彩带" class="headerlink" title="2.10.1 静止彩带"></a>2.10.1 静止彩带</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">canvas_ribbon:</span><br><span class="line">  enable: true</span><br><span class="line">  size: 150</span><br><span class="line">  alpha: 0.6</span><br><span class="line">  zIndex: -1</span><br><span class="line">  click_to_change: true</span><br><span class="line">  mobile: true</span><br></pre></td></tr></table></figure><h3 id="2-10-2-canvas-nest"><a href="#2-10-2-canvas-nest" class="headerlink" title="2.10.2 canvas_nest"></a>2.10.2 canvas_nest</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">canvas_nest:</span><br><span class="line">  enable: true</span><br><span class="line">  color: &#39;0,0,255&#39; #color of lines, default: &#39;0,0,0&#39;; RGB values: (R,G,B).(note: use &#39;,&#39; to separate.)</span><br><span class="line">  opacity: 0.7 # the opacity of line (0~1), default: 0.5.</span><br><span class="line">  zIndex: -1 # z-index property of the background, default: -1.</span><br><span class="line">  count: 99 # the number of lines, default: 99.</span><br><span class="line">  mobile: true</span><br></pre></td></tr></table></figure><h2 id="2-11-文章封面"><a href="#2-11-文章封面" class="headerlink" title="2.11 文章封面"></a>2.11 文章封面</h2><p>主要是设置<code>default_cover</code>属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cover:</span><br><span class="line">  # display the cover or not (是否顯示文章封面)</span><br><span class="line">  index_enable: true</span><br><span class="line">  aside_enable: true</span><br><span class="line">  archives_enable: true</span><br><span class="line">  # the position of cover in home page (封面顯示的位置)</span><br><span class="line">  # left&#x2F;right&#x2F;both</span><br><span class="line">  position: both</span><br><span class="line">  # When cover is not set, the default cover is displayed (當沒有設置cover時，默認的封面顯示)</span><br><span class="line">  default_cover:</span><br><span class="line">    - https:&#x2F;&#x2F;gank.io&#x2F;images&#x2F;882afc997ad84f8ab2a313f6ce0f3522</span><br><span class="line">    - https:&#x2F;&#x2F;gank.io&#x2F;images&#x2F;e56da642238a43c4971f12d4e3395f30</span><br><span class="line">    - https:&#x2F;&#x2F;gank.io&#x2F;images&#x2F;02eb8ca3297f4931ab64b7ebd7b5b89c</span><br></pre></td></tr></table></figure><h2 id="2-12-文章锚点"><a href="#2-12-文章锚点" class="headerlink" title="2.12 文章锚点"></a>2.12 文章锚点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anchor: true</span><br></pre></td></tr></table></figure><h2 id="2-13-目录"><a href="#2-13-目录" class="headerlink" title="2.13 目录"></a>2.13 目录</h2><p>注意：需要禁用number，否则目录很难看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">toc:</span><br><span class="line">  enable: true</span><br><span class="line">  number: false</span><br><span class="line">  style_simple: false</span><br></pre></td></tr></table></figure><h2 id="2-14-首页名言"><a href="#2-14-首页名言" class="headerlink" title="2.14 首页名言"></a>2.14 首页名言</h2><p>修改主题配置文件(注意：_config.yml里面的subtitle不要写内容，否则无法显示)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># the subtitle on homepage (主頁subtitle)</span><br><span class="line">subtitle:</span><br><span class="line">  enable: true</span><br><span class="line">  # Typewriter Effect (打字效果)</span><br><span class="line">  effect: true</span><br><span class="line">  # loop (循環打字)</span><br><span class="line">  loop: true</span><br><span class="line">  # source調用第三方服務</span><br><span class="line">  # source: false 關閉調用</span><br><span class="line">  # source: 1  調用搏天api的隨機語錄（簡體） https:&#x2F;&#x2F;api.btstu.cn&#x2F;</span><br><span class="line">  # source: 2  調用一言網的一句話（簡體） https:&#x2F;&#x2F;hitokoto.cn&#x2F;</span><br><span class="line">  # source: 3  調用一句網（簡體） http:&#x2F;&#x2F;yijuzhan.com&#x2F;</span><br><span class="line">  # source: 4  調用今日詩詞（簡體） https:&#x2F;&#x2F;www.jinrishici.com&#x2F;</span><br><span class="line">  # subtitle 會先顯示 source , 再顯示 sub 的內容</span><br><span class="line">  source: false</span><br><span class="line">  # 如果有英文逗號&#39; , &#39;,請使用轉義字元 &amp;#44;</span><br><span class="line">  # 如果有英文雙引號&#39; &quot; &#39;,請使用轉義字元 &quot;</span><br><span class="line">  # 開頭不允許轉義字元，如需要，請把整個句子用雙引號包住</span><br><span class="line">  # 如果關閉打字效果，subtitle只會顯示sub的第一行文字</span><br><span class="line">  sub:</span><br><span class="line">    - 路漫漫其修远兮，吾将上下而求索！</span><br></pre></td></tr></table></figure><h2 id="2-15本地搜索"><a href="#2-15本地搜索" class="headerlink" title="2.15本地搜索"></a>2.15本地搜索</h2><p>使用的 <strong>hexo-generator-search</strong> 来实现本地搜索</p><p><a href="https://github.com/wzpan/hexo-generator-search">https://github.com/wzpan/hexo-generator-search</a></p><p>第一步：安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>第二步：配置全局的_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: true</span><br></pre></td></tr></table></figure><p>第三步：打开主题文件，开启本地搜索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><h1 id="第四章-常见问题"><a href="#第四章-常见问题" class="headerlink" title="第四章 常见问题"></a>第四章 常见问题</h1><p><strong>Hexo错误”expected end of comment, got end of file”</strong></p><p>一般问题原因：Markdown文档中有错误，如在非代码中使用了#，没有对#作为转义处理</p><p>解决办法：<a href="http://xuejiangtao.com/posts/11a14c34/">http://xuejiangtao.com/posts/11a14c34/</a></p><p>找到出错的文件,将#替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#35;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot博客开发</title>
      <link href="2021/01/09/SpringBoot%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91/"/>
      <url>2021/01/09/SpringBoot%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="SpringBoot博客开发"><a href="#SpringBoot博客开发" class="headerlink" title="SpringBoot博客开发"></a>SpringBoot博客开发</h1><h2 id="第一章-首页开发"><a href="#第一章-首页开发" class="headerlink" title="第一章 首页开发"></a>第一章 首页开发</h2><h3 id="1-1-创建项目和文件目录"><a href="#1-1-创建项目和文件目录" class="headerlink" title="1.1 创建项目和文件目录"></a>1.1 创建项目和文件目录</h3><p><strong>创建项目</strong></p><p>使用webstrom,创建项目，选择empty project，输入项目名称blog</p><p>创建文件目录</p><ul><li>static<ul><li>css</li><li>js</li><li>images</li></ul></li></ul><h3 id="1-2-前端框架-Semantic-UI"><a href="#1-2-前端框架-Semantic-UI" class="headerlink" title="1.2 前端框架 Semantic UI"></a>1.2 前端框架 Semantic UI</h3><p>引入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;semantic-ui&#x2F;2.2.10&#x2F;semantic.min.css&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;jquery@3.2&#x2F;dist&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;semantic-ui&#x2F;2.2.10&#x2F;semantic.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>免费的CDN:<a href="https://www.jsdelivr.com/">https://www.jsdelivr.com/</a></p><h3 id="1-3-首页开发"><a href="#1-3-首页开发" class="headerlink" title="1.3 首页开发"></a>1.3 首页开发</h3><p><strong>导航</strong></p><blockquote><p>导航的实现方式：segment + container + menu(item + right item)</p></blockquote><p><strong>中间内容</strong></p><p><strong>整体布局方式</strong>：container + grid网格布局11:5</p><p><strong>博客文章布局</strong>：三个 attatched segment</p><p><strong>博客文章头部</strong>：使用 two column grid进行左右布局，其中的子项使用了right aligned进行右对齐</p><p><strong>博客文章列表item</strong>：每篇文章使用的segment布局，下面使用了grid(11:5)进行左右布局</p><ul><li>文章标题：h3+header</li><li>文章：p标签</li><li><h2 id="底部：grid-11-5-布局-水平列表布局-horizontal-list"><a href="#底部：grid-11-5-布局-水平列表布局-horizontal-list" class="headerlink" title="底部：grid(11:5)布局 + 水平列表布局(horizontal list)"></a>底部：grid(11:5)布局 + 水平列表布局(horizontal list)</h2></li></ul><p>首页手机端适配</p><ul><li>stackable 针对导航的menu，grid布局</li><li>mobile reversed：在手机上可以将grid布局上下翻转，本博客的效果是：手机端，图片在上，文字在下</li></ul><p><strong>jquery小知识</strong></p><ul><li>可以使用$(“xxx”)来获取元素，xxx可以是id，也可以是class值</li><li>toggleClass 可以实现切换效果：判断是否有该属性，没有则添加该属性，有则移除该属性</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(&quot;.sidebar&quot;).click(function () &#123;</span><br><span class="line">        $(&quot;.m-item&quot;).toggleClass(&quot;m-mobile-hide&quot;);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="第二章：页面插件集成"><a href="#第二章：页面插件集成" class="headerlink" title="第二章：页面插件集成"></a>第二章：页面插件集成</h2><h3 id="2-1-Markdown插件"><a href="#2-1-Markdown插件" class="headerlink" title="2.1 Markdown插件"></a>2.1 Markdown插件</h3><p><strong>第一步：下载并集成到 项目中</strong></p><p>下载markdown插件，地址:<a href="https://github.com/pandao/editor.md">https://github.com/pandao/editor.md</a></p><p>解压，并复制到项目中</p><p>第二步：引入css和js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;css</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;static&#x2F;lib&#x2F;editor&#x2F;css&#x2F;editormd.min.css&quot;&gt;</span><br><span class="line">&#x2F;&#x2F;js</span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;static&#x2F;lib&#x2F;editor&#x2F;editormd.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>第三步：必要设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;field&quot;&gt;</span><br><span class="line">                &lt;div id&#x3D;&quot;md-content&quot; style&#x3D;&quot;z-index: 1 !important;&quot;&gt;</span><br><span class="line">                    &lt;textarea placeholder&#x3D;&quot;博客内容&quot; name&#x3D;&quot;content&quot; style&#x3D;&quot;display: none&quot;&gt;&lt;&#x2F;textarea&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>style=”z-index: 1 !important;” 主要是解决编辑器全屏显示问题</p><h3 id="2-2-内容排版"><a href="#2-2-内容排版" class="headerlink" title="2.2 内容排版"></a>2.2 内容排版</h3><p><a href="https://github.com/sofish/typo.css">https://github.com/sofish/typo.css</a></p><p>引入css</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;static&#x2F;css&#x2F;typo.css&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="2-3-动画"><a href="#2-3-动画" class="headerlink" title="2.3 动画"></a>2.3 动画</h3><p><a href="https://github.com/animate-css/animate.css">https://github.com/animate-css/animate.css</a></p><p>引入css</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;.&#x2F;static&#x2F;css&#x2F;animate.css&quot;&gt;</span><br></pre></td></tr></table></figure><p>引入动画属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">animated xxx  xxx即使需要的动画 如 fadeIn</span><br><span class="line">&lt;div class&#x3D;&quot;m-container-small m-padding-tb-big animated fadeIn&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="2-4-代码高亮"><a href="#2-4-代码高亮" class="headerlink" title="2.4 代码高亮"></a>2.4 代码高亮</h3><p><a href="https://prismjs.com/download.html">prism</a></p><p>引入css和Js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;.&#x2F;static&#x2F;lib&#x2F;prism&#x2F;prism.css&quot;&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;.&#x2F;static&#x2F;lib&#x2F;prism&#x2F;prism.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre&gt;</span><br><span class="line">                     &lt;code class&#x3D;&quot;language-css&quot;&gt;</span><br><span class="line">                    var a &#x3D; 10;</span><br><span class="line">                    .m-inline-block&#123;</span><br><span class="line">                        display: inline-block !important;</span><br><span class="line">                    &#125;</span><br><span class="line">                     &lt;&#x2F;code&gt;</span><br><span class="line">                &lt;&#x2F;pre&gt;</span><br></pre></td></tr></table></figure><h3 id="2-4-目录生成"><a href="#2-4-目录生成" class="headerlink" title="2.4 目录生成"></a>2.4 目录生成</h3><p><a href="https://github.com/tscanlin/tocbot">https://github.com/tscanlin/tocbot</a></p><p>tocbot使用方式</p><p>第一步添加css和Js，并引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;.&#x2F;static&#x2F;lib&#x2F;tocbot&#x2F;tocbot.css&quot;&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;.&#x2F;static&#x2F;lib&#x2F;tocbot&#x2F;tocbot.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>第二步：在指定位置弹出目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;.toc&quot;).popup(&#123;</span><br><span class="line">        popup:$(&quot;.toc-container.popup&quot;),</span><br><span class="line">        on:&quot;click&quot;,</span><br><span class="line">        position:&quot;left center&quot;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>其实也可不弹出，直接显示目录，toc-container就是要生成的目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;ui toc-container flowing popup top left transition hidden&quot; style&#x3D;&quot;width: 250px !important;&quot;&gt;</span><br><span class="line">&lt;!--    生成的目录--&gt;</span><br><span class="line">    &lt;ol class&#x3D;&quot;js-toc&quot;&gt;&lt;&#x2F;ol&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>第三步：初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tocbot.init(&#123;</span><br><span class="line">        &#x2F;&#x2F; Where to render the table of contents.</span><br><span class="line">        tocSelector: &#39;.js-toc&#39;,</span><br><span class="line">        &#x2F;&#x2F; Where to grab the headings to build the table of contents.</span><br><span class="line">        contentSelector: &#39;.js-toc-content&#39;,</span><br><span class="line">        &#x2F;&#x2F; Which headings to grab inside of the contentSelector element.</span><br><span class="line">        headingSelector: &#39;h1, h2, h3&#39;,</span><br><span class="line">        &#x2F;&#x2F; For headings inside relative or absolute positioned containers within content.</span><br><span class="line">        hasInnerContainers: true,</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><ul><li>js-toc 生成目录的ol位置</li><li>js-toc-content 哪些地方需要生成目录，一般文章正文</li><li>headingSelector 哪些标签需要生成目录 一般都是h标签</li></ul><p>注意：所有的h标签，必须有ID属性</p><h3 id="2-5-平滑滚动"><a href="#2-5-平滑滚动" class="headerlink" title="2.5 平滑滚动"></a>2.5 平滑滚动</h3><p>第一步：添加JS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;jquery.scrollto@2.1.2&#x2F;jquery.scrollTo.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>第二步：按钮点击</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&#39;#toTopBtn&#39;).click(function () &#123;</span><br><span class="line">        $(window).scrollTo(0,500);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>scrollTo参数说明：第一个参数0 表示滚动的位置，0表示滚动到最顶端，第二个参数500表示时间</p><h3 id="2-6滚动监测"><a href="#2-6滚动监测" class="headerlink" title="2.6滚动监测"></a>2.6滚动监测</h3><p>第一步：添加CSS和JS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;.&#x2F;static&#x2F;lib&#x2F;waypoints&#x2F;jquery.waypoints.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>第二步：添加滚动监测</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;滚动检测</span><br><span class="line">    var waypoint &#x3D; new Waypoint(&#123;</span><br><span class="line">        element: document.getElementById(&#39;waypoint&#39;),</span><br><span class="line">        handler: function(direction) &#123;</span><br><span class="line">            if (direction &#x3D;&#x3D; &#39;down&#39;) &#123;</span><br><span class="line">                $(&#39;#toolbar&#39;).show(500);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $(&#39;#toolbar&#39;).hide(500);</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(&#39;Scrolled to waypoint!  &#39; + direction);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>说明：这里的element就是我们要监测的滚动标签，然后判断滚动方向，如果是向下滚动，就显示我们右下角的工具条，如果向上滚动，就隐藏</p><h2 id="第三章-Semantic-UI"><a href="#第三章-Semantic-UI" class="headerlink" title="第三章 Semantic UI"></a>第三章 Semantic UI</h2><ul><li><p>官网地址：<a href="https://semantic-ui.com/">https://semantic-ui.com/</a></p></li><li><p>中文文档和视频：<a href="https://zijieke.com/semantic-ui/">https://zijieke.com/semantic-ui/</a></p></li><li><p>学习博客：<a href="https://www.cnblogs.com/jie-fang/p/10279499.html">https://www.cnblogs.com/jie-fang/p/10279499.html</a></p></li></ul><p>Semantic UI 基本上都是以ui开头</p><h3 id="2-1-grid"><a href="#2-1-grid" class="headerlink" title="2.1 grid"></a>2.1 grid</h3><blockquote><p>网格布局，在semantic-ui中提供了16个网格，使用<code>class=&quot;column&quot;</code>，当然也可以通过数字来表示当前网格大小</p></blockquote><p><strong>案例一：4-8-4网格</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;ui grid&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;ui four wide column&quot; style&#x3D;&quot;background-color: darkred&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;ui eight wide column&quot; style&#x3D;&quot;background-color: green&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;ui four wide column&quot; style&#x3D;&quot;background-color: blue&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h3 id="2-2-segment"><a href="#2-2-segment" class="headerlink" title="2.2 segment"></a>2.2 segment</h3><blockquote><p> 片段</p></blockquote><ul><li>ui segment</li><li>ui segments</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;ui segment&quot;&gt;</span><br><span class="line">&lt;p&gt;Top&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;ui segments&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;ui segment&quot;&gt;</span><br><span class="line">    &lt;p&gt;Top&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;ui segment&quot;&gt;</span><br><span class="line">    &lt;p&gt;Middle&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h3 id="2-3-container"><a href="#2-3-container" class="headerlink" title="2.3 container"></a>2.3 container</h3><blockquote><p>container：容器，使用container，两边会有边距</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;background-color: green&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;ui inverted container&quot; style&#x3D;&quot;background-color: blue&quot;&gt;</span><br><span class="line">    &lt;p style&#x3D;&quot;color: red&quot;&gt;你好&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h3 id="2-4-menu"><a href="#2-4-menu" class="headerlink" title="2.4 menu"></a>2.4 menu</h3><blockquote><p>菜单menu,每一个子项为item</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;ui inverted secondary stackable menu&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;ui teal header item&quot;&gt;Blog&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;ui m-item item m-mobile-hide&quot;&gt;首页&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;ui m-item item m-mobile-hide&quot;&gt;分类&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;ui m-item item m-mobile-hide&quot;&gt;标签&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;ui m-item item m-mobile-hide&quot;&gt;归档&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class&#x3D;&quot;right m-item item m-mobile-hide&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;ui icon inverted input&quot;&gt;</span><br><span class="line">                    &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;Search...&quot;&gt;</span><br><span class="line">                    &lt;i class&#x3D;&quot;search link icon&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h3 id="2-5-icon"><a href="#2-5-icon" class="headerlink" title="2.5 icon"></a>2.5 icon</h3><blockquote><p><a href="https://semantic-ui.com/elements/icon.html">图标库</a><br> <a href="https://fontawesome.com/">Font Awesome 5.0.8</a></p></blockquote><p>使用举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class&#x3D;&quot;add user icon&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">&lt;i class&#x3D;&quot;phone volume icon&quot;&gt;&lt;&#x2F;i&gt;</span><br></pre></td></tr></table></figure><h3 id="2-6-button"><a href="#2-6-button" class="headerlink" title="2.6 button"></a>2.6 button</h3><blockquote><p>在Semantic-UI中定义了很多的按钮样式，可以通过<code>class=&quot;ui button&quot;</code>来指定，也可以在class中指定颜色。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;button class&#x3D;&quot;ui button&quot;&gt;基础样式按钮&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button class&#x3D;&quot;ui red button&quot;&gt;红色按钮&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button class&#x3D;&quot;ui red basic button&quot;&gt;红色按钮&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button class&#x3D;&quot;ui red inverted button&quot;&gt;红色反转按钮&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><p><strong>图标按钮</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button class&#x3D;&quot;ui black button&quot;&gt;</span><br><span class="line">&lt;i class&#x3D;&quot;unlock green icon&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><p><strong>图标按钮组</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;ui buttons&quot;&gt;</span><br><span class="line">    &lt;button class&#x3D;&quot;ui button&quot;&gt;&lt;i class&#x3D;&quot;save icon&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button class&#x3D;&quot;ui button&quot;&gt;&lt;i class&#x3D;&quot;edit icon&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button class&#x3D;&quot;ui button&quot;&gt;&lt;i class&#x3D;&quot;remove icon&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p><strong>垂直图标按钮</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;ui vertical buttons&quot;&gt;</span><br><span class="line">    &lt;button class&#x3D;&quot;ui button&quot;&gt;&lt;i class&#x3D;&quot;save icon&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button class&#x3D;&quot;ui button&quot;&gt;&lt;i class&#x3D;&quot;edit icon&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button class&#x3D;&quot;ui button&quot;&gt;&lt;i class&#x3D;&quot;remove icon&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p><strong>圆形/椭圆图标按钮</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;圆形图标</span><br><span class="line">&lt;div class&#x3D;&quot;ui circular icon button&quot;&gt;&lt;i class&#x3D;&quot;settings icon&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&#x2F;&#x2F;椭圆图标</span><br><span class="line">&lt;div class&#x3D;&quot;ui circular button&quot;&gt;&lt;i class&#x3D;&quot;settings icon&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p><strong>按钮状态</strong></p><ul><li>激活 active</li><li>不可用 disabled</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;ui active button&quot;&gt;</span><br><span class="line">&lt;i class&#x3D;&quot;settings icon&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;ui disabled button&quot;&gt;</span><br><span class="line">&lt;i class&#x3D;&quot;settings icon&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p><strong>条件按钮</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;ui buttons&quot;&gt;</span><br><span class="line">&lt;button class&#x3D;&quot;ui green button&quot;&gt;yes&lt;&#x2F;button&gt;</span><br><span class="line">&lt;i class&#x3D;&quot;or&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">&lt;button class&#x3D;&quot;ui red button&quot;&gt;no&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p><strong>按钮大小</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;button class&#x3D;&quot;ui mini button&quot;&gt;mini&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button class&#x3D;&quot;ui tiny button&quot;&gt;tiny&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button class&#x3D;&quot;ui small button&quot;&gt;small&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button class&#x3D;&quot;ui medium button&quot;&gt;medium&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button class&#x3D;&quot;ui large button&quot;&gt;large&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button class&#x3D;&quot;ui big button&quot;&gt;big&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button class&#x3D;&quot;ui huge button&quot;&gt;huge&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button class&#x3D;&quot;ui massive button&quot;&gt;massive&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><h3 id="2-7-header"><a href="#2-7-header" class="headerlink" title="2.7 header"></a>2.7 header</h3><p><strong>基础标题</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 class&#x3D;&quot;ui header&quot;&gt;一级标题&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;h2 class&#x3D;&quot;ui header&quot;&gt;二级标题&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;h3 class&#x3D;&quot;ui header&quot;&gt;三级标题&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;h4 class&#x3D;&quot;ui header&quot;&gt;四级标题&lt;&#x2F;h4&gt;</span><br><span class="line">&lt;h5 class&#x3D;&quot;ui header&quot;&gt;五级标题&lt;&#x2F;h5&gt;</span><br></pre></td></tr></table></figure><p><strong>标题大小</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3 class&#x3D;&quot;ui tiny header&quot;&gt;tiny&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;h3 class&#x3D;&quot;ui small header&quot;&gt;small&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;h3 class&#x3D;&quot;ui large header&quot;&gt;large&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;h3 class&#x3D;&quot;ui huge header&quot;&gt;huge&lt;&#x2F;h3&gt;</span><br></pre></td></tr></table></figure><h3 id="2-8-image"><a href="#2-8-image" class="headerlink" title="2.8 image"></a>2.8 image</h3><p><strong>边框图片</strong> bordered</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;picsum.photos&#x2F;id&#x2F;1&#x2F;200&#x2F;200&quot; alt&#x3D;&quot;&quot; class&#x3D;&quot;ui bordered image&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>圆角图片</strong> rounded</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;picsum.photos&#x2F;id&#x2F;1&#x2F;200&#x2F;200&quot; alt&#x3D;&quot;&quot; class&#x3D;&quot;ui rounded image&quot;&gt;</span><br></pre></td></tr></table></figure><p>椭圆图片 circular</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;picsum.photos&#x2F;id&#x2F;1&#x2F;200&#x2F;200&quot; alt&#x3D;&quot;&quot; class&#x3D;&quot;ui circular image&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>图片状态【激活，禁用】</strong> active disabled</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;图片状态【激活，禁用】&lt;&#x2F;p&gt;</span><br><span class="line">&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;picsum.photos&#x2F;id&#x2F;1&#x2F;200&#x2F;200&quot; alt&#x3D;&quot;&quot; class&#x3D;&quot;ui active image&quot;&gt;</span><br><span class="line">&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;picsum.photos&#x2F;id&#x2F;1&#x2F;200&#x2F;200&quot; alt&#x3D;&quot;&quot; class&#x3D;&quot;ui disabled image&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>图片大小</strong> tiny,small…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;picsum.photos&#x2F;id&#x2F;1&#x2F;200&#x2F;200&quot; alt&#x3D;&quot;&quot; class&#x3D;&quot;ui tiny image&quot;&gt;</span><br><span class="line">&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;picsum.photos&#x2F;id&#x2F;1&#x2F;200&#x2F;200&quot; alt&#x3D;&quot;&quot; class&#x3D;&quot;ui small image&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>图片浮动</strong></p><p>注意：会有溢出问题，暂未解决</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;图片浮动float&lt;&#x2F;p&gt;</span><br><span class="line">   &lt;div class&#x3D;&quot;ui segment&quot;&gt;</span><br><span class="line">       &lt;img src&#x3D;&quot;https:&#x2F;&#x2F;picsum.photos&#x2F;id&#x2F;1&#x2F;200&#x2F;200&quot; alt&#x3D;&quot;&quot; class&#x3D;&quot;ui left floated image&quot;&gt;</span><br><span class="line">       &lt;p&gt;</span><br><span class="line">           Semantic UI中文官方网站, 当前版本:Semantic UI 2.2.4... Semantic 集成了 React、Angular、Meteor 以及很多其他框架以帮助你组织 UI 层和你的应用逻辑层。</span><br><span class="line">           Semantic UI中文官方网站, 当前版本:Semantic UI 2.2.4... Semantic 集成了 React、Angular、Meteor 以及很多其他框架以帮助你组织 UI 层和你的应用逻辑层。</span><br><span class="line">       &lt;&#x2F;p&gt;</span><br><span class="line">   &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p><strong>图片组</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;ui small images&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;https:&#x2F;&#x2F;picsum.photos&#x2F;id&#x2F;1&#x2F;200&#x2F;200&quot; alt&#x3D;&quot;&quot; class&#x3D;&quot;ui image&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;https:&#x2F;&#x2F;picsum.photos&#x2F;id&#x2F;1&#x2F;200&#x2F;200&quot; alt&#x3D;&quot;&quot; class&#x3D;&quot;ui image&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;https:&#x2F;&#x2F;picsum.photos&#x2F;id&#x2F;1&#x2F;200&#x2F;200&quot; alt&#x3D;&quot;&quot; class&#x3D;&quot;ui image&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h3 id="2-9-input"><a href="#2-9-input" class="headerlink" title="2.9 input"></a>2.9 input</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;基础输入框&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;ui input&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;name&quot; name&#x3D;&quot;name&quot; placeholder&#x3D;&quot;请输入用户名&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;禁用输入框&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;ui disabled input&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;name2&quot; name&#x3D;&quot;name2&quot; placeholder&#x3D;&quot;请输入用户名&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;图标与输入框结合&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;ui left icon loading input&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;加载中...&quot;&gt;</span><br><span class="line">        &lt;i class&#x3D;&quot;search icon&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;输入框与标签结合&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;ui labeled input&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;ui label&quot;&gt;</span><br><span class="line">            http:&#x2F;&#x2F;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入url...&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;输入框的颜色反转&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;ui inverted labeled input&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;ui label&quot;&gt;</span><br><span class="line">            http:&#x2F;&#x2F;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入url...&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h3 id="2-10-分割线"><a href="#2-10-分割线" class="headerlink" title="2.10 分割线"></a>2.10 分割线</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;分割线&lt;&#x2F;p&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;ui divider&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;水平分割线并加入文字&lt;&#x2F;p&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;ui horizontal divider&quot;&gt;扫码关注我&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;竖线并加入or&lt;&#x2F;p&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;ui vertical divider&quot;&gt;or&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h3 id="2-11-表格"><a href="#2-11-表格" class="headerlink" title="2.11 表格"></a>2.11 表格</h3><p>基础样式表格：celled</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;p style&#x3D;&quot;text-align: center&quot;&gt;基础样式表格celled&lt;&#x2F;p&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;ui container&quot;&gt;</span><br><span class="line">    &lt;table class&#x3D;&quot;ui celled table&quot;&gt;</span><br><span class="line">        &lt;tr&gt;&lt;td&gt;昵称&lt;&#x2F;td&gt;&lt;td&gt;年龄&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr&gt;&lt;td&gt;赵丽颖&lt;&#x2F;td&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr&gt;&lt;td&gt;杨幂&lt;&#x2F;td&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h3 id="2-12-表单"><a href="#2-12-表单" class="headerlink" title="2.12 表单"></a>2.12 表单</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;表单&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;ui container&quot;&gt;</span><br><span class="line">        &lt;form action&#x3D;&quot;#&quot; method&#x3D;&quot;post&quot; class&#x3D;&quot;ui form&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;four wide field&quot;&gt;</span><br><span class="line">                &lt;label for&#x3D;&quot;name&quot;&gt;姓名&lt;&#x2F;label&gt;</span><br><span class="line">                &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot; id&#x3D;&quot;name&quot; placeholder&#x3D;&quot;请输入你的姓名...&quot;&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class&#x3D;&quot;four wide field&quot;&gt;</span><br><span class="line">                &lt;label for&#x3D;&quot;age&quot;&gt;年龄&lt;&#x2F;label&gt;</span><br><span class="line">                &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;age&quot; id&#x3D;&quot;age&quot; placeholder&#x3D;&quot;请输入你的年龄...&quot;&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class&#x3D;&quot;field&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;ui checkbox&quot;&gt;</span><br><span class="line">                    &lt;input type&#x3D;&quot;checkbox&quot;&gt;</span><br><span class="line">                    &lt;label&gt;同意注册协议1&lt;&#x2F;label&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class&#x3D;&quot;inline field&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;ui slider checkbox&quot;&gt;</span><br><span class="line">                    &lt;input type&#x3D;&quot;checkbox&quot;&gt;</span><br><span class="line">                    &lt;label&gt;同意注册协议1&lt;&#x2F;label&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class&#x3D;&quot;inline field&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;ui toggle checkbox&quot;&gt;</span><br><span class="line">                    &lt;input type&#x3D;&quot;checkbox&quot;&gt;</span><br><span class="line">                    &lt;label&gt;同意注册协议1&lt;&#x2F;label&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;button class&#x3D;&quot;ui green button&quot;&gt;注册&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;button class&#x3D;&quot;ui red button&quot;&gt;重置&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><ul><li>form 定义表格</li><li>Field 定义表格的每一行</li><li>four wide 定义输入框的宽度</li><li>三种样式的复选框：默认样式，slider,toggle</li></ul><p><strong>单选框</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;inline fields&quot;&gt;</span><br><span class="line">               &lt;label for&#x3D;&quot;sex&quot;&gt;性别&lt;&#x2F;label&gt;</span><br><span class="line">               &lt;div class&#x3D;&quot;field&quot;&gt;</span><br><span class="line">                   &lt;div class&#x3D;&quot;ui ratio checkbox&quot;&gt;</span><br><span class="line">                       &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;sex&quot; id&#x3D;&quot;sex&quot;&gt;&lt;label&gt;男&lt;&#x2F;label&gt;</span><br><span class="line">                   &lt;&#x2F;div&gt;</span><br><span class="line">               &lt;&#x2F;div&gt;</span><br><span class="line">               &lt;div class&#x3D;&quot;field&quot;&gt;</span><br><span class="line">                   &lt;div class&#x3D;&quot;ui ratio checkbox&quot;&gt;</span><br><span class="line">                       &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;sex&quot; id&#x3D;&quot;sex&quot;&gt;&lt;label&gt;女&lt;&#x2F;label&gt;</span><br><span class="line">                   &lt;&#x2F;div&gt;</span><br><span class="line">               &lt;&#x2F;div&gt;</span><br><span class="line">           &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p><strong>下拉列表</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width,initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;semantic-ui&#x2F;2.2.10&#x2F;semantic.min.css&quot;&gt;</span><br><span class="line">    &lt;title&gt;下拉列表&lt;&#x2F;title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;jquery@3.2&#x2F;dist&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;semantic-ui&#x2F;2.2.10&#x2F;semantic.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(function () &#123;</span><br><span class="line">            $(&quot;.ui.dropdown&quot;).dropdown();</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">     &lt;div class&#x3D;&quot;ui container&quot;&gt;</span><br><span class="line">         &lt;form action&#x3D;&quot;#&quot; class&#x3D;&quot;ui form&quot;&gt;</span><br><span class="line">             &lt;div class&#x3D;&quot;field&quot;&gt;</span><br><span class="line">                 &lt;label&gt;性别：&lt;&#x2F;label&gt;</span><br><span class="line">                 &lt;div class&#x3D;&quot;ui selection dropdown&quot;&gt;</span><br><span class="line">                     &lt;i class&#x3D;&quot;dropdown icon&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">                     &lt;div class&#x3D;&quot;default text&quot;&gt;性别&lt;&#x2F;div&gt;</span><br><span class="line">                     &lt;div class&#x3D;&quot;menu&quot;&gt;</span><br><span class="line">                         &lt;div class&#x3D;&quot;item&quot;&gt;男&lt;&#x2F;div&gt;</span><br><span class="line">                         &lt;div class&#x3D;&quot;item&quot;&gt;女&lt;&#x2F;div&gt;</span><br><span class="line">                     &lt;&#x2F;div&gt;</span><br><span class="line">                 &lt;&#x2F;div&gt;</span><br><span class="line">             &lt;&#x2F;div&gt;</span><br><span class="line">         &lt;&#x2F;form&gt;</span><br><span class="line">     &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="2-13-文本域"><a href="#2-13-文本域" class="headerlink" title="2.13 文本域"></a>2.13 文本域</h3><h1 id="第四章-框架搭建-实体类"><a href="#第四章-框架搭建-实体类" class="headerlink" title="第四章 框架搭建-实体类"></a>第四章 框架搭建-实体类</h1><h2 id="4-1-实体类"><a href="#4-1-实体类" class="headerlink" title="4.1 实体类"></a>4.1 实体类</h2><p><strong>实体类-博客</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 博客实体类</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Entity</span><br><span class="line">@Table(name &#x3D; &quot;t_blog&quot;)</span><br><span class="line">data class Blog(</span><br><span class="line">        @Id @GeneratedValue(strategy &#x3D; GenerationType.AUTO)</span><br><span class="line">        val id:Long? &#x3D; null,</span><br><span class="line">        val title:String,&#x2F;&#x2F;标题</span><br><span class="line">        val content:String,&#x2F;&#x2F;内容</span><br><span class="line">        val firstPicture:String,&#x2F;&#x2F;首图</span><br><span class="line">        val flag:String,</span><br><span class="line">        val views:Int,&#x2F;&#x2F;浏览次数</span><br><span class="line">        val appreciation:Boolean,&#x2F;&#x2F;赞赏</span><br><span class="line">        val shareStatement:Boolean,&#x2F;&#x2F;</span><br><span class="line">        val commentabled:Boolean,&#x2F;&#x2F;是否开启评论</span><br><span class="line">        val published:Boolean,</span><br><span class="line">        val recommend:Boolean,&#x2F;&#x2F;是否推荐</span><br><span class="line">        val createTime:Date,&#x2F;&#x2F;创建时间</span><br><span class="line">        val updateTime:Date&#x2F;&#x2F;更新时间</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>实体类-评论</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 评论</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Entity</span><br><span class="line">@Table(name &#x3D; &quot;t_comment&quot;)</span><br><span class="line">class Comment(</span><br><span class="line">        @Id @GeneratedValue(strategy &#x3D; GenerationType.AUTO)</span><br><span class="line">        val id:Long,</span><br><span class="line">        val nickname:String,</span><br><span class="line">        val email:String,</span><br><span class="line">        val content:String,</span><br><span class="line">        val avatar:String,</span><br><span class="line">        @Temporal(value &#x3D; TemporalType.TIMESTAMP)</span><br><span class="line">        val createTime:Date</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>实体类-tag</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 标签</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">@Entity</span><br><span class="line">@Table(name &#x3D; &quot;t_tag&quot;)</span><br><span class="line">class Tag(</span><br><span class="line">        @Id @GeneratedValue(strategy &#x3D; GenerationType.AUTO)</span><br><span class="line">        val id:Long,</span><br><span class="line">        val name:String</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>实体类-分类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 博客分类</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Entity</span><br><span class="line">@Table(name &#x3D; &quot;t_type&quot;)</span><br><span class="line">data class Type(</span><br><span class="line">        @Id</span><br><span class="line">        @GeneratedValue(strategy &#x3D; GenerationType.AUTO)</span><br><span class="line">        val id:Long? &#x3D; null,</span><br><span class="line">        val name:String</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="4-2-注解"><a href="#4-2-注解" class="headerlink" title="4.2 注解"></a>4.2 注解</h2><p>常用注解如下：</p><p><strong>注解</strong></p><p><strong>注意</strong></p><p>时间需要使用@Temporal注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Temporal(value &#x3D; TemporalType.TIMESTAMP)</span><br><span class="line">val createTime:Date,&#x2F;&#x2F;创建时间</span><br></pre></td></tr></table></figure><p>实体类之间的对应关系：</p><p>​    博客与分类：多对一的关系(多篇博客对应一个分类，一个分类对应多篇博客)</p><p>博客是多的一端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@ManyToOne</span><br><span class="line">val type: Type,</span><br></pre></td></tr></table></figure><p>在分类实体类中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@OneToMany(mappedBy &#x3D; &quot;type&quot;)</span><br><span class="line">val blogs:List&lt;Blog&gt;</span><br></pre></td></tr></table></figure><p>关于mappedBy：<a href="https://www.cnblogs.com/powerwu/articles/3964970.html">https://www.cnblogs.com/powerwu/articles/3964970.html</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter笔记</title>
      <link href="2021/01/09/Flutter%E7%AC%94%E8%AE%B0/"/>
      <url>2021/01/09/Flutter%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="第一章-Flutter环境搭建"><a href="#第一章-Flutter环境搭建" class="headerlink" title="第一章 Flutter环境搭建"></a>第一章 Flutter环境搭建</h1><blockquote><p>在第一章，我们将学习如下内容</p><ul><li>配置flutter开发环境(IOS)</li></ul></blockquote><h2 id="1-1-配置Flutter环境"><a href="#1-1-配置Flutter环境" class="headerlink" title="1.1 配置Flutter环境"></a>1.1 配置Flutter环境</h2><h4 id="1-下载Flutter-SDK"><a href="#1-下载Flutter-SDK" class="headerlink" title="1.下载Flutter SDK"></a>1.下载Flutter SDK</h4><p>打开Flutter中文官网：<a href="https://flutterchina.club/setup-macos/">https://flutterchina.club/setup-macos/</a></p><p>选择下载SDK，我们选择稳定版：Stable channel (macOS)</p><p>下载速度比较慢，我们把链接复制到迅雷里面下载</p><h4 id="2-配置Flutter路径："><a href="#2-配置Flutter路径：" class="headerlink" title="2.配置Flutter路径："></a>2.配置Flutter路径：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH&#x3D;$PATH:&#x2F;Library&#x2F;dev&#x2F;flutter&#x2F;bin</span><br></pre></td></tr></table></figure><h4 id="3-配置Flutter国内镜像："><a href="#3-配置Flutter国内镜像：" class="headerlink" title="3.配置Flutter国内镜像："></a>3.配置Flutter国内镜像：</h4><p>打开终端，输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open .bash_profile</span><br></pre></td></tr></table></figure><p>配置镜像地址：<a href="https://flutter.dev/community/china">https://flutter.dev/community/china</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#Flutter</span><br><span class="line">export PUB_HOSTED_URL&#x3D;https:&#x2F;&#x2F;pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL&#x3D;https:&#x2F;&#x2F;storage.flutter-io.cn</span><br></pre></td></tr></table></figure><h4 id="5-检查Flutter环境"><a href="#5-检查Flutter环境" class="headerlink" title="5.检查Flutter环境"></a>5.检查Flutter环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure><p>如果提示：Some Android licenses not accepted.  To resolve this, run: flutter doctor<br>      –android-licenses，则允许一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor --android-licenses</span><br></pre></td></tr></table></figure><p>启动IOS模拟器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open -a Simulator</span><br></pre></td></tr></table></figure><h4 id="4-创建项目"><a href="#4-创建项目" class="headerlink" title="4.创建项目"></a>4.创建项目</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter create my_app</span><br></pre></td></tr></table></figure><h1 id="第二章-Dart基础"><a href="#第二章-Dart基础" class="headerlink" title="第二章 Dart基础"></a>第二章 Dart基础</h1><p>Dart入门参考学习资料：<a href="https://www.dartcn.com/guides/language/language-tour">https://www.dartcn.com/guides/language/language-tour</a></p><h3 id="1-基础数据类型"><a href="#1-基础数据类型" class="headerlink" title="1.基础数据类型"></a>1.基础数据类型</h3><ul><li>数字 <ul><li>num</li><li>int</li><li>double</li></ul></li><li>字符串</li><li>布尔</li><li>集合</li><li>var</li></ul><h4 id="1-数字类型"><a href="#1-数字类型" class="headerlink" title="1.数字类型"></a>1.数字类型</h4><p>num是数字类型的父类，有两个子类,int和double</p><p>求绝对值：abs</p><p>类型转换：toInt(),round()</p><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">num num1 &#x3D; -1.5;</span><br><span class="line">int num2 &#x3D; 1;</span><br><span class="line">double num3 &#x3D; 1.4;</span><br><span class="line"></span><br><span class="line">print(&quot;num1&#x3D;$num1,num2&#x3D;$num2,num3&#x3D;$num3&quot;);</span><br><span class="line">&#x2F;&#x2F;求绝对值</span><br><span class="line">print(&quot;$num1的绝对值是$&#123;num1.abs()&#125;&quot;);</span><br><span class="line">&#x2F;&#x2F;数据类型转换</span><br><span class="line">print(&quot;$num1的转为整数是$&#123;num1.toInt()&#125;&quot;);</span><br><span class="line">print(&quot;$num1四舍五入是$&#123;num1.round()&#125;&quot;);</span><br></pre></td></tr></table></figure><p>转String,保留小数位数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toStringAsFixed(位数)，如：保留1位小数  如：5 -&gt; &quot;5.0&quot; </span><br></pre></td></tr></table></figure><p>其他知识点：</p><ul><li><p>final:被final修饰，只能赋值一次</p></li><li><p>const：被const修饰的是常量，不能被修改</p></li><li><p>除法和整除：/表示除法，结果为小数， ~/表示整除</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; 10 &#x2F;5;</span><br><span class="line">print(a); &#x2F;&#x2F;2.0</span><br><span class="line"></span><br><span class="line">var b &#x3D; 9.1~&#x2F;5;</span><br><span class="line">print(b); &#x2F;&#x2F;1</span><br></pre></td></tr></table></figure><ul><li>是否是偶数：isEven()，是否是奇数：isOdd()</li><li>round：四舍五入 floor:向下取整  ceil:向上取整</li></ul><h4 id="2-字符串"><a href="#2-字符串" class="headerlink" title="2.字符串"></a>2.字符串</h4><p>使用String定义,字符串拼接类似kotlin，也可以使用Java方式拼接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String str1 &#x3D; &#39;字符串&#39;,str2&#x3D;&quot;双引号&quot;;</span><br><span class="line">String str3 &#x3D; &quot;str1:$str1 str2:$str2&quot;;</span><br><span class="line">print(&quot;str1&#x3D;$str1&quot;);&#x2F;&#x2F;演示字符串拼接</span><br><span class="line">print(&quot;str2&#x3D;$str2&quot;);</span><br><span class="line">print(&quot;str3&#x3D;$str3&quot;);</span><br></pre></td></tr></table></figure><p>可以使用单引号，双引号，三引号定义字符串，以及使用r’字符串’定义一个不转义的字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var str1 &#x3D; &quot;hello \n world&quot;;</span><br><span class="line">var str2 &#x3D; r&#39;hello \n world&#39;;</span><br><span class="line">print(str1);</span><br><span class="line">print(str2); &#x2F;&#x2F; 不转义，直接输出，结果：hello \n world</span><br></pre></td></tr></table></figure><p>常用方法，自己尝试，类似Java的用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String str &#x3D; &quot;Hello WROLD&quot;;</span><br><span class="line">print(str.toUpperCase());</span><br><span class="line">print(str.toLowerCase());</span><br><span class="line">print(str.substring(0,5));</span><br><span class="line">print(str.indexOf(&#39;e&#39;));</span><br></pre></td></tr></table></figure><p>字符串乘法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var str3 &#x3D; &quot;love you &quot; * 5;</span><br><span class="line">print(str3);&#x2F;&#x2F;love you love you love you love you love you</span><br></pre></td></tr></table></figure><p>==比较的是内容</p><p>[]取字符串索引位置的字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str4 &#x3D; &quot;hello&quot;;</span><br><span class="line">  print(str4[0]);&#x2F;&#x2F;h</span><br><span class="line">  print(str4.length);&#x2F;&#x2F;5</span><br></pre></td></tr></table></figure><p>判断内容是否为空:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str5 &#x3D; &quot;&quot;;</span><br><span class="line">print(str5.isEmpty);&#x2F;&#x2F;只能判断内容是否为空，不能判断是否为null</span><br></pre></td></tr></table></figure><p>split:拆分字符串，拆分结果是列表，这里和Java不太一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str6 &#x3D; &quot;this is my lover&quot;;</span><br><span class="line">print(str6.split(&quot; &quot;));&#x2F;&#x2F;[this, is, my, lover]</span><br><span class="line">print(str6.split(&quot; &quot;).runtimeType);&#x2F;&#x2F;List&lt;String&gt;</span><br></pre></td></tr></table></figure><h4 id="3-布尔"><a href="#3-布尔" class="headerlink" title="3.布尔"></a>3.布尔</h4><p>dart中定义布尔类型，使用bool</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bool success &#x3D; true;</span><br><span class="line">bool failure &#x3D; false;</span><br><span class="line">print(success || failure);</span><br><span class="line">print(success &amp;&amp; failure);</span><br></pre></td></tr></table></figure><h4 id="4-List集合"><a href="#4-List集合" class="headerlink" title="4.List集合"></a>4.List集合</h4><p>在Dart中，list和数组是一个概念</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">创建list：var list &#x3D; [1,2,3]</span><br><span class="line"></span><br><span class="line">创建不可变lsit: var list &#x3D; const[1,2,3]</span><br><span class="line"></span><br><span class="line">构造创建：var list &#x3D; new List()</span><br></pre></td></tr></table></figure><p>使用List定义集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List list &#x3D; [1,2,3,&quot;哈哈&quot;];&#x2F;&#x2F;不限制泛型，泛型就是dynamic</span><br><span class="line">print(list);</span><br><span class="line">List&lt;int&gt; list2 &#x3D; [1,3,5,7,9];&#x2F;&#x2F;限制泛型</span><br><span class="line">print(list2);</span><br></pre></td></tr></table></figure><p>注意：泛型不同，最好不要赋值，编译会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list &#x3D; list2;&#x2F;&#x2F;编译正常，int是dynamic的子类型</span><br><span class="line">list2 &#x3D; list;&#x2F;&#x2F;编译错误，type &#39;List&lt;dynamic&gt;&#39; is not a subtype of type &#39;List&lt;int&gt;&#39;</span><br></pre></td></tr></table></figure><p>集合的另一种生成方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List list4 &#x3D; List.generate(3, (index) &#x3D;&gt; index * 2);</span><br><span class="line">print(list4);&#x2F;&#x2F;[0, 2, 4]</span><br></pre></td></tr></table></figure><p><strong>常用操作：</strong></p><p>length:获取长度</p><p>remove(),clear()</p><p>indexof(),lastIndexOf()</p><p>sort():排序 sublist()</p><p>shuffle():打乱 asMap():转成map forEach()</p><p><strong>添加：add(),addAll()，insert()</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List list3 &#x3D; [];</span><br><span class="line">list3.add(&quot;hello&quot;);</span><br><span class="line">list3.add(&quot;world&quot;);</span><br><span class="line">list3.addAll(list);</span><br></pre></td></tr></table></figure><p><strong>集合遍历：</strong></p><p>方式一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (var value in list4) &#123;</span><br><span class="line">  print(&quot;$value&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list4.forEach((value)&#123;</span><br><span class="line">  print(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>方式三：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for(int i&#x3D;0; i&lt;list4.length;i++)&#123;</span><br><span class="line">  int a &#x3D; list4[i];</span><br><span class="line">  print(&quot;$a&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-Map集合"><a href="#5-Map集合" class="headerlink" title="5.Map集合"></a>5.Map集合</h4><p>创建map:var language = {‘first’:’Dart’,’sencond’:’Java’};</p><p>创建不可变Map：var language2 = const{‘first’:’Dart’,’sencond’:’kotlin’};</p><p>构造创建：var language3 = new Map();</p><p>定义map:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map map1 &#x3D; &#123;&quot;1&quot;:&quot;小明&quot;,&quot;2&quot;:&quot;小王&quot;&#125;;</span><br></pre></td></tr></table></figure><p>遍历map</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map1.forEach((k,v)&#123;</span><br><span class="line">  print(&quot;$k -- $v&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>常用操作：</strong></p><ul><li>[] ,length</li><li>isEmpty(), isNotEmpty()</li><li>keys() , values()</li><li>containsKey(),containsValue()</li><li>remove()</li><li>forEach()</li></ul><h4 id="6-dynamic-var-Object"><a href="#6-dynamic-var-Object" class="headerlink" title="6.dynamic,var,Object"></a>6.dynamic,var,Object</h4><p>Daynamic:动态数据类型，<em>编译时不会揣测数据类型，但是运行时会推断</em></p><p><em>是这样的坏处就是会让dart的语法检查失效，所以有可能会造成混乱而不报错</em></p><p><em>所以不要直接使用dynamic</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dynamic x &#x3D; &quot;xxx&quot;;</span><br><span class="line">print(x);&#x2F;&#x2F;xxx</span><br><span class="line">print(x.runtimeType);&#x2F;&#x2F;String</span><br><span class="line"></span><br><span class="line">x &#x3D; 1;</span><br><span class="line">print(x);&#x2F;&#x2F;1</span><br><span class="line">print(x.runtimeType);&#x2F;&#x2F;int</span><br></pre></td></tr></table></figure><p>var：自动推断数据类型，一旦定义，不可修改数据类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var s &#x3D; &quot;hello&quot;;</span><br><span class="line">s &#x3D; 1;&#x2F;&#x2F;编译错误，不能再次修改数据类型</span><br></pre></td></tr></table></figure><p>Object:所有dart对象的基类</p><p>区别在于：dynamic 不检查语法，如：调用不存在的方法也不会报错，运行时才报错，</p><p>Object 在编译时就会校验，如：调用不存在的方法，无法通过编译检测</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void main()&#123;</span><br><span class="line">&#x2F;&#x2F;  var a;&#x2F;&#x2F;无法推断出数据类型，那么类型就是dynamic，所以才能修改数据类型</span><br><span class="line">&#x2F;&#x2F;  a &#x3D; 10;</span><br><span class="line">&#x2F;&#x2F;  a &#x3D; &quot;hello&quot;;</span><br><span class="line"></span><br><span class="line">  var a &#x3D; 10;</span><br><span class="line">&#x2F;&#x2F;  a &#x3D; &quot;hello&quot;;&#x2F;&#x2F;报错，一开始自动推断出数据类型int，不能修改数据类型</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2.运算符"></a>2.运算符</h3><p>算术运算符</p><ul><li>加减乘除: + , - , * , / , ~/ , %</li><li>递增递减：++ , – , </li></ul><p>关系运算符</p><ul><li>== , != , &gt; , &lt; , &gt;= ,&lt;=</li></ul><p>注意：==是用于判断内容是否相等</p><p>逻辑运算符：</p><ul><li>! , &amp;&amp; ,|| </li></ul><p>赋值运算符：</p><ul><li>+= , -= , *= , /= , ~/=</li><li>??= 如果没有赋值，则赋值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a;</span><br><span class="line">a ??&#x3D; &quot;hello&quot;;</span><br><span class="line">print(&quot;a &#x3D; $a&quot;); &#x2F;&#x2F;a &#x3D; hello</span><br></pre></td></tr></table></figure><p>条件运算符</p><ul><li>三目运算符：同Java</li><li>表达式1 ?? 表达式2  ：表达式1没有值则使用表达式2的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int gender &#x3D; 1;</span><br><span class="line">String str &#x3D; gender &#x3D;&#x3D; 1 ? &quot;male&quot; : &quot;female&quot;;</span><br></pre></td></tr></table></figure><h3 id="3-语句"><a href="#3-语句" class="headerlink" title="3.语句"></a>3.语句</h3><p>条件语句：</p><ul><li>If</li><li>If else</li><li>If else if</li></ul><p>循环语句：</p><ul><li>for</li><li>while  do  while,break continue</li></ul><p>switch语句同Java</p><h3 id="4-方法"><a href="#4-方法" class="headerlink" title="4.方法"></a>4.方法</h3><ul><li><p>方法也是对象，类型是Function</p><ul><li><p>方法可以作为对象赋值给其他变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F;方法可以作为参数赋值给其他变量</span><br><span class="line">printHello()&#123;</span><br><span class="line">  print(&quot;hello&quot;);</span><br><span class="line">&#125;</span><br><span class="line">var func &#x3D; printHello;</span><br><span class="line">func();&#x2F;&#x2F;hello</span><br></pre></td></tr></table></figure></li><li><p>方法可作为参数传递给其他方法</p></li></ul></li><li><p>箭头语法： =&gt;expr  是{return expr;}的缩写</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var str &#x3D; printPerson(&quot;Jack&quot;, 18);</span><br><span class="line">print(str);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F;定义方法，返回值类型可以省略，方法参数类型可以省略</span><br><span class="line">printPerson(name,age) &#x3D;&gt; &quot;$name and $age&quot;;</span><br></pre></td></tr></table></figure><ul><li>方法参数，可选参数可以使用{}，并且可选参数必须放在最后边</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F;定义方法，两个参数都是可选参数</span><br><span class="line">printPerson2(&#123;String name,int age&#125;)&#123;</span><br><span class="line">  print(&quot;name &#x3D; $name, age &#x3D; $age&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;&#x2F;调用方法</span><br><span class="line">printPerson2();&#x2F;&#x2F;name &#x3D; null, age &#x3D; null</span><br><span class="line">printPerson2(name: &quot;lucy&quot;,age:18 );&#x2F;&#x2F;name &#x3D; lucy, age &#x3D; 18</span><br></pre></td></tr></table></figure><ul><li>可选参数默认值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F;默认参数</span><br><span class="line">printPerson3(&#123;String name &#x3D; &quot;Jack&quot;,int age &#x3D; 100&#125;)&#123;</span><br><span class="line">  print(&quot;name &#x3D; $name, age &#x3D; $age&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>闭包</p><ul><li>闭包是一个方法</li><li>闭包是定义在 其他方法内部的方法</li><li>闭包会持有外部方法的局部变量（这个概念不太好理解）</li></ul><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><h4 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h4><ul><li>使用关键字class声明一个类</li><li>使用关键字new创建一个对象，new可省略</li><li>所有对象都继承Object</li></ul><h5 id="1-属性和方法"><a href="#1-属性和方法" class="headerlink" title="1.属性和方法"></a>1.属性和方法</h5><ul><li>属性默认会生成getter和setter方法</li><li>使用final声明的属性只有getter方法</li><li>方法不能重载，如：work()  work(int n) 这样两个方法会报错</li></ul><h5 id="2-类和成员的可见性："><a href="#2-类和成员的可见性：" class="headerlink" title="2.类和成员的可见性："></a>2.类和成员的可见性：</h5><ul><li>使用_的类和类成员是私有的，不能被外部访问</li></ul><h5 id="3-计算属性："><a href="#3-计算属性：" class="headerlink" title="3.计算属性："></a><strong>3.计算属性</strong>：</h5><p>概念：计算属性的值是通过计算得来的，而不是本身存储的，举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Rectangle &#123;</span><br><span class="line">  &#x2F;&#x2F;&#x2F;定义两个属性</span><br><span class="line">  num width, height;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;&#x2F;定义计算属性，它的值是长和宽的乘积</span><br><span class="line">  num get area &#123;</span><br><span class="line">    return width * height;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;&#x2F;简写形式</span><br><span class="line">  num get area2 &#x3D;&gt; width * height;&#x2F;&#x2F;num返回值 get表示是getter are2属性名</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main() &#123;</span><br><span class="line">  var rect &#x3D; new Rectangle();</span><br><span class="line">  rect.width &#x3D; 20;</span><br><span class="line">  rect.height &#x3D; 10;</span><br><span class="line">  print(rect.area);&#x2F;&#x2F;200</span><br><span class="line">  print(rect.area2);&#x2F;&#x2F;200</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-构造方法："><a href="#4-构造方法：" class="headerlink" title="4.构造方法："></a><strong>4.构造方法</strong>：</h5><ul><li>如果没有定义构造方法，则会有一个默认的构造方法</li><li>如果定义了构造方法，则默认构造方法无效</li><li>构造方法不能重载</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">  String name;</span><br><span class="line">  int age;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;&#x2F;类似Java的写法</span><br><span class="line">&#x2F;&#x2F;  Person(String name,int age)&#123;</span><br><span class="line">&#x2F;&#x2F;    this.name &#x3D; name;</span><br><span class="line">&#x2F;&#x2F;    this.age &#x3D; age;</span><br><span class="line">&#x2F;&#x2F;  &#125;</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F;&#x2F;dart中提供的简化写法，方法体可以省略</span><br><span class="line">  Person(this.name, this.age)&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>疑问：构造方法不能重载，那么如何实现多个构造方法呢？这里可以使用命名构造方法</p><h5 id="5-命名构造方法：使用类名-方法的形式实现"><a href="#5-命名构造方法：使用类名-方法的形式实现" class="headerlink" title="5.命名构造方法：使用类名.方法的形式实现"></a><strong>5.命名构造方法</strong>：使用类名.方法的形式实现</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">  String name;</span><br><span class="line">  int age;</span><br><span class="line">  &#x2F;&#x2F;第一个构造方法</span><br><span class="line">Person(this.name, this.age);</span><br><span class="line">  &#x2F;&#x2F;&#x2F;命名构造方法</span><br><span class="line">  Person.withName(this.name);</span><br><span class="line"></span><br><span class="line">  work()&#123;</span><br><span class="line">    print(&quot;$name is working&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var p &#x3D; new Person.withName(&quot;lucy&quot;);</span><br><span class="line">p.work();&#x2F;&#x2F;lucy is working</span><br></pre></td></tr></table></figure><h5 id="6-常量构造方法："><a href="#6-常量构造方法：" class="headerlink" title="6.常量构造方法："></a><strong>6.常量构造方法</strong>：</h5><ul><li>如果一个类是不可变状态，可以把对象定义为编译时常量</li><li>使用const声明构造方法，并且把所有变量都定义为final</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">  &#x2F;&#x2F;&#x2F;使用final修饰</span><br><span class="line">  final String name;</span><br><span class="line">  final String age;</span><br><span class="line">  &#x2F;&#x2F;&#x2F;构造方法使用const</span><br><span class="line">  const Person(this.name, this.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main()&#123;</span><br><span class="line">  const p &#x3D; const Person(&quot;toM&quot;, &quot;18&quot;);&#x2F;&#x2F;const Person()的const可以省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-工厂构造方法："><a href="#7-工厂构造方法：" class="headerlink" title="7.工厂构造方法："></a>7.工厂构造方法：</h5><ul><li>工厂构造方法类似于设计模式中的工厂模式</li><li>在构造方法前添加关键字<strong>factory</strong>实现一个工厂构造方法</li><li>在工厂构造方法中可以返回对象</li></ul><h5 id="8-初始化列表"><a href="#8-初始化列表" class="headerlink" title="8.初始化列表"></a>8.初始化列表</h5><ul><li>初始化列表会在构造方法体执行之前执行</li><li>使用逗号分隔初始化表达式</li><li>初始化列表常用于设置final变量的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person.withName(this.name) : gender &#x3D; &quot;male&quot;;</span><br></pre></td></tr></table></figure><h5 id="9-静态成员"><a href="#9-静态成员" class="headerlink" title="9.静态成员"></a>9.静态成员</h5><ul><li>使用static关键字来实现类级别的常量和函数</li><li>静态成员不能访问非静态成员，非静态成员可以访问静态成员</li><li>类级别的常量需要使用static const声明</li></ul><h5 id="10-对象操作符："><a href="#10-对象操作符：" class="headerlink" title="10.对象操作符："></a>10.对象操作符：</h5><ul><li><h5 id="条件成员访问："><a href="#条件成员访问：" class="headerlink" title="条件成员访问： ?."></a>条件成员访问： ?.</h5><p> 这个感觉类似kotlin中的?.  可以防止空指针报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person p;</span><br><span class="line">&#x2F;&#x2F;  p.work();&#x2F;&#x2F;The method &#39;work&#39; was called on null.</span><br><span class="line">  p?.work();</span><br></pre></td></tr></table></figure></li><li><p>类型转换：as</p></li><li><p>是否是指定类型：is  和 !is，并且if判断后，类型会自动转换</p></li><li><p>级联操作：.. 类似于链式编程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F;普通赋值</span><br><span class="line">&#x2F;&#x2F;  p.name &#x3D; &quot;lucy&quot;;</span><br><span class="line">&#x2F;&#x2F;  p.age &#x3D; 18;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;&#x2F;级联操作</span><br><span class="line">  p..name &#x3D; &quot;lucy&quot;</span><br><span class="line">   ..age &#x3D; 18;</span><br></pre></td></tr></table></figure></li><li><p>对象call方法：如果一个类实现了call方法，则该类的对象可以作为方法使用</p></li></ul><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><h5 id="基础知识："><a href="#基础知识：" class="headerlink" title="基础知识："></a>基础知识：</h5><ul><li>使用关键字extends继承一个类</li><li>子类会继承父类可见的属性和方法</li><li>子类能够重写父类的方法，getter,setter</li><li>单继承，多态</li></ul><p>抽象类</p><p>基础知识：</p><ul><li>抽象类使用abstract关键字修饰</li><li>抽象方法不需要用abstract修饰</li></ul><h4 id="接口："><a href="#接口：" class="headerlink" title="接口："></a>接口：</h4><h5 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h5><ul><li>在Dart中，类就是接口</li><li>实现接口使用关键字：<strong>implements</strong></li><li>建议使用抽象类来作为接口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F;定义了一个接口类</span><br><span class="line">abstract class FlyAble&#123;</span><br><span class="line">&#x2F;&#x2F;&#x2F;包含一个抽象方法fly</span><br><span class="line">    void fly()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F;鸟实现飞的接口，可以飞</span><br><span class="line">class Bird implements FlyAble&#123;</span><br><span class="line">  @override</span><br><span class="line">  void fly() &#123;</span><br><span class="line">    print(&quot;鸟可以飞&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;&#x2F;鸟人实现飞的接口，可以飞</span><br><span class="line">class FlyMan implements FlyAble&#123;</span><br><span class="line">  @override</span><br><span class="line">  void fly() &#123;</span><br><span class="line">    print(&quot;鸟人可以飞&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main()&#123;</span><br><span class="line">  var p1 &#x3D; Bird();</span><br><span class="line">  p1.fly();</span><br><span class="line"></span><br><span class="line">  var p2 &#x3D; FlyMan();</span><br><span class="line">  p2.fly();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mixins"><a href="#Mixins" class="headerlink" title="Mixins:"></a>Mixins:</h4><h5 id="基础知识：-1"><a href="#基础知识：-1" class="headerlink" title="基础知识："></a>基础知识：</h5><ul><li><p>在dart中实现多继承的方式，使用with</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F;D继承A，同时也拥有C和B的方法</span><br><span class="line">class D extends A with C,B&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这里的B，C就称为Mixin类</p></li><li><p>Mixin类不能显示声明构造方法</p></li><li><p>作为Mixin的类，只能继承自Object</p></li></ul><h4 id="操作符："><a href="#操作符：" class="headerlink" title="操作符："></a>操作符：</h4><h5 id="基础知识：-2"><a href="#基础知识：-2" class="headerlink" title="基础知识："></a>基础知识：</h5><ul><li><p>可以自定义一些操作符，举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">  int age;</span><br><span class="line"></span><br><span class="line">  Person(this.age);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;&#x2F;操作符重载</span><br><span class="line">  bool operator &gt;(Person p) &#123;</span><br><span class="line">    return this.age &gt; p.age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var p1 &#x3D; Person(21);</span><br><span class="line">var p2 &#x3D; Person(20);</span><br><span class="line">print(p1 &gt; p2);&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4></li></ul><p>基础知识：</p><ul><li>枚举使用enum定义</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum Season&#123;</span><br><span class="line">  spring,</span><br><span class="line">  summer,</span><br><span class="line">  autumn,</span><br><span class="line">  winter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>dart枚举有一个属性：index,从0开始</li><li>dart中枚举比较简单，不能定义方法</li></ul><h4 id="泛型："><a href="#泛型：" class="headerlink" title="泛型："></a>泛型：</h4><p>和Java中泛型差不多的用法</p><p>编程技巧：</p><ul><li>使用?.避免空指针</li><li>使用??设置默认值 如： a = str??”暂无值”</li></ul><h1 id="第三章-Flutter快速入门"><a href="#第三章-Flutter快速入门" class="headerlink" title="第三章 Flutter快速入门"></a>第三章 Flutter快速入门</h1><h2 id="3-1-快速入门"><a href="#3-1-快速入门" class="headerlink" title="3.1 快速入门"></a>3.1 快速入门</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F;使用import 类似Java中的导包</span><br><span class="line">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class="line">&#x2F;&#x2F;&#x2F;程序的主入口main函数，执行了runApp()方法</span><br><span class="line">void main() &#x3D;&gt; runApp(App());</span><br><span class="line">&#x2F;&#x2F;&#x2F;StatelessWidget：无状态的组件</span><br><span class="line">&#x2F;&#x2F;&#x2F;App是我们程序入口的第一个组件，在build方法中，返回了一个MaterialApp（材料设计）的组件</span><br><span class="line">class App extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      &#x2F;&#x2F;&#x2F;theme:页面的主题</span><br><span class="line">      &#x2F;&#x2F;&#x2F;ThemeData.dark ThemeData.light</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        &#x2F;&#x2F;&#x2F;primarySwatch主色版，即设置标题栏颜色</span><br><span class="line">        primarySwatch: Colors.yellow</span><br><span class="line">      ),</span><br><span class="line">      home: Scaffold(&#x2F;&#x2F;&#x2F;Scaffold 脚手架，包含了appBar,底部导航，侧面抽屉栏等</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(&#39;Ivan&#39;),</span><br><span class="line">          elevation: 0,&#x2F;&#x2F;设置顶部阴影</span><br><span class="line">        ),</span><br><span class="line">        body: Hello(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F;这里是我们自定义的一个小组件</span><br><span class="line">&#x2F;&#x2F;&#x2F;在屏幕中央输出一段话：Hello World</span><br><span class="line">class Hello extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Center(</span><br><span class="line">      child: Text(&#39;Hello World&#39;,</span><br><span class="line">        style: TextStyle(</span><br><span class="line">          fontSize: 40,</span><br><span class="line">          fontWeight: FontWeight.bold,</span><br><span class="line">          color: Colors.black87</span><br><span class="line">      ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再来快速实现一个列表，首先准备数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">class Post&#123;</span><br><span class="line">  final String title;</span><br><span class="line">  final String author;</span><br><span class="line">  final String imageUrl;</span><br><span class="line"></span><br><span class="line">  const Post(&#123;</span><br><span class="line">    this.title,</span><br><span class="line">    this.author,</span><br><span class="line">    this.imageUrl</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">final List&lt;Post&gt; posts &#x3D; [</span><br><span class="line">  Post(</span><br><span class="line">    title: &#39;Candy Shop&#39;,</span><br><span class="line">    author: &#39;Mohamed Chahin&#39;,</span><br><span class="line">    imageUrl: &#39;https:&#x2F;&#x2F;resources.ninghao.org&#x2F;images&#x2F;candy-shop.jpg&#39;,</span><br><span class="line">  ),</span><br><span class="line">  Post(</span><br><span class="line">    title: &#39;Childhood in a picture&#39;,</span><br><span class="line">    author: &#39;Mohamed Chahin&#39;,</span><br><span class="line">    imageUrl: &#39;https:&#x2F;&#x2F;resources.ninghao.org&#x2F;images&#x2F;childhood-in-a-picture.jpg&#39;,</span><br><span class="line">  ),</span><br><span class="line">  Post(</span><br><span class="line">    title: &#39;Contained&#39;,</span><br><span class="line">    author: &#39;Mohamed Chahin&#39;,</span><br><span class="line">    imageUrl: &#39;https:&#x2F;&#x2F;resources.ninghao.org&#x2F;images&#x2F;contained.jpg&#39;,</span><br><span class="line">  ),</span><br><span class="line">  Post(</span><br><span class="line">    title: &#39;Dragon&#39;,</span><br><span class="line">    author: &#39;Mohamed Chahin&#39;,</span><br><span class="line">    imageUrl: &#39;https:&#x2F;&#x2F;resources.ninghao.org&#x2F;images&#x2F;dragon.jpg&#39;,</span><br><span class="line">  ),</span><br><span class="line">  Post(</span><br><span class="line">    title: &#39;Free Hugs&#39;,</span><br><span class="line">    author: &#39;Mohamed Chahin&#39;,</span><br><span class="line">    imageUrl: &#39;https:&#x2F;&#x2F;resources.ninghao.org&#x2F;images&#x2F;free_hugs.jpg&#39;,</span><br><span class="line">  ),</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>然后编写列表界面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import &#39;package:flutterdart&#x2F;ninghao&#x2F;model&#x2F;Post.dart&#39;;</span><br><span class="line">import &#39;package:flutter&#x2F;material.dart&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F;ListView的使用</span><br><span class="line">&#x2F;&#x2F;&#x2F;使用ListView.builder来生成每一项</span><br><span class="line">&#x2F;&#x2F;&#x2F;标题使用的属性：Theme.of(context).textTheme.title</span><br><span class="line">&#x2F;&#x2F;&#x2F;作者使用的属性：Theme.of(context).textTheme.subhead</span><br><span class="line">class Home extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Scaffold(</span><br><span class="line">      backgroundColor: Colors.grey[100],</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(&quot;ListView的使用&quot;),</span><br><span class="line">      ),</span><br><span class="line">      body: ListView.builder(itemBuilder: _itemBuilder,</span><br><span class="line">      itemCount: posts.length,),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F;&#x2F;生成每一个item</span><br><span class="line">  Widget _itemBuilder(BuildContext context,int index)&#123;</span><br><span class="line">    return Container(</span><br><span class="line">      color: Colors.white,</span><br><span class="line">      margin: EdgeInsets.all(8.0),</span><br><span class="line">      child: Column(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Image.network(posts[index].imageUrl),</span><br><span class="line">          SizedBox(height: 16.0,),</span><br><span class="line">          Text(posts[index].title,&#x2F;&#x2F;标题</span><br><span class="line">          style: Theme.of(context).textTheme.title,),</span><br><span class="line">          Text(posts[index].author,&#x2F;&#x2F;作者</span><br><span class="line">            style: Theme.of(context).textTheme.subhead,),</span><br><span class="line">          SizedBox(height: 16,)</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-路由"><a href="#3-2-路由" class="headerlink" title="3.2 路由"></a>3.2 路由</h2><p><strong>跳转页面：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;跳转页面</span><br><span class="line">Navigator.of(context).push(MaterialPageRoute(</span><br><span class="line">    builder: (BuildContext context) &#x3D;&gt; Page(&#39;About&#39;)));</span><br></pre></td></tr></table></figure><p><strong>返回上一页：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Navigator.pop(context);&#x2F;&#x2F;返回到上一页</span><br></pre></td></tr></table></figure><p><strong>带名字的路由：</strong></p><ul><li>第一步：定义路由</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;定义路由</span><br><span class="line">routes: &#123;</span><br><span class="line">  &#39;&#x2F;about&#39;: (context) &#x3D;&gt; Page(&#39;About&#39;),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>第二步：路由跳转</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Navigator.pushNamed(context, &#39;&#x2F;about&#39;);</span><br></pre></td></tr></table></figure><p>设置初始路由：initialRoute，注意和home不能同时出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;      home: NavigatorDemo(),</span><br><span class="line">      initialRoute: &#39;&#x2F;&#39;,</span><br><span class="line">      &#x2F;&#x2F;定义路由</span><br><span class="line">      routes: &#123;</span><br><span class="line">        &#39;&#x2F;&#39;: (context) &#x3D;&gt; NavigatorDemo(), &#x2F;&#x2F;根路由</span><br><span class="line">        &#39;&#x2F;about&#39;: (context) &#x3D;&gt; Page(&#39;About&#39;),</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><h2 id="3-3-输入"><a href="#3-3-输入" class="headerlink" title="3.3 输入"></a>3.3 输入</h2><p>TextField</p><p>一：<strong>属性样式</strong></p><p>二：<strong>监听事件</strong></p><p>三：获取表单数据</p><ul><li><p>定义变量，并在触发保存的时候，存储数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String username, password;</span><br><span class="line"></span><br><span class="line">TextFormField(</span><br><span class="line">  decoration: InputDecoration(labelText: &#39;Password&#39;),</span><br><span class="line">  onSaved: (value)&#x3D;&gt; password &#x3D; value,&#x2F;&#x2F;存储数据</span><br><span class="line">),</span><br></pre></td></tr></table></figure></li><li><p>定义key，获取数据的时候，调用save()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;定义key</span><br><span class="line">final key &#x3D; GlobalKey&lt;FormState&gt;();</span><br><span class="line">&#x2F;&#x2F;key设置到表单上</span><br><span class="line">Form(</span><br><span class="line">  key: key,</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;保存</span><br><span class="line">key.currentState.save(); &#x2F;&#x2F;保存表单</span><br></pre></td></tr></table></figure><p>四：验证表单数据</p></li><li><p>给TextField添加验证器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">validator: validatorPassword,</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;验证数据，如果数据通过验证，返回null</span><br><span class="line">String validatorPassword(String value) &#123;</span><br><span class="line">    if(value.isEmpty)&#123;</span><br><span class="line">      return &quot;请填写密码&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>保存的时候，调用验证器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key.currentState.validate();&#x2F;&#x2F;验证表单数据</span><br></pre></td></tr></table></figure><p>自动验证：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">bool isAutoValidate &#x3D; false;</span><br><span class="line"></span><br><span class="line">TextFormField(</span><br><span class="line">  autovalidate: isAutoValidate,</span><br><span class="line">),</span><br><span class="line"></span><br><span class="line">void submitFromData() &#123;</span><br><span class="line">  &#x2F;&#x2F;验证表单数据</span><br><span class="line">  if (key.currentState.validate()) &#123;</span><br><span class="line">    debugPrint(&quot;username &#x3D; $username ,password &#x3D; $password&quot;);</span><br><span class="line">    key.currentState.save(); &#x2F;&#x2F;保存表单</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    setState(() &#x3D;&gt; isAutoValidate &#x3D; true);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第四章-基础控件"><a href="#第四章-基础控件" class="headerlink" title="第四章 基础控件"></a>第四章 基础控件</h1><h2 id="1-AppBar"><a href="#1-AppBar" class="headerlink" title="1.AppBar"></a>1.AppBar</h2><ul><li><p>Title：标题</p></li><li><p>Leading:标题前面的小部件，通常和抽屉栏关联,可以使用IconButton</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">leading: IconButton(icon: Icon(Icons.menu), onPressed: null),</span><br></pre></td></tr></table></figure></li><li><p>Actions:一个widget数组，在标题栏的右边，比如我们可以放一个搜索图标：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">actions: &lt;Widget&gt;[</span><br><span class="line">  IconButton(icon: Icon(Icons.search), onPressed: null)</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>通常使用iconButton,对于不常见的操作，使用PopupMenuButton</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">actions: &lt;Widget&gt;[</span><br><span class="line">  IconButton(icon: Icon(Icons.search), onPressed: () &#123;&#125;),</span><br><span class="line">  PopupMenuButton(</span><br><span class="line">    onSelected: (int value)&#123;</span><br><span class="line">      print(value);&#x2F;&#x2F;获取到选中的标识</span><br><span class="line">    &#125;,</span><br><span class="line">    itemBuilder: (BuildContext ctx) &#x3D;&gt; [</span><br><span class="line">      PopupMenuItem(child: Text(&#39;A&#39;),value: 1,), &#x2F;&#x2F;需要使用value来作为唯一标识</span><br><span class="line">      PopupMenuItem(child: Text(&#39;B&#39;),value: 2,),</span><br><span class="line">    ],</span><br><span class="line">    icon: Icon(Icons.more_horiz),</span><br><span class="line">  )</span><br><span class="line">],</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>bottom：标题栏的底部，一般可以放TabBar:类似于Android中的TabLayout，必须设置控制器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bottom: TabBar(tabs: [</span><br><span class="line">  Tab(icon: Icon(Icons.local_florist),),</span><br><span class="line">  Tab(icon: Icon(Icons.change_history),),</span><br><span class="line">  Tab(icon: Icon(Icons.directions_bike),)</span><br><span class="line">]),</span><br><span class="line">&#x2F;&#x2F;&#x2F;可以使用默认控制器：DefaultTabController，length必须和TabBar中的个数一致</span><br><span class="line">TabBarView:用于显示指定Tab的内容,这里我们展示到Scaffold的body里面</span><br><span class="line">body: TabBarView(children: [</span><br><span class="line">        Icon(Icons.local_florist,size: 128,color: Colors.black12,),</span><br><span class="line">        Icon(Icons.change_history,size: 128,color: Colors.black12,),</span><br><span class="line">        Icon(Icons.directions_bike,size: 128,color: Colors.black12,),</span><br><span class="line">      ]),</span><br></pre></td></tr></table></figure><h2 id="2-TabBar"><a href="#2-TabBar" class="headerlink" title="2.TabBar"></a>2.TabBar</h2></li><li><p>unselectedLabelColor：未选中时候标签颜色</p></li><li><p>indicatorColor：指示器的颜色</p></li><li><p>indicatorSize：指示器的样式，有两种选择：tab,label</p></li><li><p>indicatorWeight：指示器的高度</p></li></ul><h2 id="3-theme-主题"><a href="#3-theme-主题" class="headerlink" title="3.theme:主题"></a>3.theme:主题</h2><p>themeData：</p><ul><li>primarySwatch标题栏的颜色</li><li>highlightColor按钮点击时候的高亮颜色</li><li>splashColor：水波纹颜色</li></ul><p>3.drawer:属于Scaffold里面的标签</p><blockquote><p>左部抽屉使用drawer,右边则使用endDrawer</p></blockquote><h2 id="4-Drawer"><a href="#4-Drawer" class="headerlink" title="4.Drawer:"></a>4.Drawer:</h2><p>一般使用listview来排版布局，</p><p>顶部可以使用DrawerHeader,下边使用ListTitle来布局</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">drawer: Drawer(</span><br><span class="line">  child: ListView(</span><br><span class="line">    padding: EdgeInsets.zero,&#x2F;&#x2F;这里必须设置，顶部padding才为零，看起来正常</span><br><span class="line">    children: &lt;Widget&gt;[</span><br><span class="line">      DrawerHeader(</span><br><span class="line">        child: Text(&quot;header&quot;.toUpperCase()),</span><br><span class="line">        decoration: BoxDecoration(color: Colors.grey[100]),</span><br><span class="line">      ),</span><br><span class="line">      ListTile(</span><br><span class="line">        title: Text(&quot;Message&quot;,textAlign: TextAlign.center,),</span><br><span class="line">        trailing: Icon(Icons.message),</span><br><span class="line">      ),</span><br><span class="line">      ListTile(</span><br><span class="line">        title: Text(&quot;Favourite&quot;,textAlign: TextAlign.center,),</span><br><span class="line">        trailing: Icon(Icons.favorite),</span><br><span class="line">      ),</span><br><span class="line">      ListTile(</span><br><span class="line">        title: Text(&quot;Settings&quot;,textAlign: TextAlign.center,),</span><br><span class="line">        trailing: Icon(Icons.settings),</span><br><span class="line">      )</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>抽屉的关闭：onTap: () =&gt; Navigator.pop(context),</p><p>使用系统提供的一个header：<strong>UserAccountsDrawerHeader</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">UserAccountsDrawerHeader(</span><br><span class="line">                  accountName: Text(&quot;Ivan&quot;),</span><br><span class="line">                  accountEmail: Text(&quot;loabc24@163.com&quot;),</span><br><span class="line">                  currentAccountPicture: CircleAvatar(</span><br><span class="line">                    backgroundImage: NetworkImage(</span><br><span class="line">                        &quot;https:&#x2F;&#x2F;thirdqq.qlogo.cn&#x2F;g?b&#x3D;sdk&amp;k&#x3D;dcdm22zvv9c7pLsOp0LFFw&amp;s&#x3D;100&amp;t&#x3D;1556967668&quot;),</span><br><span class="line">                  ),</span><br><span class="line">                  decoration: BoxDecoration(</span><br><span class="line">                      color: Colors.yellow[400],</span><br><span class="line">                      image: DecorationImage(</span><br><span class="line">                        fit: BoxFit.cover,</span><br><span class="line">                          image: NetworkImage(</span><br><span class="line">                              &quot;https:&#x2F;&#x2F;resources.ninghao.org&#x2F;images&#x2F;childhood-in-a-picture.jpg&quot;))),</span><br><span class="line">                ),</span><br></pre></td></tr></table></figure><p>这里使用到了BoxDecoration</p><p>BoxDecoration:一个背景装饰对象，相当于Android中的shape.xml，定制各种各样的背景（边框、圆角、阴影、形状、渐变、背景图像）</p><h2 id="5-基础控件："><a href="#5-基础控件：" class="headerlink" title="5.基础控件："></a>5.基础控件：</h2><h3 id="1-Text"><a href="#1-Text" class="headerlink" title="1.Text"></a>1.Text</h3><ul><li>textAlign 对齐方式，如：textAlign: TextAlign.center,</li><li>style 设置样式，属性比较多，就不细说，举例：TextStyle(fontSize: 16);</li><li>maxLines 最大行数</li><li>overflow: 超过最大行数如何处理：举例：overflow: TextOverflow.ellipsis(省略号)</li></ul><p><strong>RichText:富文本</strong></p><p>RichText可以设置多种样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">RichText(text: TextSpan(</span><br><span class="line">  text: &quot;我爱中国&quot;,</span><br><span class="line">  style: TextStyle(</span><br><span class="line">    color: Colors.deepPurpleAccent,</span><br><span class="line">    fontSize: 34,</span><br><span class="line">    fontStyle: FontStyle.italic,</span><br><span class="line">    fontWeight: FontWeight.w100</span><br><span class="line">  ),</span><br><span class="line">  children: [</span><br><span class="line">    TextSpan(</span><br><span class="line">      text: &#39;I love China&#39;,</span><br><span class="line">      style: TextStyle(</span><br><span class="line">        fontSize: 26,</span><br><span class="line">        color: Colors.redAccent</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">  ]</span><br><span class="line">));</span><br></pre></td></tr></table></figure><p>RichText的children定义子类，默认继承父类的样式，在子类中再定义自己的样式，这样就能在一行里组合成富文本</p><h3 id="2-Container"><a href="#2-Container" class="headerlink" title="2.Container"></a>2.Container</h3><p>属性：</p><ul><li>Child 内容</li><li>Color:背景色</li><li>Padding:内边距</li><li>Margin:外边距</li><li>Width:宽度 height:高度</li><li>Decoration:装饰，如可以使用boxdecoration，如果Decoration加了背景色，color属性就要去掉</li></ul><h3 id="3-Row-行"><a href="#3-Row-行" class="headerlink" title="3.Row 行"></a>3.Row 行</h3><p>属性：</p><ul><li>mainAxisAlignment：主轴对齐方式 如：mainAxisAlignment: MainAxisAlignment.center,<ul><li>行的主轴可以理解为水平线</li></ul></li><li>crossAxisAlignment：交叉轴，和主轴对称</li></ul><h3 id="4-BoxDecoration：盒子装饰"><a href="#4-BoxDecoration：盒子装饰" class="headerlink" title="4.BoxDecoration：盒子装饰"></a>4.BoxDecoration：盒子装饰</h3><ul><li><p>color 颜色</p></li><li><p>shape: 盒子的形状，如：BoxShape.circle，如果是原型，则不能再使用borderRadius</p></li><li><p>gradient:渐变，可设置两种渐变</p><ul><li>RadialGradient</li><li>LinearGradient:线性渐变</li></ul></li><li><p>Image:设置盒子的背景图片</p></li><li><p>Border:边框 使用Border这个widget，可设置上下左右的边框，边框使用BorderSide</p><blockquote><p>Tip:可以使用Border.all一次性设置四条边框</p></blockquote></li><li><p>borderRadius: 设置圆角</p><ul><li>同时设置4个圆角：BorderRadius.circular(8),</li><li>分别设置圆角：borderRadius: BorderRadius.only()</li></ul></li><li><p>boxShadow:盒子阴影</p><ul><li>offset：偏移量</li><li>color：阴影颜色</li><li>blurRadius：阴影半径</li><li>spreadRadius：阴影扩散半径</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">boxShadow: [</span><br><span class="line">  BoxShadow(</span><br><span class="line">    offset: Offset(0, 6.0),&#x2F;&#x2F;阴影偏移量</span><br><span class="line">    color: Color.fromRGBO(3, 54, 255, 1.0),&#x2F;&#x2F;阴影颜色</span><br><span class="line">    blurRadius: 8.0,&#x2F;&#x2F;阴影半径</span><br><span class="line">    spreadRadius: 1.0&#x2F;&#x2F;扩散半径</span><br><span class="line">  )</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h3 id="5-SizedBox"><a href="#5-SizedBox" class="headerlink" title="5.SizedBox"></a>5.SizedBox</h3></li></ul><p>具有指定大小的盒子，指定大小后，可限制子widget,如果不指定，则自适应子控件</p><p>SizedBox.expand() :创建一个父类允许最大的盒子</p><h3 id="6-Alignment"><a href="#6-Alignment" class="headerlink" title="6.Alignment"></a>6.Alignment</h3><p>矩形内的一个点，Alignment(x,y)，其中x,y的取值范围是-1.0 - 1.0 ，表示矩形的一端到另一端</p><ul><li>Alignment(0.0, 0.0)代表举行的中心</li><li>Alignment(-1.0, -1.0)表示左上角</li><li>Alignment(1.0, 1.0)：表示右下角</li></ul><p>可以使用内置的一些属性，方便定位，如：Alignment.center,Alignment.topLeft</p><h3 id="7-stack"><a href="#7-stack" class="headerlink" title="7.stack"></a>7.stack</h3><p>类似于Android布局中的帧布局Framelayout</p><p>stack可以指定alignment属性</p><h3 id="8-Positioned"><a href="#8-Positioned" class="headerlink" title="8.Positioned"></a>8.Positioned</h3><p>控制[Stack]的子元素放置位置的小部件，举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F;在左上角（10，10）位置</span><br><span class="line">Positioned(</span><br><span class="line">  child: Icon(Icons.shopping_cart),</span><br><span class="line">  left: 10,</span><br><span class="line">  top: 10,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="9-AspectRatio"><a href="#9-AspectRatio" class="headerlink" title="9.AspectRatio"></a>9.AspectRatio</h3><p>一个小部件，可以限制子widget的宽高比，宽度由父控件决定，举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Container(</span><br><span class="line">  width: 100,&#x2F;&#x2F;宽度为100</span><br><span class="line">  child: AspectRatio(</span><br><span class="line">    aspectRatio: 16&#x2F;9, &#x2F;&#x2F;宽高比16：9</span><br><span class="line">    child: Container(</span><br><span class="line">      color: Colors.red,</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="10-ConstrainedBox"><a href="#10-ConstrainedBox" class="headerlink" title="10.ConstrainedBox"></a>10.ConstrainedBox</h3><p>一个小部件，可以限制子控件的最大宽高，最小宽高，举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ConstrainedBox(</span><br><span class="line">    child: Container(</span><br><span class="line">      color: Colors.red,</span><br><span class="line">    ),</span><br><span class="line">    constraints: BoxConstraints(</span><br><span class="line">      minHeight: 200,</span><br><span class="line">      maxWidth: 200,</span><br><span class="line">    ))</span><br></pre></td></tr></table></figure><h3 id="11-PageView"><a href="#11-PageView" class="headerlink" title="11.PageView"></a>11.PageView</h3><p>类似于安卓中的ViewPager</p><p>PageView.builder:按需构造页面</p><p>常用属性：</p><ul><li><p>scrollDirection：滑动方向</p><ul><li><p>Axis.horizontal 水平方向，默认是水平方向</p></li><li><p>Axis.vertical：垂直方向</p></li></ul></li><li><p>onPageChanged:滑动监听</p></li><li><p>viewportFraction:页面比例分数</p></li></ul><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PageView(</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    _pageView_item(Colors.brown[900],&#39;One&#39;),</span><br><span class="line">    _pageView_item(Colors.grey[900],&#39;Two&#39;),</span><br><span class="line">    _pageView_item(Colors.blueGrey[900],&#39;Three&#39;),</span><br><span class="line">  ],</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F;生成PageView的每一页</span><br><span class="line">  Widget _pageView_item(Color color,String text)&#123;</span><br><span class="line">    return Container(</span><br><span class="line">      color: color,</span><br><span class="line">      alignment: Alignment.center,</span><br><span class="line">      child: Text(text,style: TextStyle(fontSize: 32,color: Colors.white),),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="12-GridView"><a href="#12-GridView" class="headerlink" title="12.GridView"></a>12.GridView</h3><p>使用GridView.count来生成</p><ul><li>crossAxisSpacing：交叉轴间距</li><li>mainAxisSpacing：主轴间距</li><li>crossAxisCount:交叉轴上item的个数</li><li>scrollDirection:滚动方向</li></ul><h3 id="13-CustomScrollView"><a href="#13-CustomScrollView" class="headerlink" title="13.CustomScrollView"></a>13.CustomScrollView</h3><p>说明：类似于Android中的scrollview</p><p>参考：<a href="https://book.flutterchina.club/chapter6/custom_scrollview.html">https://book.flutterchina.club/chapter6/custom_scrollview.html</a></p><p>SliverAppBar 类似于安卓中的CollapsingToolbarLayout</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">const SliverAppBar(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    this.leading,&#x2F;&#x2F;左侧的图标或文字，多为返回箭头</span><br><span class="line">    this.automaticallyImplyLeading &#x3D; true,&#x2F;&#x2F;没有leading为true的时候，默认返回箭头，没有leading且为false，则显示title</span><br><span class="line">    this.title,&#x2F;&#x2F;标题</span><br><span class="line">    this.actions,&#x2F;&#x2F;标题右侧的操作</span><br><span class="line">    this.flexibleSpace,&#x2F;&#x2F;可以理解为SliverAppBar的背景内容区</span><br><span class="line">    this.bottom,&#x2F;&#x2F;SliverAppBar的底部区</span><br><span class="line">    this.elevation,&#x2F;&#x2F;阴影</span><br><span class="line">    this.forceElevated &#x3D; false,&#x2F;&#x2F;是否显示阴影</span><br><span class="line">    this.backgroundColor,&#x2F;&#x2F;背景颜色</span><br><span class="line">    this.brightness,&#x2F;&#x2F;状态栏主题，默认Brightness.dark，可选参数light</span><br><span class="line">    this.iconTheme,&#x2F;&#x2F;SliverAppBar图标主题</span><br><span class="line">    this.actionsIconTheme,&#x2F;&#x2F;action图标主题</span><br><span class="line">    this.textTheme,&#x2F;&#x2F;文字主题</span><br><span class="line">    this.primary &#x3D; true,&#x2F;&#x2F;是否显示在状态栏的下面,false就会占领状态栏的高度</span><br><span class="line">    this.centerTitle,&#x2F;&#x2F;标题是否居中显示</span><br><span class="line">    this.titleSpacing &#x3D; NavigationToolbar.kMiddleSpacing,&#x2F;&#x2F;标题横向间距</span><br><span class="line">    this.expandedHeight,&#x2F;&#x2F;合并的高度，默认是状态栏的高度加AppBar的高度</span><br><span class="line">    this.floating &#x3D; false,&#x2F;&#x2F;滑动时是否悬浮</span><br><span class="line">    this.pinned &#x3D; false,&#x2F;&#x2F;标题栏是否固定</span><br><span class="line">    this.snap &#x3D; false,&#x2F;&#x2F;配合floating使用</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="14-SingleChildScrollView"><a href="#14-SingleChildScrollView" class="headerlink" title="14.SingleChildScrollView"></a>14.SingleChildScrollView</h3><p> 类似于Android中的ScrollView，主要用于一屏展示不下，需要滑动展示，如果是很长的列表，则应该使用如ListView，因为可以延迟加载，SingleChildScrollView是直接加载所有内容</p><h3 id="15-OverflowBox"><a href="#15-OverflowBox" class="headerlink" title="15.OverflowBox"></a>15.OverflowBox</h3><h2 id="6-按钮"><a href="#6-按钮" class="headerlink" title="6.按钮"></a>6.按钮</h2><h3 id="1-FloatingActionButton"><a href="#1-FloatingActionButton" class="headerlink" title="1.FloatingActionButton"></a>1.FloatingActionButton</h3><p><strong>构建方式：</strong></p><ul><li><p>方式一：默认构造</p></li><li><p>方式二：使用FloatingActionButton.extended构造</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FloatingActionButton.extended(</span><br><span class="line">    onPressed: null, label: Text(&#39;add&#39;), icon: Icon(Icons.add));</span><br></pre></td></tr></table></figure><h3 id="2-FlatButton"><a href="#2-FlatButton" class="headerlink" title="2.FlatButton"></a>2.FlatButton</h3><p>构建方式</p><ul><li>方式一：默认构建</li><li>方式二：使用FlatButton.icon（）构建，可以添加一个小图标</li></ul><h3 id="3-RaisedButton"><a href="#3-RaisedButton" class="headerlink" title="3.RaisedButton"></a>3.RaisedButton</h3><p>和FlatButton的区别是，RaisedButton有一个背景和溅墨效果</p><p>构建方式同上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shape: StadiumBorder(),&#x2F;&#x2F;两端半圆矩形</span><br></pre></td></tr></table></figure><h3 id="4-OutlineButton"><a href="#4-OutlineButton" class="headerlink" title="4.OutlineButton"></a>4.OutlineButton</h3><p>描边按钮</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">OutlineButton(</span><br><span class="line">  onPressed: () &#123;&#125;,</span><br><span class="line">  child: Text(&#39;RaisedButton&#39;),</span><br><span class="line">  splashColor: Colors.grey,</span><br><span class="line">  borderSide: BorderSide(</span><br><span class="line">    color: Colors.black87,</span><br><span class="line">  ),</span><br><span class="line">  shape: StadiumBorder(),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><h3 id="5-Expanded"><a href="#5-Expanded" class="headerlink" title="5.Expanded"></a>5.Expanded</h3><p>展开，将剩余可用空间填满，如放在Row中，会填满可用空间，可设施flex，设置比例</p><h3 id="6-PopupMenuButton"><a href="#6-PopupMenuButton" class="headerlink" title="6.PopupMenuButton"></a>6.PopupMenuButton</h3><p>PopupMenuItem每个item项</p><p>弹出式按钮，每个item</p><p>onSelected：回调每个点击的选项，需要给每个item设置value </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">PopupMenuButton(</span><br><span class="line">  itemBuilder: (context) &#x3D;&gt; [</span><br><span class="line">    PopupMenuItem(</span><br><span class="line">      child: Text(&#39;Home&#39;),</span><br><span class="line">      value: &#39;Home&#39;,</span><br><span class="line">    ),</span><br><span class="line">    PopupMenuItem(</span><br><span class="line">      child: Text(&#39;Search&#39;),</span><br><span class="line">      value: &#39;Search&#39;,</span><br><span class="line">    ),</span><br><span class="line">    PopupMenuItem(</span><br><span class="line">      child: Text(&#39;me&#39;),</span><br><span class="line">      value: &#39;me&#39;,</span><br><span class="line">    )</span><br><span class="line">  ],</span><br><span class="line">  onSelected: (value) &#123;</span><br><span class="line">    setState(() &#x3D;&gt; text &#x3D; value);</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="7-checkbox"><a href="#7-checkbox" class="headerlink" title="7.checkbox"></a>7.checkbox</h3><p>常用属性：</p><ul><li><p>activeColor：选中时候的颜色</p></li><li><p>Value:当前是否选中，会在onChange()方法中回调出来，需要定义一个变量，去动态变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var _isCheckedA &#x3D; false;</span><br><span class="line"></span><br><span class="line">Checkbox(</span><br><span class="line">  activeColor: Colors.blue,</span><br><span class="line">  value: _isCheckedA,</span><br><span class="line">  onChanged: (value) &#123;</span><br><span class="line">  setState(() &#123;</span><br><span class="line">  _isCheckedA &#x3D; value;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="8-Radio"><a href="#8-Radio" class="headerlink" title="8.Radio"></a>8.Radio</h3></li></ul><p>单选框</p><p>属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const Radio(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  @required this.value,&#x2F;&#x2F;单选按钮表示的值</span><br><span class="line">  @required this.groupValue,&#x2F;&#x2F;一组单选按钮的当前选定值,如果和value相同，则表示选中</span><br><span class="line">  @required this.onChanged,&#x2F;&#x2F;变化回调</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var _groupValue &#x3D; 1;</span><br><span class="line"></span><br><span class="line">  void _handleValueChange(int value) &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _groupValue &#x3D; value;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">Radio(</span><br><span class="line">    value: 1,</span><br><span class="line">    groupValue: _groupValue,</span><br><span class="line">    onChanged: _handleValueChange),</span><br><span class="line">Radio(</span><br><span class="line">    value: 2,</span><br><span class="line">    groupValue: _groupValue,</span><br><span class="line">    onChanged: _handleValueChange),</span><br></pre></td></tr></table></figure><h3 id="9-RadioListTile"><a href="#9-RadioListTile" class="headerlink" title="9.RadioListTile"></a><strong>9.RadioListTile</strong></h3><p>类似于Radio，但是效果更多，可以设置标题，子标题，icon</p><h3 id="10-Switch"><a href="#10-Switch" class="headerlink" title="10.Switch"></a>10.Switch</h3><p>开关，使用比较简单</p><p>属性：</p><p>Value:布尔值</p><p>onChanged:</p><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var isSwitch &#x3D; false;</span><br><span class="line"></span><br><span class="line">Switch(</span><br><span class="line">  value: isSwitch,</span><br><span class="line">  onChanged: (value) &#123;</span><br><span class="line">  setState(() &#123;</span><br><span class="line">  isSwitch &#x3D; value;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="11-Slider"><a href="#11-Slider" class="headerlink" title="11.Slider"></a>11.Slider</h3><p>滑动选择器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Slider(</span><br><span class="line">    min: 0.0,&#x2F;&#x2F;最小值</span><br><span class="line">    max: 10.0,&#x2F;&#x2F;最大值</span><br><span class="line">    divisions: 10,&#x2F;&#x2F;等分成多少份，需要和label一起使用</span><br><span class="line">    label: &#39;$&#123;_sliderValue.toInt()&#125;&#39;,&#x2F;&#x2F;显示每份</span><br><span class="line">    activeColor: Theme.of(context).accentColor, &#x2F;&#x2F;选中部分的颜色</span><br><span class="line">    inactiveColor:Theme.of(context).accentColor.withOpacity(0.3) ,&#x2F;&#x2F;未选中部分颜色</span><br><span class="line">    value: _sliderValue,&#x2F;&#x2F;当前的值double类型</span><br><span class="line">    onChanged: (value) &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _sliderValue &#x3D; value;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;),</span><br></pre></td></tr></table></figure><h3 id="12-SimpleDialog"><a href="#12-SimpleDialog" class="headerlink" title="12.SimpleDialog"></a>12.SimpleDialog</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void _openSimpleDialog() async &#123;</span><br><span class="line">    final option &#x3D; await showDialog(context: context, builder: (BuildContext context) &#123;</span><br><span class="line">      return SimpleDialog(</span><br><span class="line">        title: Text(&#39;温馨提示&#39;),</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          SimpleDialogOption(</span><br><span class="line">            child: Text(&#39;确定&#39;),</span><br><span class="line">            onPressed: ()&#x3D;&gt;Navigator.of(context).pop(Option.A),</span><br><span class="line">          ),</span><br><span class="line">          SimpleDialogOption(</span><br><span class="line">            child: Text(&#39;退出&#39;),</span><br><span class="line">            onPressed: ()&#x3D;&gt;Navigator.of(context).pop(Option.B),</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="13-AlertDialog"><a href="#13-AlertDialog" class="headerlink" title="13.AlertDialog"></a>13.AlertDialog</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">void _openAlertDialog() async&#123;</span><br><span class="line">  var result &#x3D; await showDialog(context: context,builder: (BuildContext context)&#123;</span><br><span class="line">    return AlertDialog(</span><br><span class="line">      title: Text(&#39;warm tips&#39;),</span><br><span class="line">      content: Text(&#39;Are you sure about this?&#39;),</span><br><span class="line">      actions: &lt;Widget&gt;[</span><br><span class="line">        FlatButton(onPressed: ()&#x3D;&gt;Navigator.pop(context,Option.B), child: Text(&#39;Cancel&#39;,style: TextStyle(color: Colors.indigoAccent),)),</span><br><span class="line">        FlatButton(onPressed: ()&#x3D;&gt;Navigator.pop(context,Option.A), child: Text(&#39;Ok&#39;,style: TextStyle(color: Colors.indigoAccent)))</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  setState(() &#123;</span><br><span class="line">    switch(result)&#123;</span><br><span class="line">      case Option.A:</span><br><span class="line">        _selectChoice &#x3D; &quot;ok&quot;;</span><br><span class="line">        break;</span><br><span class="line">      case Option.B:</span><br><span class="line">        _selectChoice &#x3D; &quot;cancel&quot;;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-BottomSheet"><a href="#14-BottomSheet" class="headerlink" title="14.BottomSheet"></a>14.BottomSheet</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">final _key &#x3D; GlobalKey&lt;ScaffoldState&gt;(); &#x2F;&#x2F;key需要赋值给Scaffold的key</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F;打开BottomSheet</span><br><span class="line">void _openBottomSheet() &#123;</span><br><span class="line">  _key.currentState.showBottomSheet((BuildContext context)&#123;</span><br><span class="line">    return BottomAppBar(</span><br><span class="line">      child: Container(</span><br><span class="line">        color: Colors.red.withOpacity(0.2),</span><br><span class="line">        padding: EdgeInsets.all(16),</span><br><span class="line">        child: Row(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Icon(Icons.pause_circle_outline),</span><br><span class="line">            SizedBox(width: 16,),</span><br><span class="line">            Text(&#39;01:30 &#x2F; 03:30&#39;),</span><br><span class="line">            Expanded(child: Text(&#39;Fix you - Coldplay&#39;,textAlign: TextAlign.right,))</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="15ModalBottomSheet"><a href="#15ModalBottomSheet" class="headerlink" title="15ModalBottomSheet"></a>15ModalBottomSheet</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void _openModalBottomSheet() &#123;</span><br><span class="line">  showModalBottomSheet(context: context, builder: (context)&#123;</span><br><span class="line">    return Container(</span><br><span class="line">      height: 200,</span><br><span class="line">      child: Column(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          ListTile(title: Text(&#39;Opton A&#39;),),&#x2F;&#x2F;处理点击事件onTap()</span><br><span class="line">          ListTile(title: Text(&#39;Opton B&#39;),),</span><br><span class="line">          ListTile(title: Text(&#39;Opton C&#39;),),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16-SnackBar"><a href="#16-SnackBar" class="headerlink" title="16.SnackBar"></a>16.SnackBar</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Scaffold.of(context).showSnackBar(SnackBar(content: Text(&#39;正在处理中...&#39;),</span><br><span class="line">  action: SnackBarAction(label: &#39;Ok&#39;, onPressed: () &#123;&#125;),));</span><br></pre></td></tr></table></figure><h3 id="17ExpansionPanel"><a href="#17ExpansionPanel" class="headerlink" title="17ExpansionPanel"></a>17ExpansionPanel</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">bool _isExpanded &#x3D; false;</span><br><span class="line"></span><br><span class="line">ExpansionPanelList(</span><br><span class="line">  expansionCallback: (int panelIndex, bool isExpanded)&#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _isExpanded &#x3D; !isExpanded;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  children: [</span><br><span class="line">    ExpansionPanel(</span><br><span class="line">       isExpanded: _isExpanded,</span><br><span class="line">        headerBuilder: (BuildContext context, bool isExpanded) &#123;</span><br><span class="line">          return Container(</span><br><span class="line">            padding: EdgeInsets.all(16.0),</span><br><span class="line">            child: Text(</span><br><span class="line">              &#39;Panel A&#39;,</span><br><span class="line">              style: Theme.of(context).textTheme.title,</span><br><span class="line">            ),</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">        body: Container(</span><br><span class="line">          width: double.infinity,</span><br><span class="line">          child: Text(&#39;content for panel A&#39;),</span><br><span class="line">          padding: EdgeInsets.all(16.0),</span><br><span class="line">        ))</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="18Chip"><a href="#18Chip" class="headerlink" title="18Chip"></a>18Chip</h3><p>属性：</p><ul><li>deleteIconColor 删除图标颜色</li><li>deleteIcon 删除图标，设置onDelete，默认带删除图标，可不设置</li><li>onDeleted：删除动作</li><li>deleteButtonTooltipMessage:长按删除图标提示信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Chip(label: Text(&#39;Life&#39;)),</span><br><span class="line">Chip(label: Text(&#39;Sunset&#39;),backgroundColor: Colors.orange,),&#x2F;&#x2F;设置背景色</span><br><span class="line">Chip(label: Text(&#39;Sunset&#39;),avatar: CircleAvatar(backgroundColor: Colors.grey,child: Text(&#39;帆&#39;),),),&#x2F;&#x2F;设置文字头像</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;设置网络图片</span><br><span class="line">Chip(label: Text(&#39;Ivan&#39;),avatar: CircleAvatar(backgroundImage: NetworkImage(&#39;https:&#x2F;&#x2F;thirdqq.qlogo.cn&#x2F;g?b&#x3D;sdk&amp;k&#x3D;dcdm22zvv9c7pLsOp0LFFw&amp;s&#x3D;100&amp;t&#x3D;1556967668&#39;),),),</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;设置删除图标</span><br><span class="line">Chip(label: Text(&#39;删除&#39;),onDeleted: ()&#123;&#125;,)&#x2F;&#x2F;带删除图标</span><br><span class="line">Chip(label: Text(&#39;删除&#39;),onDeleted: ()&#123;&#125;,deleteIcon: Icon(Icons.delete_forever),),&#x2F;&#x2F;设置删除图标</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>actionChip:动作碎片，类似Chip</p><p>FilterChip:过滤碎片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FilterChip(label: Text(&#39;过滤碎片&#39;), onSelected: (value)&#123;setState(() &#123;</span><br><span class="line">  _filterSelected &#x3D; value;</span><br><span class="line">&#125;);&#125;,selected: _filterSelected,)</span><br></pre></td></tr></table></figure><p>ChoiceChip:</p><p>属性：</p><ul><li>label 文本</li><li>selectedColor 选中的颜色</li><li>selected：设置是否选中</li><li>onSelected：选中回调</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; _tags &#x3D; [</span><br><span class="line">  &#39;Apple&#39;,</span><br><span class="line">  &#39;Banana&#39;,</span><br><span class="line">  &#39;Lemon&#39;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">String _choice &#x3D; &#39;Apple&#39;;</span><br><span class="line"></span><br><span class="line">  Container(</span><br><span class="line">              width: double.infinity,</span><br><span class="line">              child: Text(&#39;ChoiceChip:$_choice&#39;),</span><br><span class="line">            ),</span><br><span class="line">            Wrap(</span><br><span class="line">&#x2F;&#x2F;              mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span><br><span class="line">              spacing: 8.0,&#x2F;&#x2F;水平间隔</span><br><span class="line">              runSpacing: 8.0,&#x2F;&#x2F;垂直间隔</span><br><span class="line">              children: _tags.map((tag)&#123;</span><br><span class="line">                return ChoiceChip(label: Text(tag), selectedColor:Colors.black,selected: _choice &#x3D;&#x3D; tag,onSelected: (value)&#123;</span><br><span class="line">                  setState(() &#123;</span><br><span class="line">                    _choice &#x3D; tag;</span><br><span class="line">                  &#125;);</span><br><span class="line">                &#125;,);</span><br><span class="line">              &#125;).toList()</span><br><span class="line">            ),</span><br></pre></td></tr></table></figure><h3 id="19-Wrap"><a href="#19-Wrap" class="headerlink" title="19.Wrap"></a>19.Wrap</h3><p>自适应布局，就类似于流式布局那样</p><p>属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spacing: 8.0,&#x2F;&#x2F;水平间隔</span><br><span class="line">runSpacing: 8.0,&#x2F;&#x2F;垂直间隔</span><br></pre></td></tr></table></figure><h3 id="20-Divider"><a href="#20-Divider" class="headerlink" title="20.Divider"></a>20.Divider</h3><p>分隔符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Divider(color: Colors.grey,)</span><br></pre></td></tr></table></figure><h3 id="21-DataTable"><a href="#21-DataTable" class="headerlink" title="21.DataTable"></a>21.DataTable</h3><p>columns:定义列</p><p>DataColumn:每列的名称</p><p>rows：定义行</p><p>sortColumnIndex：排序索引位置</p><p>sortAscending：布尔值，升序还是降序</p><p>selected:选中状态</p><p>onSelectChanged：选中回调</p><p>DataRow:表示一行数据，每个单元格DataCell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">DataTable(columns: [</span><br><span class="line">  DataColumn(label: Text(&#39;国家&#39;)),&#x2F;&#x2F;定义了两列数据</span><br><span class="line">  DataColumn(label: Text(&#39;首都&#39;)),</span><br><span class="line">], rows: [</span><br><span class="line">  DataRow(cells: [</span><br><span class="line">    DataCell(Text(&#39;中国&#39;)),</span><br><span class="line">    DataCell(Text(&#39;北京&#39;)),</span><br><span class="line">  ]),</span><br><span class="line">  DataRow(cells: [</span><br><span class="line">    DataCell(Text(&#39;美国&#39;)),</span><br><span class="line">    DataCell(Text(&#39;华盛顿&#39;)),</span><br><span class="line">  ]),</span><br><span class="line">  DataRow(cells: [</span><br><span class="line">    DataCell(Text(&#39;俄罗斯&#39;)),</span><br><span class="line">    DataCell(Text(&#39;莫斯科&#39;)),</span><br><span class="line">  ])</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h3 id="22-Card"><a href="#22-Card" class="headerlink" title="22.Card"></a>22.Card</h3><p>卡片布局</p><ol><li>ClipRRect</li></ol><p>裁剪：可以裁剪子部件的圆角等</p><h3 id="23-Stepper"><a href="#23-Stepper" class="headerlink" title="23.Stepper"></a>23.Stepper</h3><p>流程</p><p>主要使用两个类，Stepper,Step,每一个Step就是流程中的节点</p><p>currentStep：当前流程的位置，从零开始</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">child: Stepper(</span><br><span class="line">    currentStep: _currentStep, &#x2F;&#x2F;当前打开哪个步骤</span><br><span class="line">    onStepTapped: (step) &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _currentStep &#x3D; step;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    steps: [</span><br><span class="line">      Step(</span><br><span class="line">          title: Text(&#39;Register&#39;),</span><br><span class="line">          isActive: _currentStep &#x3D;&#x3D; 0, &#x2F;&#x2F;是否激活</span><br><span class="line">          subtitle: Text(&#39;Register First&#39;),</span><br><span class="line">          content: Text(</span><br><span class="line">              &#39;When toasting sliced zucchinis, be sure they are room temperature.&#39;)),</span><br><span class="line">      Step(</span><br><span class="line">          title: Text(&#39;Login&#39;),</span><br><span class="line">          isActive: _currentStep &#x3D;&#x3D; 1,</span><br><span class="line">          subtitle: Text(&#39;Login First&#39;),</span><br><span class="line">          content: Text(</span><br><span class="line">              &#39;Simmer iced eggs in a jar with whiskey for about an hour to enhance their consistency.&#39;)),</span><br><span class="line">      Step(</span><br><span class="line">          title: Text(&#39;Share&#39;),</span><br><span class="line">          isActive: _currentStep &#x3D;&#x3D; 2,</span><br><span class="line">          subtitle: Text(&#39;Share data&#39;),</span><br><span class="line">          content: Text(</span><br><span class="line">              &#39;Combine mackerel, blood oranges and peanut butter. mash up with shredded butterscotch and serve flattened with melon. Enjoy!&#39;)),</span><br><span class="line">    ]),</span><br></pre></td></tr></table></figure><h2 id="7-widget"><a href="#7-widget" class="headerlink" title="7.widget"></a>7.widget</h2><h3 id="7-1-AnimatedCrossFade"><a href="#7-1-AnimatedCrossFade" class="headerlink" title="7.1 AnimatedCrossFade"></a>7.1 AnimatedCrossFade</h3><blockquote><p>作用：该组件让2个组件在切换时出现交叉渐入的效果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AnimatedCrossFade(</span><br><span class="line">        firstChild: xxx1,</span><br><span class="line">        secondChild: xxx2,</span><br><span class="line">        crossFadeState: _crossFadeState,</span><br><span class="line">        duration: xxx;</span><br></pre></td></tr></table></figure><p>crossFadeState有两个状态，CrossFadeState.showSecond和CrossFadeState.showFirst</p><p>实战：在小说或者电影APP中，会有介绍，一般会有多行文字，默认展示两行，点击图标，会展示全部文字，这个时候，我们可以使用 AnimatedCrossFade来切换显示两行文字，或者多行文字，当然你也可以有其他的实现方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">return AnimatedCrossFade(</span><br><span class="line">        firstChild: _twoLineText(widget.content),</span><br><span class="line">        secondChild: Text(widget.content),</span><br><span class="line">        crossFadeState: _crossFadeState,</span><br><span class="line">        duration: Duration(milliseconds: 500));</span><br></pre></td></tr></table></figure><h3 id="7-2-transitions"><a href="#7-2-transitions" class="headerlink" title="7.2 transitions"></a>7.2 transitions</h3><p><strong>RotationTransition</strong></p><blockquote><p>作用：实现动画旋转</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">RotationTransition(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    @required Animation&lt;double&gt; turns, &#x2F;&#x2F;动画</span><br><span class="line">    this.alignment &#x3D; Alignment.center,</span><br><span class="line">    this.child,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="7-3-ValueListenableBuilder"><a href="#7-3-ValueListenableBuilder" class="headerlink" title="7.3 ValueListenableBuilder"></a>7.3 ValueListenableBuilder</h3><blockquote><p>作用：<strong>局部刷新</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ValueListenableBuilder(</span><br><span class="line">valueListenable: _notifier, </span><br><span class="line">builder: (context, value, child)&#123;&#125;,</span><br><span class="line">child: xxx,)</span><br></pre></td></tr></table></figure><p>我们需要提供一个valueListenable：类型是 ValueNotifier</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ValueNotifier _notifier &#x3D; ValueNotifier&lt;int&gt;(0); &#x2F;&#x2F;参数就是需要监听的值，这里是Int类型</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当我们需要刷新的时候，就可以去改变ValueNotifier的value值，就会重新构建builder,而其他不变的内容，我们可以放在child中，每次重新构建的的时候，会回调给builder(builder的第三个参数child)</span><br></pre></td></tr></table></figure><p>实战：</p><h1 id="第五章-实战开发"><a href="#第五章-实战开发" class="headerlink" title="第五章 实战开发"></a>第五章 实战开发</h1><h2 id="5-1-获取屏幕宽度"><a href="#5-1-获取屏幕宽度" class="headerlink" title="5.1 获取屏幕宽度"></a>5.1 获取屏幕宽度</h2><p>使用 MediaQuery.of(context).size.width</p><h2 id="5-2-数据加解密"><a href="#5-2-数据加解密" class="headerlink" title="5.2 数据加解密"></a>5.2 数据加解密</h2><p>使用了几个rsa加密的库，都没能加密解密，最后换成Java端去做数据加密</p><p>总结一下，数据加密方案：</p><ul><li>flutter端数据加密，使用flutter端的插件来做秘钥的生成和加解密，如：rsa_util 0.1.1</li><li>Java端数据加密，使用methodChannel和Java端通信</li></ul><p>以下是flutter端代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class RsaPlugin &#123;</span><br><span class="line">  static MethodChannel _methodChannel &#x3D; MethodChannel(&quot;rsa_plugin&quot;);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;&#x2F;RSA加密</span><br><span class="line">  static Future&lt;String&gt; encrypt(String str) async &#123;</span><br><span class="line">    return _methodChannel.invokeMethod(&#39;encrypt&#39;, str);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;&#x2F;RSA加密</span><br><span class="line">  static Future&lt;String&gt; decode(String str) async &#123;</span><br><span class="line">    return _methodChannel.invokeMethod(&#39;decode&#39;, str);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;&#x2F;AES解密</span><br><span class="line">  static Future&lt;String&gt; decodeAES(String str, String aesIv) async &#123;</span><br><span class="line">    return _methodChannel</span><br><span class="line">        .invokeMethod(&#39;decodeAes&#39;, &#123;&#39;data&#39;: str, &#39;aesIv&#39;: aesIv&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：如果需要传递多个参数，使用map的方式,在安卓端如何接收参数呢？</p><ul><li>一个参数：call.arguments as String</li><li>两个参数：call.argument<String>(“data”), httpKey, call.argument<String>(“aesIv”)</li></ul><p>以下是Java端代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class RsaPlugin : FlutterPlugin, MethodChannel.MethodCallHandler &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private lateinit var methodChannel: MethodChannel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    override fun onMethodCall(call: MethodCall, result: MethodChannel.Result) &#123;</span><br><span class="line">        when (call.method) &#123;</span><br><span class="line">            ENCRYPT -&gt; &#123;</span><br><span class="line">                val data &#x3D; RSAUtil.encrypt(call.arguments as String, RSAKey.PRIVATE_KEY_ANDROID_STR)</span><br><span class="line">                result.success(data)</span><br><span class="line">            &#125;</span><br><span class="line">            DECODE -&gt; &#123;</span><br><span class="line">                val data &#x3D; RSAUtil.decrypt(call.arguments as String, RSAKey.PUBLIC_KEY_PHP_STR)</span><br><span class="line">                result.success(data)</span><br><span class="line">            &#125;</span><br><span class="line">            AES_DECODE -&gt; &#123;</span><br><span class="line"></span><br><span class="line">                val data &#x3D; AESUtil.decrypt(call.argument&lt;String&gt;(&quot;data&quot;), httpKey, call.argument&lt;String&gt;(&quot;aesIv&quot;))</span><br><span class="line">                result.success(data)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun onAttachedToEngine(binding: FlutterPlugin.FlutterPluginBinding) &#123;</span><br><span class="line">        methodChannel &#x3D; MethodChannel(binding.binaryMessenger, TAG)</span><br><span class="line">        methodChannel.setMethodCallHandler(this)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun onDetachedFromEngine(binding: FlutterPlugin.FlutterPluginBinding) &#123;</span><br><span class="line">        methodChannel.setMethodCallHandler(null)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后别忘记在FlutterActivity中注册插件</p><p>override fun configureFlutterEngine(flutterEngine: FlutterEngine) {<br>        super.configureFlutterEngine(flutterEngine)<br>        //rsa加解密<br>        flutterEngine.plugins.add(RsaPlugin())<br>    }</p><h2 id="5-3-单例模式"><a href="#5-3-单例模式" class="headerlink" title="5.3 单例模式"></a>5.3 单例模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Dart单例模式</span><br><span class="line">class SingleTon &#123;</span><br><span class="line">  static SingleTon _instance;</span><br><span class="line"></span><br><span class="line">  static SingleTon getInstance() &#123;</span><br><span class="line">    if (_instance &#x3D;&#x3D; null) &#123;</span><br><span class="line">      _instance &#x3D; new SingleTon();</span><br><span class="line">    &#125;</span><br><span class="line">    return _instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;测试Dart单例模式</span><br><span class="line">main(List&lt;String&gt; args) &#123;</span><br><span class="line">  print(SingleTon.getInstance().hashCode);</span><br><span class="line">  print(SingleTon.getInstance().hashCode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-4-Toast"><a href="#5-4-Toast" class="headerlink" title="5.4 Toast"></a>5.4 Toast</h2><p>使用插件 fluttertoast</p><p>引入插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fluttertoast: ^4.0.0</span><br></pre></td></tr></table></figure><p>代码封装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F;toast工具类</span><br><span class="line">class ToastUtil &#123;</span><br><span class="line">  &#x2F;&#x2F;&#x2F;弹出提示</span><br><span class="line">  static void showTip(String msg) &#123;</span><br><span class="line">    Fluttertoast.showToast(</span><br><span class="line">        msg: msg,</span><br><span class="line">        toastLength: Toast.LENGTH_SHORT,</span><br><span class="line">        gravity: ToastGravity.BOTTOM);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  static void showError(String msg) &#123;</span><br><span class="line">    Fluttertoast.showToast(</span><br><span class="line">        msg: msg,</span><br><span class="line">        toastLength: Toast.LENGTH_SHORT,</span><br><span class="line">        gravity: ToastGravity.BOTTOM,</span><br><span class="line">        backgroundColor: Colors.red,</span><br><span class="line">        textColor: Colors.white);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ToastUtil.showTip(DString.exit_tip);</span><br></pre></td></tr></table></figure><h2 id="5-5-连按两次返回"><a href="#5-5-连按两次返回" class="headerlink" title="5.5 连按两次返回"></a>5.5 连按两次返回</h2><p>使用WillPopScope这个widget</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;定义上次点击时间</span><br><span class="line">DateTime _lastTime;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;使用</span><br><span class="line">body: WillPopScope(child: null, onWillPop: _onWillPop)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F;连按两次退出APP</span><br><span class="line">  Future&lt;bool&gt; _onWillPop() async &#123;</span><br><span class="line">    if(_lastTime &#x3D;&#x3D; null || DateTime.now().difference(_lastTime) &gt; Duration(seconds: 2))&#123;</span><br><span class="line">      _lastTime &#x3D; DateTime.now();</span><br><span class="line">      ToastUtil.showTip(DString.exit_tip);</span><br><span class="line">      return false;</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">      SystemNavigator.pop();</span><br><span class="line">      return true;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="5-6图片处理"><a href="#5-6图片处理" class="headerlink" title="5.6图片处理"></a>5.6图片处理</h2><h3 id="模糊处理-BackdropFilter和ImageFilter"><a href="#模糊处理-BackdropFilter和ImageFilter" class="headerlink" title="模糊处理 BackdropFilter和ImageFilter"></a>模糊处理 BackdropFilter和ImageFilter</h3><p>使用BackdropFilter和ImageFilter可以将图片模糊处理</p><p>具体分为模糊背景和模糊前景，别搞错了，一般我们用模糊前景比较多，用一个Stack来做相对布局即可</p><p>模糊前景：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">return Stack(</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        _contentBackgroundImage(context), &#x2F;&#x2F;这里是一张图片，需要模糊它，所以用stack</span><br><span class="line">        BackdropFilter(</span><br><span class="line">          filter: ImageFilter.blur(sigmaX: 100, sigmaY: 100),</span><br><span class="line">          child: Container(</span><br><span class="line">            width: MediaQuery.of(context).size.width,</span><br><span class="line">            height: MediaQuery.of(context).size.height &#x2F; 2,</span><br><span class="line">            color: AppColor.black.withOpacity(0.3),</span><br><span class="line">          ),</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p><a href="https://juejin.cn/post/6844903850449584142">https://juejin.cn/post/6844903850449584142</a></p><h2 id="5-7回调"><a href="#5-7回调" class="headerlink" title="5.7回调"></a>5.7回调</h2><p>flutter中 无参数回调用voidcallback,一个参数回调用valuechanged，多个参数回调用typedef</p><p>看一下<code>VoidCallback、ValueChanged</code> 的源码可以知道</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">typedef VoidCallback &#x3D; void Function()</span><br><span class="line">typedef ValueSetter&lt;T&gt; &#x3D; void Function(T value)</span><br></pre></td></tr></table></figure><p>本质上<code>VoidCallback、ValueChanged</code> 就是<code>typedef</code>的一种写法而已，只是Flutter帮我们做了一层封装</p><h2 id="5-8-GlobalKey"><a href="#5-8-GlobalKey" class="headerlink" title="5.8 GlobalKey"></a>5.8 GlobalKey</h2><blockquote><p> GlobalKey的文章太多了，不想看，这里只想介绍它的一个作用，局部刷新</p><p><a href="https://www.wanjunshijie.com/note/111.html">https://www.wanjunshijie.com/note/111.html</a></p></blockquote><h1 id="第六章-开源组件"><a href="#第六章-开源组件" class="headerlink" title="第六章 开源组件"></a>第六章 开源组件</h1><h1 id="6-1-旋转切换"><a href="#6-1-旋转切换" class="headerlink" title="6.1 旋转切换"></a>6.1 旋转切换</h1><p>toggle_rotate</p><p>该组件的封装思路：张风捷特烈：<a href="https://www.imooc.com/article/301631">https://www.imooc.com/article/301631</a></p><h1 id="第七章-Flutter杂七杂八"><a href="#第七章-Flutter杂七杂八" class="headerlink" title="第七章 Flutter杂七杂八"></a>第七章 Flutter杂七杂八</h1><h2 id="5-1-常用命令"><a href="#5-1-常用命令" class="headerlink" title="5.1 常用命令"></a>5.1 常用命令</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>flutter create</td><td>创建项目，如：flutter create -i swift -a kotlin xxapp</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="5-2-几个小技巧"><a href="#5-2-几个小技巧" class="headerlink" title="5.2 几个小技巧"></a>5.2 几个小技巧</h2><p><strong>赋值运算符??=</strong></p><p>a ??= b :表示如果a为null的时候 将b赋值给a</p><h2 id="5-3-Flutter-异步编程知识"><a href="#5-3-Flutter-异步编程知识" class="headerlink" title="5.3 Flutter 异步编程知识"></a>5.3 Flutter 异步编程知识</h2><p><strong>Dart单线程模型</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; Dart如何处理IO密集型任务和CPU密集型任务</span><br><span class="line">&#x2F;&#x2F;&#x2F;   io密集型任务：使用 async&#x2F;await,Future</span><br><span class="line">&#x2F;&#x2F;&#x2F;   CPU密集型任务：使用isolate，类似多进程</span><br><span class="line">&#x2F;&#x2F;&#x2F; Dart单线程模型：一个消息循环机制(Event Loop)，两个消息队列：微任务队列(microTask queue)和事件队列(Event Queue)</span><br><span class="line">&#x2F;&#x2F;&#x2F; 在Dart的单线程模型中，入口main函数执行后，消息循环机制就开始了，首先执行微任务队列(microTask)，然后执行事件队列(Event Queue)，</span><br><span class="line">&#x2F;&#x2F;&#x2F; 小知识插播：Future.microtask(…)方法,该方法可以向微任务队列插入一个任务</span><br></pre></td></tr></table></figure><p><strong>isolate</strong>和<strong>compute</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F;知识点：Json解析(CPU密集型任务)可能比较耗时，所以这里使用compute，什么是compute? compute是flutter中对Isolate的封装</span><br><span class="line">&#x2F;&#x2F;&#x2F;那什么是Isolate呢？Isolate翻译为隔离，可以理解为开启了新的线程，不阻塞UI线程</span><br><span class="line">&#x2F;&#x2F;&#x2F;Isolate比较重量级，因为在Isolate和UI线程之间传输数据，比较复杂，代码量多</span><br><span class="line">&#x2F;&#x2F;&#x2F;compute使用须知：</span><br><span class="line">&#x2F;&#x2F;&#x2F;   1. compute中运行的函数，必须是顶级函数或者是static函数</span><br><span class="line">&#x2F;&#x2F;&#x2F;   2. 二是compute传参，只能传递一个参数，返回值也只有一个</span><br></pre></td></tr></table></figure><h2 id="5-4-Flutter生命周期"><a href="#5-4-Flutter生命周期" class="headerlink" title="5.4 Flutter生命周期"></a>5.4 Flutter生命周期</h2><h1 id="第八章-常见问题"><a href="#第八章-常见问题" class="headerlink" title="第八章 常见问题"></a>第八章 常见问题</h1><p>7.1 创建项目一直卡在creating Flutter Project</p><p>发现文件目录已经创建，关闭AS，重新打开AS，打开项目，编译，此时会发现存在什么问题</p><p>7.2 Flutter App Run卡在Running Gradle task ‘assembleDebug’…</p><p>用AS打开Android部分代码，编译，此时就会看到是什么问题，一般来说，我们需要配置gradle版本，kotlin版本，gradle插件版本，另外还有一些必要的第三方依赖，以上这些，下载都可能比较耗时，需要梯子、解决办法：添加阿里云仓库</p><p>7.3 android studio导入flutter项目报错:Dart SDK is not configured</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在Android studio中导入flutter项目时报错：Dart SDK is not configured，这是因为在android studio里面没有配置Dart SDK的问题，可以通过下面步骤进行配置：</span><br><span class="line"></span><br><span class="line">##### 1.打开File &#x3D;》Setting &#x3D;》Language &amp; Frameworks &#x3D;&gt; Dart</span><br><span class="line"></span><br><span class="line">##### 2.勾选 “enable Dart support for the project”，并且选择Dart SDK path，路径为 D:\install\android\flutter\bin\cache\dart-sdk ，其中D:\install\android\flutter是flutter SDK路径</span><br></pre></td></tr></table></figure><p>7.4 解决flutter项目在AndroidStudio4.0的logcat中出现Please configure Android SDK</p><p><a href="https://blog.csdn.net/w815878564/article/details/106802471">https://blog.csdn.net/w815878564/article/details/106802471</a></p><p>解决办法：先打开一个传统的as项目，然后再新窗口打开flutter项目</p><p>7.5 报错：Waiting for another flutter command to release the startup lock…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">关闭Android Studio</span><br><span class="line">打开flutter安装目录&#x2F;bin&#x2F;cache</span><br><span class="line">删除lockfile文件</span><br><span class="line">此时可在命令行再执行flutter相关命令，完美解决</span><br></pre></td></tr></table></figure><p>7.6 打开flutter项目，工具栏选择设备栏一直处于loading状态，但是flutter devices又能发现连接了设备</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 关闭AS,删除bin&#x2F;cache下的lockfile</span><br><span class="line">2. 执行flutter devices，有设备后，打开as即可</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-boot入门笔记</title>
      <link href="2021/01/09/spring-boot%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
      <url>2021/01/09/spring-boot%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-HelloWorld"><a href="#第一章-HelloWorld" class="headerlink" title="第一章 HelloWorld"></a>第一章 HelloWorld</h1><h2 id="1-0-idea工具破解"><a href="#1-0-idea工具破解" class="headerlink" title="1.0 idea工具破解"></a>1.0 idea工具破解</h2><p>参考博客：<a href="https://www.cnblogs.com/sujw/p/14025767.html">https://www.cnblogs.com/sujw/p/14025767.html</a></p><ul><li>下载安装</li><li>启动IDEA,首次启动，选择第二个选项，然后<strong>OK</strong>，选择免费试用，进入软件界面，创建一个新项目</li><li>然后直接将刚才解压好的**<code>jetbrains-agent.jar</code><strong>文件用鼠标</strong><code>拖进</code><strong>idea 界面，出现如下界面，点击</strong>Restart**</li><li>重启成功后，会跳出如下界面，直接点击**<code>为IDEA安装</code><strong>，继续点击</strong><code>是</code>**安装，破解就成功了</li></ul><h2 id="1-1创建项目"><a href="#1-1创建项目" class="headerlink" title="1.1创建项目"></a>1.1创建项目</h2><p>springboot入门，我们从一个hello world开始入门，首先我们新建一个springboot项目</p><ul><li>新建项目，选择Spring Initializer,SDK选择Java1.8，Service URL就使用默认的，配置项目信息</li><li>Group:包名  Artifact:项目名称；</li><li>依赖部分：选择Web - Spring Web</li><li>配置项目名称和路径</li></ul><p><strong>idea和maven版本问题</strong></p><p>如果版本不一致，则可能无法使用maven下载依赖，我们可以使用idea提供的默认maven(会显示出版本号)</p><p><strong>端口号被占用问题</strong></p><p>可以使用如下命令查找被占用8080端口的pid，然后杀掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lsof -i tcp:8080  查找8080端口</span><br><span class="line">kill 999 或者 kill -9 999 杀掉查找出来的pid</span><br></pre></td></tr></table></figure><p>手动修改端口号：</p><p>在Mac下占用8080端口的pid老是杀不掉，杀死了又重启，所以这里选择修改版本号，在application.properties中配置如下语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port&#x3D;8081</span><br></pre></td></tr></table></figure><h2 id="1-2配置国内仓库"><a href="#1-2配置国内仓库" class="headerlink" title="1.2配置国内仓库"></a>1.2配置国内仓库</h2><p>打开idea的设置maven，有如下三个设置</p><ul><li>Maven home directory：maven路径</li><li>User setting file：配置文件，我们可以复制一份源文件，放在我们自己定义的目录，配置国内仓库也是修改这个文件</li><li>local repository：下载依赖本地存放路径，这个路径，我们最好自己定义</li></ul><p>settings.xml里面如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirrors&gt;</span><br><span class="line">   &lt;mirror&gt;  </span><br><span class="line">&lt;id&gt;alimaven&lt;&#x2F;id&gt;  </span><br><span class="line">&lt;name&gt;aliyun maven&lt;&#x2F;name&gt;  </span><br><span class="line">&lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;  </span><br><span class="line">&lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;          </span><br><span class="line">    &lt;&#x2F;mirror&gt;  </span><br><span class="line">  &lt;&#x2F;mirrors&gt;</span><br></pre></td></tr></table></figure><h2 id="1-3HelloWorld"><a href="#1-3HelloWorld" class="headerlink" title="1.3HelloWorld"></a>1.3HelloWorld</h2><p>创建一个包controller,创建HelloController，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;&#x2F;api&quot;)</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;say&quot;)</span><br><span class="line">    public String sayHello()&#123;</span><br><span class="line">        return &quot;hello springboot&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建kotlin版本</p><p><strong>启动类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">class SpringBootKotlinApplication</span><br><span class="line"></span><br><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    runApplication&lt;SpringBootKotlinApplication&gt;(*args)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>controller</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;&#x2F;api&quot;)</span><br><span class="line">class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;say&quot;)</span><br><span class="line">    fun sayHello():String&#123;</span><br><span class="line">        return &quot;hello World&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第二章-请求响应"><a href="#第二章-请求响应" class="headerlink" title="第二章 请求响应"></a>第二章 请求响应</h1><h2 id="2-1注解讲解"><a href="#2-1注解讲解" class="headerlink" title="2.1注解讲解"></a>2.1注解讲解</h2><p>在上面的例子中，我们使用了两个注解</p><p>@RestController: 这个注解相当于@ResponseBody ＋ @Controller合在一起的作用，即两个作用：首先表示该类是一个controller，第二，它可以返回JSON数据</p><p>@RequestMapping：定义请求的URL路径，可以标识在controller上面，也可以标识在方法上面</p><p>在上面的例子中，如果我们要在浏览器里访问sayHello方法，请求的URL地址为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:8081&#x2F;api&#x2F;say</span><br></pre></td></tr></table></figure><p><strong>请求类型</strong></p><p>@RequestMapping可以定义请求的类型，是GET请求，还是POST请求，PUT请求，DELETE请求，如果省略不写，则默认支持所有类型的请求，显示定义请求类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value &#x3D; [&quot;&#x2F;say&quot;],method &#x3D; [RequestMethod.GET])</span><br></pre></td></tr></table></figure><p>简写形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;&#x2F;say&quot;)  &#x2F;&#x2F;POST请求</span><br><span class="line">@GetMapping(&quot;&#x2F;say&quot;)  &#x2F;&#x2F;GET请求</span><br></pre></td></tr></table></figure><p><strong>返回HTML</strong></p><p>在上面的例子中，返回的是字符串或者说JSON格式的数据，如果是要返回一个HTML，应该怎么做呢？这里就需要用到thymeleaf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>然后不能使用@RestController,应该使用@Controller</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;&#x2F;api&quot;)</span><br><span class="line">class BookListController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;bookList&quot;)</span><br><span class="line">    fun getBookList():String&#123;</span><br><span class="line">        return &quot;bookList&quot; &#x2F;&#x2F;这里并不是返回bookList字符串，而是bookList.html</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @RequestMapping(&quot;&#x2F;getAll&quot;)</span><br><span class="line">    @ResponseBody &#x2F;&#x2F;如果要返回字符串数据，则这里就要使用@ResponseBody</span><br><span class="line">    fun  getAll():String &#x3D; &quot;get All&quot; &#x2F;&#x2F;这里返回的就是字符串数据</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2参数处理"><a href="#2-2参数处理" class="headerlink" title="2.2参数处理"></a>2.2参数处理</h2><blockquote><p>知识预览</p><p>在本小节，你将学习到如何获取get请求和post请求的参数，主要使用以下两个注解</p><ul><li>@PathVariable：处理路径参数，如/{id}</li><li>@RequestParam：获取post请求表单数据，get请求？参数</li></ul></blockquote><p><strong>PathVariable 案例一：获取请求参数</strong></p><p>需求分析：如下是一个restful风格的请求，请求URL如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:8081&#x2F;api&#x2F;v1&#x2F;book&#x2F;&#123;id&#125;  如：http:&#x2F;&#x2F;127.0.0.1:8081&#x2F;api&#x2F;v1&#x2F;book&#x2F;12</span><br></pre></td></tr></table></figure><p>在后端我们需要解析出末尾值为12的id参数，需要使用@PathVariable这个注解，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;&#x2F;api&#x2F;v1&quot;)</span><br><span class="line">class BookController &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;book&#x2F;&#123;id&#125;&quot;)</span><br><span class="line">    fun getOne(@PathVariable id:Long):Map&lt;String,String&gt;&#123;</span><br><span class="line"></span><br><span class="line">        var map &#x3D; HashMap&lt;String,String&gt;()</span><br><span class="line">        map[&quot;name&quot;] &#x3D; &quot;Flutter开发指南&quot;</span><br><span class="line">        map[&quot;money&quot;] &#x3D; &quot;13.14&quot;</span><br><span class="line">        return map</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是参数路径中的名称需要和方法中的参数名称一致，否则无法解析，如果确实需要不一致，需要在注解中声明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;&#x2F;book&#x2F;&#123;id&#125;&quot;)</span><br><span class="line">&#x2F;&#x2F;这里因为id和ids不一致，所以必须在注解中声明</span><br><span class="line">    fun getOne(@PathVariable(&quot;id&quot;) ids:Long):Map&lt;String,String&gt;&#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>RequestParam 案例一</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;创建一本书</span><br><span class="line">    @PostMapping(&quot;&#x2F;book&quot;)</span><br><span class="line">    fun crateBook(@RequestParam book: String,</span><br><span class="line">                  @RequestParam price: String,</span><br><span class="line">                  @RequestParam isbn: String): Map&lt;String, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">        return mapOf(</span><br><span class="line">                &quot;name&quot; to book,</span><br><span class="line">                &quot;price&quot; to price,</span><br><span class="line">                &quot;isbn&quot; to isbn</span><br><span class="line">        ).apply &#123; println(this) &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在浏览器中输入：127.0.0.1:8080/api/v1/book，添加表单参数：book，price,isbn,请求成功，返回数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;Flutter第一行代码&quot;,</span><br><span class="line">    &quot;price&quot;: &quot;68.0&quot;,</span><br><span class="line">    &quot;isbn&quot;: &quot;124646455612&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>RequestParam 案例二</strong></p><p>如何获取请求url后面跟着？的参数呢？如：?page=2&amp;pageNum=10，请看代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;获取书单列表</span><br><span class="line">@GetMapping(&quot;&#x2F;bookList&quot;)</span><br><span class="line">fun getBookList(@RequestParam page: Int, @RequestParam pageNum:Int):Map&lt;String,Any&gt;&#123;</span><br><span class="line">    val map &#x3D; mapOf(</span><br><span class="line">            &quot;name&quot; to &quot;Flutter第一行代码&quot;,</span><br><span class="line">            &quot;price&quot; to 68.0,</span><br><span class="line">            &quot;isbn&quot; to &quot;124564545654&quot;</span><br><span class="line">    )</span><br><span class="line">    val bookList &#x3D; listOf&lt;Map&lt;String,Any&gt;&gt;(</span><br><span class="line">            map,</span><br><span class="line">            map</span><br><span class="line">    )</span><br><span class="line">    return mapOf(</span><br><span class="line">            &quot;page&quot; to page,</span><br><span class="line">            &quot;pageNum&quot; to pageNum,</span><br><span class="line">            &quot;data&quot; to bookList</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在浏览器如何访问呢？输入：127.0.0.1:8080/api/v1/bookList?page=2&amp;pageNum=10，得到 响应：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;page&quot;: 2,</span><br><span class="line">    &quot;pageNum&quot;: 10,</span><br><span class="line">    &quot;data&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Flutter第一行代码&quot;,</span><br><span class="line">            &quot;price&quot;: 68.0,</span><br><span class="line">            &quot;isbn&quot;: &quot;124564545654&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Flutter第一行代码&quot;,</span><br><span class="line">            &quot;price&quot;: 68.0,</span><br><span class="line">            &quot;isbn&quot;: &quot;124564545654&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数正则表达式**</p><p>需求：现在要求末尾请求参数为小写字母和下划线</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">正确的请求路径：http:&#x2F;&#x2F;127.0.0.1:8081&#x2F;api&#x2F;v1&#x2F;book&#x2F;12&#x2F;ivan_</span><br><span class="line">错误的请求路径：http:&#x2F;&#x2F;127.0.0.1:8081&#x2F;api&#x2F;v1&#x2F;book&#x2F;12&#x2F;ivan_123</span><br></pre></td></tr></table></figure><p>那么应该如何做呢？</p><p>路径参数的正则表达式规则：{路径参数名:正则表达式}</p><p>请看代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;&#x2F;api&#x2F;v1&quot;)</span><br><span class="line">class BookController &#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;username使用正则表达式,限制为小写字母和下划线</span><br><span class="line">    @GetMapping(&quot;&#x2F;book&#x2F;&#123;id&#125;&#x2F;&#123;username:[a-z_]+&#125;&quot;)</span><br><span class="line">    fun getOne(@PathVariable(&quot;id&quot;) id:Long,@PathVariable username:String):Map&lt;String,String&gt;&#123;</span><br><span class="line"></span><br><span class="line">        var map &#x3D; HashMap&lt;String,String&gt;()</span><br><span class="line">        map[&quot;name&quot;] &#x3D; &quot;Flutter开发指南&quot;</span><br><span class="line">        map[&quot;money&quot;] &#x3D; &quot;13.14&quot;</span><br><span class="line">        map[&quot;username&quot;] &#x3D; username</span><br><span class="line">        return map</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第三章-配置文件"><a href="#第三章-配置文件" class="headerlink" title="第三章 配置文件"></a>第三章 配置文件</h1><blockquote><p><strong>知识概要</strong></p><p>在本章节，你将学习到如下内容：</p><ul><li>application.properties，application.yml 两种配置文件</li><li>常用配置属性<ul><li>server.port    server.context-path</li><li>logging.level.root   logging.level.包名</li><li>logging.file</li></ul></li><li>自定义配置属性</li></ul></blockquote><h2 id="3-1-yml"><a href="#3-1-yml" class="headerlink" title="3.1 yml"></a>3.1 yml</h2><blockquote><p>yml是一种新的配置文件，替代以前用的properties配置文件，主要使用key:(空格)value形式,yml文件放在resources目录下，一般命名为：application.yml</p></blockquote><p><strong>常用属性配置</strong>：</p><ul><li>server.port 端口号</li><li>server.servlet.context-path 配置应用根路径，如：/api/v1</li><li>logging.level.root 根级别日志  logging.level.包名 包级别日志，logging.file：定义log日志文件名和路径</li></ul><p><strong>自定义配置属性</strong>：</p><p>步骤一：在yml文件中定义自定义属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#自定义配置属性</span><br><span class="line">book:</span><br><span class="line">  name: flutter第一行代码</span><br><span class="line">  price: 66.6</span><br><span class="line">  isbn: &quot;$&#123;random.uuid&#125;&quot;</span><br></pre></td></tr></table></figure><p>步骤二：在代码中通过@Value注解，引入自定义属性，注意在kotlin中，$是取变量的值，所以这里需要转义字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Value(&quot;\$&#123;book.name&#125;&quot;)</span><br><span class="line">private lateinit var name:String</span><br><span class="line"></span><br><span class="line">@Value(&quot;\$&#123;book.price&#125;&quot;)</span><br><span class="line">lateinit var price:String</span><br><span class="line"></span><br><span class="line">@Value(&quot;\$&#123;book.isbn&#125;&quot;)</span><br><span class="line">lateinit var isbn:String</span><br></pre></td></tr></table></figure><p>然后就可以直接使用变量啦！</p><p><strong>自定义配置对象</strong></p><p>步骤一：同上，定义Yml配置属性</p><p>步骤二：新建实体类，使用注解@Component和@ConfigurationProperties(prefix = “xxx”),prefix对应yml配置属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix &#x3D; &quot;book&quot;)</span><br><span class="line"> class Book&#123;</span><br><span class="line">    lateinit var name:String</span><br><span class="line">    lateinit var price:String</span><br><span class="line">    lateinit var isbn:String</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>步骤三：在代码中，使用Autowired注入对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private lateinit var book:Book</span><br></pre></td></tr></table></figure><h2 id="3-2-yml多环境配置"><a href="#3-2-yml多环境配置" class="headerlink" title="3.2 yml多环境配置"></a>3.2 yml多环境配置</h2><p>一般我们会使用多个开发环境，如Dev开发环境，生产环境pro，那么我们如何通过yml来配置多环境呢？</p><p>第一步：首先我们需要定义各个环境的yml文件，如：</p><ul><li>dev开发环境 application-dev.yml</li><li>pro开发环境 application-pro.yml</li></ul><p>第二步：在application.yml中配置使用哪个开发环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">profiles:</span><br><span class="line">active: dev 表示当前Dev开发环境处于激活状态</span><br></pre></td></tr></table></figure><h1 id="第四章-数据库"><a href="#第四章-数据库" class="headerlink" title="第四章 数据库"></a>第四章 数据库</h1><blockquote><p>知识概要</p><p>在本章节，你将学习到以下内容</p><ul><li>Springboot-Data-JPA</li><li>MySQL</li></ul></blockquote><h2 id="4-1mysql"><a href="#4-1mysql" class="headerlink" title="4.1mysql"></a>4.1mysql</h2><p><strong>安装</strong></p><p>安装版本：mysql-8.0.22-winx64</p><p>参考博客：<a href="https://blog.csdn.net/qq_44040327/article/details/110420405">https://blog.csdn.net/qq_44040327/article/details/110420405</a></p><p><strong>Navicat连接mysql</strong></p><p>连接失败，错误原因：<strong>mysql8 之前的版本中加密规则是mysql_native_password,而在mysql8之后,加密规则是caching_sha2_password</strong>，而我电脑上装的是最新版的mysql8</p><p><strong>解决办法</strong></p><p><strong>方法1.升级navicat驱动；</strong></p><p><strong>方法2.把mysql用户登录密码加密规则还原成mysql_native_password.</strong> </p><p>这里我们选择第二种方式</p><p>第一步：<strong>mysql -u root -p</strong>，输入密码，进入mysql</p><p>第二步：进入如下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;password&#39; PASSWORD EXPIRE NEVER; #修改加密规则 （password就是你的密码）**</span><br><span class="line">**ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;password&#39;; #更新一下用户的密码 password就是你的密码** </span><br><span class="line">**FLUSH PRIVILEGES; #刷新权限**</span><br></pre></td></tr></table></figure><p>参考博客：<a href="https://blog.csdn.net/seventopalsy/article/details/80195246?utm_medium=distribute.pc_relevant.none-task-blog-searchFromBaidu-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-searchFromBaidu-1.control">https://blog.csdn.net/seventopalsy/article/details/80195246?utm_medium=distribute.pc_relevant.none-task-blog-searchFromBaidu-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-searchFromBaidu-1.control</a></p><p><strong>Navicat 创建数据库</strong></p><p>字符集编码选择 utf-8 unicode，排序规则 utf8-bin</p><p><strong>mysql时区问题</strong></p><p>springboot启动报错，错误如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You must configure either the server or JDBC driver (via the serverTimezone conf）</span><br></pre></td></tr></table></figure><p>错误原因：mysql版本太高，默认时区和当前电脑时区不一致，如何修改时区：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;serverTimezone&#x3D;GMT%2B8 指定中国时区</span><br><span class="line">url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;book?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&amp;serverTimezone&#x3D;GMT%2B8</span><br></pre></td></tr></table></figure><h2 id="4-2-Sping-Data-JPA"><a href="#4-2-Sping-Data-JPA" class="headerlink" title="4.2 Sping-Data-JPA"></a>4.2 Sping-Data-JPA</h2><p>pom.xml添加相关依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>注意，如果是用kotlin，还需要添加一些插件 jpa,all-open</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">  &lt;artifactId&gt;kotlin-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;groupId&gt;org.jetbrains.kotlin&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;configuration&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;compilerPlugins&gt;</span><br><span class="line">      ...</span><br><span class="line">      &lt;plugin&gt;jpa&lt;&#x2F;plugin&gt;</span><br><span class="line">      &lt;plugin&gt;all-open&lt;&#x2F;plugin&gt;</span><br><span class="line">    &lt;&#x2F;compilerPlugins&gt;</span><br><span class="line">    &lt;pluginOptions&gt;</span><br><span class="line">      &lt;option&gt;all-open:annotation&#x3D;javax.persistence.Entity&lt;&#x2F;option&gt;</span><br><span class="line">      &lt;option&gt;all-open:annotation&#x3D;javax.persistence.Embeddable&lt;&#x2F;option&gt;</span><br><span class="line">      &lt;option&gt;all-open:annotation&#x3D;javax.persistence.MappedSuperclass&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;&#x2F;pluginOptions&gt;</span><br><span class="line">  &lt;&#x2F;configuration&gt;</span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.jetbrains.kotlin&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;kotlin-maven-allopen&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;kotlin.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.jetbrains.kotlin&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;kotlin-maven-noarg&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;kotlin.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br></pre></td></tr></table></figure><h2 id="4-3数据库配置"><a href="#4-3数据库配置" class="headerlink" title="4.3数据库配置"></a>4.3数据库配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#JPA配置,mysql数据库配置</span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;book?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&amp;serverTimezone&#x3D;GMT%2B8</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">  jpa:</span><br><span class="line">    hibernate:</span><br><span class="line">      ddl-auto: update</span><br><span class="line">    show-sql: true</span><br></pre></td></tr></table></figure><h2 id="4-3实战增删改查"><a href="#4-3实战增删改查" class="headerlink" title="4.3实战增删改查"></a>4.3实战增删改查</h2><p>主要分为三层：</p><ul><li>repository层 实际操作数据库</li><li>service层：连接controller和repository层</li><li>controller层：业务层</li></ul><p><strong>repository层</strong></p><p>定义接口，继承JpaRepository，泛型为实体类，Long</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interface BookRepository:JpaRepository&lt;Book,Long&gt;</span><br></pre></td></tr></table></figure><p><strong>service层</strong></p><p>service层需要使用@Service标注，使用@Autowired注入BookRepository</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">class BookService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    lateinit var bookRepository: BookRepository</span><br><span class="line"></span><br><span class="line">    fun add(book: Book): Book &#x3D; bookRepository.save(book)</span><br><span class="line"></span><br><span class="line">    fun delete(id: Long) &#x3D; bookRepository.deleteById(id)</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;注意不要使用getOne，如果查询不到数据，会抛出异常</span><br><span class="line">    fun getOne(id:Long):Book? &#x3D; bookRepository.findByIdOrNull(id)</span><br><span class="line"></span><br><span class="line">    fun findAll(): List&lt;Book&gt; &#x3D; bookRepository.findAll()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>controller层</strong></p><p>新增一本书：使用post请求， @PostMapping(“/book”)</p><p>删除一本书：使用delete请求，@DeleteMapping(“/book/{id}”)</p><p>查询书单列表：使用get请求，@GetMapping(“/bookList”)</p><p>更新某本书：使用put请求，@PutMapping(“/update”)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">class BookController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    lateinit var service: BookService</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;添加一本书</span><br><span class="line">    @PostMapping(&quot;&#x2F;book&quot;)</span><br><span class="line">    fun add(book: Book):Book&#123;</span><br><span class="line">        return service.add(book)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;删除某本书</span><br><span class="line">    @DeleteMapping(&quot;&#x2F;book&#x2F;&#123;id&#125;&quot;)</span><br><span class="line">    fun deleteById(@PathVariable id:Long)&#123;</span><br><span class="line">        service.delete(id)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @PutMapping(&quot;&#x2F;update&quot;)</span><br><span class="line">    fun updateBook(book: Book)&#123;</span><br><span class="line">        service.add(book)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;查询所有书籍</span><br><span class="line">    @GetMapping(&quot;&#x2F;bookList&quot;)</span><br><span class="line">    fun getBookList():List&lt;Book&gt;&#123;</span><br><span class="line">     return service.findAll()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3复杂查询"><a href="#4-3复杂查询" class="headerlink" title="4.3复杂查询"></a>4.3复杂查询</h2><blockquote><p>如何查看Spring-Data-JPA查询关键词，在Spring.io官网，找Project,Spring-Data-JPA,点击查看想要查看版本的</p><p>Reference Doc.根据目录，找到<a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repository-query-keywords">Appendix C: Repository query keywords</a></p></blockquote><p>Spring-Data-JPA默认提供的只有基于主键ID的增删改查，以及查询全部等方法，并没有提供POJO的其他属性的操作方法，需要自己手动书写，书写有一定的规则，一般有by,and等连接属性，idea会有语法提示，这个不用担心</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;方法名必须按照规则写，参数名称不用和数据库字段一致，一定要写返回值类型</span><br><span class="line">fun findByAuthorAndStatus(author:String,status:Int):List&lt;Book&gt;</span><br></pre></td></tr></table></figure><p><strong>And</strong>查询：findByAuthorAndStatus：根据author和status两个字段查询，都符合的才满足条件</p><p><strong>EndsWith</strong>：以xxx结尾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查询description以end结尾</span><br><span class="line">fun findByDescriptionEndsWith(end:String):List&lt;Book&gt;</span><br></pre></td></tr></table></figure><p>contain：包含</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查询描述中包含某个字符串</span><br><span class="line">fun findByDescriptionContains(content:String):List&lt;Book&gt;</span><br></pre></td></tr></table></figure><h2 id="4-4-自定义查询"><a href="#4-4-自定义查询" class="headerlink" title="4.4 自定义查询"></a>4.4 自定义查询</h2><blockquote><p>自定义查询适用于JPA提供的语法不能满足我们得需求，需要自定义SQL语句的查询，提供两种查询</p><ul><li>JPQL查询</li><li>SQL查询</li></ul></blockquote><p>JPQL查询：这里使用的是类名，同时必须给类名取个别名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Query(&quot;select item from Book item where length(item.name) &gt;?1&quot;)</span><br><span class="line">fun executeJPQL(len: Int): List&lt;Book&gt;</span><br></pre></td></tr></table></figure><p>SQL查询：</p><p>注意即使是原生SQL语句，?后面也要跟占位符，1表示方法的第一个参数，如果有第二个参数，用2占位；原生SQL使用的是表名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Query(&quot;select * from book where length(name) &gt; ?1&quot;, nativeQuery &#x3D; true)</span><br><span class="line">fun executeSQL(len: Int): List&lt;Book&gt;</span><br><span class="line"></span><br><span class="line">@Query(&quot;select u from User u where u.firstname like %?1&quot;)</span><br><span class="line">fun findByFirstnameEndsWith(firstname:String):List&lt;User&gt;</span><br></pre></td></tr></table></figure><h2 id="4-5事务"><a href="#4-5事务" class="headerlink" title="4.5事务"></a>4.5事务</h2><blockquote><p>本小节中，你将学习事务操作的两个注解</p><ul><li>@Modifying</li><li>@Transactional</li></ul></blockquote><p>在spring-data-jpa中，自定义语句没有提供删除和更新的注解，仍然使用@Query来自定义，必须加上**@Modifying**</p><p>来支持更新和删除的语句，同时要支持事务，要添加@Transactional</p><p><strong>案例一</strong>：根据id修改status属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Query(&quot;update Book b set b.status &#x3D; ?2 where b.id &#x3D; ?1&quot;)</span><br><span class="line">@Modifying @Transactional</span><br><span class="line">fun updateByJPQL(id: Long, status: Int):Int</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：这里为什么没有使用jpa默认提供的save方法来更新，是因为save更新，会将实体类的每个属性都更新，而我们的需求只是根据id更新status属性</p><p><strong>案例二</strong>：根据id删除该条数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Query(&quot;delete from Book b where b.id &#x3D; ?1&quot;)</span><br><span class="line">@Modifying @Transactional</span><br><span class="line">fun deleteByJPQL(id:Long):Int</span><br></pre></td></tr></table></figure><p><strong>案例三</strong>：演示事务操作</p><p>在下面的例子中，我们执行了一条更新操作，一条删除操作，中间抛出了一个异常，但是加了事务注解，所以发生异常的时候，第一条更新操作会回滚</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">updateAndDeleteByJPQL</span><span class="params">(uId: <span class="type">Long</span>, status: <span class="type">Int</span>,dId:<span class="type">Long</span>)</span></span>:<span class="built_in">Int</span>&#123;</span><br><span class="line">    <span class="keyword">val</span> uCount = bookRepository.updateByJPQL(uId,status)</span><br><span class="line">    <span class="keyword">throw</span> Exception()</span><br><span class="line">    <span class="keyword">val</span> dCount = bookRepository.deleteByJPQL(dId)</span><br><span class="line">    <span class="keyword">return</span> uCount + dCount</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第五章-Thymeleaf"><a href="#第五章-Thymeleaf" class="headerlink" title="第五章 Thymeleaf"></a>第五章 Thymeleaf</h1><blockquote><p>知识预览</p><p>在本章节，你将学习到如下内容：</p><ul><li>Thymeleaf配置</li><li>Thymeleaf获取数据</li></ul></blockquote><h2 id="5-1-配置thymeleaf"><a href="#5-1-配置thymeleaf" class="headerlink" title="5.1 配置thymeleaf"></a>5.1 配置thymeleaf</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>注意：默认springboot提供的是2版本，如果需要使用3版本，需要如下操作：</p><p>如果是SpringBoot1.x.x版本配置thymeleaf3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    ...</span><br><span class="line">    &#x2F;&#x2F;SpringBoot1.x.x版本配置thymeleaf</span><br><span class="line">    &lt;thymeleaf.version&gt;3.0.9.RELEASE&lt;&#x2F;thymeleaf.version&gt;</span><br><span class="line">    &lt;thymeleaf-layout-dialect.version&gt;2.2.2&lt;&#x2F;thymeleaf-layout-dialect.version&gt;</span><br><span class="line">&lt;&#x2F;properties&gt;</span><br></pre></td></tr></table></figure><p>如果是SpringBoot2.x.x版本配置thymeleaf3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    ...</span><br><span class="line">    &#x2F;&#x2F;SpringBoot2.x.x版本配置thymeleaf</span><br><span class="line">    &lt;springboot-thymeleaf.version&gt;3.0.9.RELEASE&lt;&#x2F;springboot-thymeleaf.version&gt;</span><br><span class="line">    &lt;thymeleaf-layout-dialect.version&gt;2.2.2&lt;&#x2F;thymeleaf-layout-dialect.version&gt;</span><br><span class="line">&lt;&#x2F;properties&gt;</span><br></pre></td></tr></table></figure><p>注意：我使用的springboot 2.4.0 ，当使用2.4.1时，找不到css</p><p>yml配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring：</span><br><span class="line">thymeleaf：</span><br><span class="line">model: HTML</span><br></pre></td></tr></table></figure><h2 id="5-2-thymeleaf取值"><a href="#5-2-thymeleaf取值" class="headerlink" title="5.2 thymeleaf取值"></a>5.2 thymeleaf取值</h2><blockquote><p>本小节你将学习到</p><ul><li>thymeleaf传参：通过springMVC的model</li><li>thymeleaf获取数据：通过th:text</li></ul></blockquote><p><strong>案例一：获取书单详情</strong></p><p>调用service查询数据库，得到书单信息，添加到springMVC的model中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;&#x2F;book&#x2F;&#123;id&#125;&quot;)</span><br><span class="line">fun detail(@PathVariable id:Long,model:Model):String&#123;</span><br><span class="line">    val book: Book &#x3D; service.getOne(id)</span><br><span class="line">    model.addAttribute(&quot;book&quot;,book)</span><br><span class="line">    return &quot;book&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在book.html中如何获取数据呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&lt;strong&gt;书单：&lt;&#x2F;strong&gt;&lt;span th:text&#x3D;&quot;$&#123;book.name&#125;&quot;&gt;西游记&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;&lt;strong&gt;作者：&lt;&#x2F;strong&gt;&lt;span th:text&#x3D;&quot;$&#123;book.author&#125;&quot;&gt;吴承恩&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;&lt;strong&gt;描述：&lt;&#x2F;strong&gt;&lt;span th:text&#x3D;&quot;$&#123;book.description&#125;&quot;&gt;这是一本中国古代神话小说&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;&lt;strong&gt;状态：&lt;&#x2F;strong&gt;&lt;span th:text&#x3D;&quot;$&#123;book.status&#125;&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><p>我们可以将数据在body引入，方便在页面各个地方引用，这里使用object</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body th:object&#x3D;&quot;$&#123;book&#125;&quot;&gt;</span><br></pre></td></tr></table></figure><p>使用的时候则用星号 *{}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">th:text&#x3D;&quot;*&#123;name&#125;&quot;</span><br></pre></td></tr></table></figure><p>注意：th需要导入头文件：xmlns:th=”<a href="http://www.w3.org/1999/xhtml&quot;">http://www.w3.org/1999/xhtml&quot;</a></p><h2 id="5-3静态资源"><a href="#5-3静态资源" class="headerlink" title="5.3静态资源"></a>5.3静态资源</h2><blockquote><p>本小节中，你将学习到</p><ul><li>引入bootstrap资源</li><li>thymeleaf引入静态资源</li></ul></blockquote><p><strong><a href="https://www.bootcss.com/">BootStrap</a></strong></p><p><strong>一：引入资源</strong></p><p>下载bootstrap的zip包，用于生产环境的 Bootstrap，解压，拷贝css,js,fonts文件夹到项目的resources目录下</p><p><strong>二：thymeleaf引入静态资源</strong></p><p>header中引入：</p><p><strong>注意</strong>：</p><ul><li><ol><li>href使用th:href，th:href引入资源只有在项目运行的时候才能有效</li><li>引入语法规则：@{/xxx}  /表示资源的根路径，即static目录</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1&quot;&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; th:href&#x3D;&quot;@&#123;&#x2F;css&#x2F;bootstrap.min.css&#125;&quot;</span><br><span class="line">href&#x3D;&quot;..&#x2F;static&#x2F;css&#x2F;bootstrap.min.css&quot;&gt;</span><br></pre></td></tr></table></figure><p>body末尾引入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;jquery@1.12.4&#x2F;dist&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script th:src&#x3D;&quot;@&#123;&#x2F;js&#x2F;bootstrap.min.js&#125;&quot; src&#x3D;&quot;..&#x2F;static&#x2F;js&#x2F;bootstrap.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="5-4-判断和循环"><a href="#5-4-判断和循环" class="headerlink" title="5.4 判断和循环"></a>5.4 判断和循环</h2><p><strong>Swtich case</strong>用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;p th:switch&#x3D;&quot;*&#123;status&#125;&quot;&gt;&lt;strong&gt;状态：&lt;&#x2F;strong&gt;</span><br><span class="line">  &lt;span th:case&#x3D;&quot;0&quot;&gt;想读&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;span th:case&#x3D;&quot;1&quot;&gt;在读&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;span th:case&#x3D;&quot;2&quot;&gt;已读&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><p>If,unless</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;alert alert-success&quot; th:unless&#x3D;&quot;*&#123;status &#x3D;&#x3D; 0&#125;&quot;&gt;</span><br><span class="line">&lt;strong&gt;不错&lt;&#x2F;strong&gt;，知识就是力量</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;alert alert-warning&quot; th:if&#x3D;&quot;*&#123;status &#x3D;&#x3D; 0&#125;&quot;&gt;</span><br><span class="line">&lt;strong&gt;注意&lt;&#x2F;strong&gt;，你还没有行动</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>If:表示条件满足的时候显示   unless:表示条件不满足显示</p><p>Each:循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;table class&#x3D;&quot;table table-bordered&quot;&gt;</span><br><span class="line">  &lt;thead&gt;</span><br><span class="line">  &lt;th&gt;#&lt;&#x2F;th&gt;&lt;th&gt;书名&lt;&#x2F;th&gt;&lt;th&gt;作者&lt;&#x2F;th&gt;&lt;th&gt;描述&lt;&#x2F;th&gt;&lt;th&gt;状态&lt;&#x2F;th&gt;</span><br><span class="line">  &lt;&#x2F;thead&gt;</span><br><span class="line"></span><br><span class="line">  &lt;tbody&gt;</span><br><span class="line">    &lt;tr th:each&#x3D;&quot;book,iterStat:$&#123;books&#125;&quot;&gt;</span><br><span class="line">      &lt;td th:text&#x3D;&quot;$&#123;iterStat.count&#125;&quot;&gt;#&lt;&#x2F;td&gt;</span><br><span class="line">      &lt;td th:text&#x3D;&quot;$&#123;book.name&#125;&quot;&gt;书名&lt;&#x2F;td&gt;</span><br><span class="line">      &lt;td th:text&#x3D;&quot;$&#123;book.author&#125;&quot;&gt;作者&lt;&#x2F;td&gt;</span><br><span class="line">      &lt;td th:text&#x3D;&quot;$&#123;book.description&#125;&quot;&gt;描述&lt;&#x2F;td&gt;</span><br><span class="line">      &lt;td th:text&#x3D;&quot;$&#123;book.status&#125;&quot;&gt;状态&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">  &lt;&#x2F;tbody&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure><p>循环： th:each=”book,iterStat:${books}，book表示每个item，iterStat:状态变量(itemStat是第二个参数，变量取名无所谓)</p><p>itemStat的属性有：</p><ul><li>index：索引，从0开始</li><li>count：索引，从1开始</li><li>size：长度</li><li>first：当前循环是否第一个</li><li>last：当前循环是否最后一个</li></ul><h2 id="5-5-URL"><a href="#5-5-URL" class="headerlink" title="5.5 URL"></a>5.5 URL</h2><p>案例一：从书单列表跳转到书单详情</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;td&gt;&lt;a th:text&#x3D;&quot;$&#123;book.name&#125;&quot; href&#x3D;&quot;#&quot; th:href&#x3D;&quot;@&#123;&#39;&#x2F;book&#x2F;&#39;+$&#123;book.id&#125;&#125;&quot;&gt;书名&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;</span><br></pre></td></tr></table></figure><p>th:href=”@{‘/book/‘+${book.id}}” 这里使用的是字符串拼接+变量获取</p><h2 id="5-6提交表单，重定向"><a href="#5-6提交表单，重定向" class="headerlink" title="5.6提交表单，重定向"></a>5.6提交表单，重定向</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;#&quot; th:action&#x3D;&quot;@&#123;&#x2F;book&#x2F;add&#125;&quot; method&#x3D;&quot;post&quot;&gt;</span><br></pre></td></tr></table></figure><p>这里的@{/book/add} 表示提交到controller的一个方法，路径是/book/add</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;&#x2F;book&#x2F;add&quot;)</span><br><span class="line">fun add(book: Book):String&#123;</span><br><span class="line">  service.add(book)</span><br><span class="line">  return &quot;redirect:&#x2F;books&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加成功后，需要重定向到列表页面，重新查询数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;&#x2F;books&quot;)</span><br><span class="line">fun bookList(model: Model):String&#123;</span><br><span class="line">  service.findAll().apply &#123; model.addAttribute(&quot;books&quot;,this) &#125;</span><br><span class="line">  return &quot;books&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意以下几点：</p><ul><li>表单的name属性值要对应实体类的属性</li><li>controller中接收的实体类前不需要加@requestParam，基本类型属性才加</li></ul><p>thymeleaf表单下拉框回显</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select name&#x3D;&quot;status&quot; id&#x3D;&quot;statusId&quot; class&#x3D;&quot;form-control&quot;&gt;</span><br><span class="line">  &lt;option value&#x3D;&quot;0&quot; th:selected&#x3D;&quot;*&#123;status&#125; &#x3D;&#x3D; &#39;0&#39;&quot;&gt;想读&lt;&#x2F;option&gt;</span><br><span class="line">  &lt;option value&#x3D;&quot;1&quot; th:selected&#x3D;&quot;*&#123;status&#125; &#x3D;&#x3D; &#39;1&#39;&quot;&gt;在读&lt;&#x2F;option&gt;</span><br><span class="line">  &lt;option value&#x3D;&quot;2&quot; th:selected&#x3D;&quot;*&#123;status&#125; &#x3D;&#x3D; &#39;2&#39;&quot;&gt;已读&lt;&#x2F;option&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><p><strong>重定向带参数</strong></p><p>使用RedirectAttributes，RedirectAttributes是Spring mvc 3.1版本之后出来的一个功能，专门用于重定向之后还能带参数跳转的</p><p>案例：新增书单后，重定向到列表页，携带参数message</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;新增一本书单，重定向列表页</span><br><span class="line">@PostMapping(&quot;&#x2F;book&#x2F;add&quot;)</span><br><span class="line">fun add(book: Book,ra: RedirectAttributes):String&#123;</span><br><span class="line">  service.add(book)</span><br><span class="line">  ra.addFlashAttribute(&quot;message&quot;,&quot;《$&#123;book.name&#125;》更新成功&quot;)</span><br><span class="line">  return &quot;redirect:&#x2F;books&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.7 使用内置对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;对不起，你访问的资源[&lt;code th:text&#x3D;&quot;$&#123;#httpServletRequest.getAttribute(&#39;javax.servlet.error.request_uri&#39;)&#125;&quot;&gt;&lt;&#x2F;code&gt;]不存在！&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><h2 id="5-7-fragment"><a href="#5-7-fragment" class="headerlink" title="5.7 fragment"></a>5.7 fragment</h2><blockquote><p>片段，即可以将公共部分抽取出来，如博客的导航栏部分，header部分</p></blockquote><ul><li>使用th:fragment标识</li><li>传参：这里需要传入参数title,使用th:replace替换标题</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;head th:fragment&#x3D;&quot;head(title)&quot;&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;!--移动端--&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width,initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;title th:replace&#x3D;&quot;$&#123;title&#125;&quot;&gt;首页&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;semantic-ui&#x2F;2.2.10&#x2F;semantic.min.css&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;static&#x2F;css&#x2F;typo.css&quot; th:href&#x3D;&quot;@&#123;&#x2F;css&#x2F;typo.css&#125;&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;static&#x2F;css&#x2F;animate.css&quot; th:href&#x3D;&quot;@&#123;&#x2F;css&#x2F;animate.css&#125;&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;static&#x2F;lib&#x2F;prism&#x2F;prism.css&quot; th:href&#x3D;&quot;@&#123;&#x2F;lib&#x2F;prism&#x2F;prism.css&#125;&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;static&#x2F;lib&#x2F;tocbot&#x2F;tocbot.css&quot; th:href&#x3D;&quot;@&#123;&#x2F;lib&#x2F;tocbot&#x2F;tocbot.css&#125;&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;static&#x2F;css&#x2F;me.css&quot; th:href&#x3D;&quot;@&#123;&#x2F;css&#x2F;me.css&#125;&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure><p><strong>引入片段</strong>：th:replace=”_fragments :: head(~{::title})”，这里传参就是title标签的博客首页</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;head th:replace&#x3D;&quot;_fragments :: head(~&#123;::title&#125;)&quot;&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;!--移动端--&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width,initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;semantic-ui&#x2F;2.2.10&#x2F;semantic.min.css&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;static&#x2F;css&#x2F;me.css&quot; &gt;</span><br><span class="line">    &lt;title&gt;博客首页&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure><h1 id="第六章-分页查询"><a href="#第六章-分页查询" class="headerlink" title="第六章 分页查询"></a>第六章 分页查询</h1><blockquote><p>知识预览</p><p>本章节，你将学习到以下内容</p><ul><li>分页 Pageable，PageRequest，Sort</li></ul></blockquote><h2 id="6-1分页查询"><a href="#6-1分页查询" class="headerlink" title="6.1分页查询"></a>6.1分页查询</h2><p>分页查询主要使用以下对象， Pageable，PageRequest，Sort</p><p>案例一：查询所有书单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Service层</span><br><span class="line">fun findAllByPage(page: Pageable):Page&lt;Book&gt;&#123;</span><br><span class="line">return bookRepository.findAll(page)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;controller层 查询所有书单,提供默认值，防止不传参数报错,返回JSON数据</span><br><span class="line">@GetMapping(&quot;&#x2F;bookList&quot;)</span><br><span class="line">fun getBookList(@RequestParam(defaultValue &#x3D; &quot;0&quot;) page: Int, @RequestParam(defaultValue &#x3D; &quot;5&quot;) size: Int): Page&lt;Book&gt; &#123;</span><br><span class="line">  val sort &#x3D; Sort.by(Sort.Direction.ASC, &quot;id&quot;)</span><br><span class="line">  val pageAble: Pageable &#x3D; PageRequest.of(page, size, sort)</span><br><span class="line">  return service.findAllByPage(pageAble)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是HTML页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;书单列表</span><br><span class="line">@GetMapping(&quot;&#x2F;books&quot;)</span><br><span class="line">fun bookList(@RequestParam(defaultValue &#x3D; &quot;0&quot;) page: Int,</span><br><span class="line">@RequestParam(defaultValue &#x3D; &quot;5&quot;) size: Int,</span><br><span class="line">model: Model):String&#123;</span><br><span class="line"></span><br><span class="line">  val sort &#x3D; Sort.by(Sort.Direction.ASC, &quot;id&quot;)</span><br><span class="line">  val pageAble: Pageable &#x3D; PageRequest.of(page, size, sort)</span><br><span class="line">  service.findAllByPage(pageAble).apply &#123; model.addAttribute(&quot;page&quot;,this) &#125;</span><br><span class="line">  return &quot;books&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-2-PageableDefault"><a href="#6-2-PageableDefault" class="headerlink" title="6.2 PageableDefault"></a>6.2 PageableDefault</h2><p>如何避免page传-1报错,使用PageableDefault注解，当前端页面传递-1的时候，会默认传0到数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;书单列表</span><br><span class="line">@GetMapping(&quot;&#x2F;books&quot;)</span><br><span class="line">fun bookList(@PageableDefault(size &#x3D; 5,sort &#x3D; [&quot;id&quot;],direction &#x3D; Sort.Direction.ASC) page:Pageable,</span><br><span class="line">model: Model):String&#123;</span><br><span class="line">  service.findAllByPage(page).apply &#123; model.addAttribute(&quot;page&quot;,this) &#125;</span><br><span class="line">  return &quot;books&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3删除书单"><a href="#6-3删除书单" class="headerlink" title="6.3删除书单"></a>6.3删除书单</h2><p>HTML部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;#&quot; th:href&#x3D;&quot;@&#123;&#x2F;books&#x2F;&#123;id&#125;&#x2F;delete(id&#x3D;$&#123;book.id&#125;)&#125;&quot;&gt;删除&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p>controller层</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;浏览器这里没法直接发起delete请求，所以这里用的GetMapping</span><br><span class="line">@GetMapping(&quot;&#x2F;books&#x2F;&#123;id&#125;&#x2F;delete&quot;)</span><br><span class="line">fun delete(@PathVariable id:Long,ra:RedirectAttributes):String&#123;</span><br><span class="line">  service.delete(id)</span><br><span class="line">  ra.addFlashAttribute(&quot;message&quot;,&quot;删除成功&quot;)</span><br><span class="line">  return &quot;redirect:&#x2F;books&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第七章-表单验证"><a href="#第七章-表单验证" class="headerlink" title="第七章 表单验证"></a>第七章 表单验证</h1><h2 id="7-1表单注册"><a href="#7-1表单注册" class="headerlink" title="7.1表单注册"></a>7.1表单注册</h2><p><strong>新建实体类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">class User(</span><br><span class="line">        @Id @GeneratedValue var id: Long? &#x3D; null,</span><br><span class="line">        var username: String? &#x3D; null,</span><br><span class="line">        var password: String? &#x3D; null,</span><br><span class="line">        var phone: String? &#x3D; null,</span><br><span class="line">        var email: String? &#x3D; null</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>注册controller</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;注册</span><br><span class="line">@PostMapping(&quot;&#x2F;register&quot;)</span><br><span class="line">fun register(@RequestParam username: String,</span><br><span class="line">@RequestParam password: String,</span><br><span class="line">@RequestParam email: String,</span><br><span class="line">@RequestParam phone: String) :String&#123;</span><br><span class="line">  val user &#x3D; User(username &#x3D; username,password &#x3D; password,email &#x3D; email,phone &#x3D; phone.toInt())</span><br><span class="line">  repository.save(user)</span><br><span class="line">  return &quot;redirect:&#x2F;login&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数据传输</strong></p><blockquote><p>表单数据都会提交过来，包括确认密码，所以我们需要新建一个对象，UserForm接收表单数据，然后在User类中提供一个方法，拷贝需要的属性，再存入数据库</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">companion object&#123;</span><br><span class="line">  fun convertUser(form:UserForm):User&#123;</span><br><span class="line">    &#x2F;&#x2F;            val user &#x3D; User()</span><br><span class="line">    &#x2F;&#x2F;            BeanUtils.copyProperties(form,user)</span><br><span class="line">    &#x2F;&#x2F;            return user</span><br><span class="line">    return User().apply &#123; BeanUtils.copyProperties(form,this) &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...省略</span><br><span class="line">val user &#x3D; User.convertUser(userForm) &#x2F;&#x2F;拷贝需要的属性</span><br><span class="line">repository.save(user)</span><br><span class="line">return &quot;redirect:&#x2F;login&quot;</span><br></pre></td></tr></table></figure><h2 id="7-2-表单验证"><a href="#7-2-表单验证" class="headerlink" title="7.2 表单验证"></a>7.2 表单验证</h2><p>表单验证这里主要是后台验证，使用validation注解处理,最新版本没有引入相关依赖，需要自己引入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-validation&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>遇到问题：SpringBoot Validation + Kotlin校验无效的解决方法</p><p>解决办法：使用 <code>@field</code>,@get</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@field:Min(6,message &#x3D; &quot;密码必须大于6位数&quot;)</span><br><span class="line">var password: String? &#x3D; null,</span><br><span class="line">@field:Pattern(regexp &#x3D; PHONE_REG,message &#x3D; &quot;请输入正确手机号&quot;)</span><br><span class="line">var phone: String? &#x3D; null,</span><br><span class="line">@get:Pattern(regexp &#x3D; EMAIL_REG,message &#x3D; &quot;邮箱格式不对&quot;)</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：@Email注解，没效果，所以用的正则表达式判断</p><h2 id="7-3-错误数据返回"><a href="#7-3-错误数据返回" class="headerlink" title="7.3 错误数据返回"></a>7.3 错误数据返回</h2><p>如果我们使用@Valid处理错误信息，那么当return “register”的时候，框架自动会将错误信息封装，不需要我们手动添加错误信息到model中返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;注册</span><br><span class="line">@PostMapping(&quot;&#x2F;register&quot;)</span><br><span class="line">fun register(@Valid form:UserForm,result:BindingResult) :String&#123;</span><br><span class="line">  if (!form.checkPassword())&#123;</span><br><span class="line">  result.rejectValue(&quot;passwordAgain&quot;,&quot;confirmError&quot;,&quot;两次密码不一致&quot;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (result.hasErrors())&#123;</span><br><span class="line">  return &quot;register&quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  val user &#x3D; User.convertUser(form)</span><br><span class="line">  repository.save(user)</span><br><span class="line">  return &quot;redirect:&#x2F;login&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form th:action&#x3D;&quot;@&#123;&#x2F;register&#125;&quot; action&#x3D;&quot;&#x2F;register&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">    &lt;label for&#x3D;&quot;usernameId&quot;&gt;用户名：&lt;&#x2F;label&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; th:field&#x3D;&quot;*&#123;username&#125;&quot; name&#x3D;&quot;username&quot; id&#x3D;&quot;usernameId&quot; class&#x3D;&quot;form-control&quot;&gt;</span><br><span class="line">    &lt;p class&#x3D;&quot;form-control-static text-danger&quot; th:if&#x3D;&quot;$&#123;#fields.hasErrors(&#39;username&#39;)&#125;&quot; th:errors&#x3D;&quot;*&#123;username&#125;&quot;&gt;用户名不能为空&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">判断是否显示错误：th:if&#x3D;&quot;$&#123;#fields.hasErrors(&#39;username&#39;)&#125;&quot;</span><br><span class="line"></span><br><span class="line">显示错误：th:errors&#x3D;&quot;*&#123;username&#125;&quot;</span><br></pre></td></tr></table></figure><h1 id="第八章：异常处理"><a href="#第八章：异常处理" class="headerlink" title="第八章：异常处理"></a>第八章：异常处理</h1><blockquote><p>知识预览</p><p>本章节，你将学习到如下内容：</p><ul><li>基于thymeleaf模板的异常处理</li><li>基于RESTful API的异常处理</li></ul></blockquote><h2 id="8-1定义错误页面"><a href="#8-1定义错误页面" class="headerlink" title="8.1定义错误页面"></a>8.1定义错误页面</h2><p>分两种情况，项目中是否使用了模板引擎</p><ul><li><p>未使用模板引擎，在static文件下，新建error文件夹，再新建类似404,403,500文件(没有成功，不知道为什么)</p></li><li><p>使用了模板引擎，将error文件夹，移动到templates文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;..&#x2F;static&#x2F;css&#x2F;bootstrap.min.css&quot; th:href&#x3D;&quot;@&#123;&#x2F;css&#x2F;bootstrap.min.css&#125;&quot;&gt;</span><br></pre></td></tr></table></figure><p>案例一：404页面</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot; xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;..&#x2F;static&#x2F;css&#x2F;bootstrap.min.css&quot; th:href&#x3D;&quot;@&#123;&#x2F;css&#x2F;bootstrap.min.css&#125;&quot;&gt;</span><br><span class="line">    &lt;title&gt;404&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;container&quot; style&#x3D;&quot;max-width: 600px;margin-top: 50px&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;jumbotron&quot;&gt;</span><br><span class="line">    &lt;h2&gt;404&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;p&gt;对不起，你访问的资源[&lt;code th:text&#x3D;&quot;$&#123;#httpServletRequest.getAttribute(&#39;javax.servlet.error.request_uri&#39;)&#125;&quot;&gt;&lt;&#x2F;code&gt;]不存在！  &lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h2 id="8-2-HTTP状态码处理异常"><a href="#8-2-HTTP状态码处理异常" class="headerlink" title="8.2 HTTP状态码处理异常"></a>8.2 HTTP状态码处理异常</h2><blockquote><p>案例分析：在本小节中的案例中，根据ID查询数据库，没查询到数据，此时book为null，我们得需求是抛出一个自定义异常，BookNotFoundException，并且需要该异常对应到404页面，该如何处理呢？注意：如果我们不处理数据为空，thymeleaf也会抛出异常，最后到500异常页面，现在的需求就是知道是因为查询不到数据，应该是转到404页面</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;书单详情</span><br><span class="line">@GetMapping(&quot;&#x2F;book&#x2F;&#123;id&#125;&quot;)</span><br><span class="line">fun detail(@PathVariable id: Long, model: Model): String &#123;</span><br><span class="line">  val book &#x3D; service.getOne(id)</span><br><span class="line">  model.addAttribute(&quot;book&quot;, book)</span><br><span class="line">  return &quot;book&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service层：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun getOne(id:Long):Book? &#x3D; bookRepository.findByIdOrNull(id)?:throw BookNotFoundException(&quot;查找不到该书单&quot;)</span><br></pre></td></tr></table></figure><p>当查询出来的book为null时，抛出自定义异常，并响应到404页面，给用户提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;HttpStatus.NOT_FOUND 即404</span><br><span class="line">@ResponseStatus(code &#x3D; HttpStatus.NOT_FOUND)</span><br><span class="line">class BookNotFoundException(message: String?) : RuntimeException(message)</span><br></pre></td></tr></table></figure><h2 id="8-3-全局异常处理"><a href="#8-3-全局异常处理" class="headerlink" title="8.3 全局异常处理"></a>8.3 全局异常处理</h2><blockquote><p>在上一章节，我们看到，我们可以在service里面处理异常，其实也可以在<a href="https://zhuanlan.zhihu.com/p/141440703">controller中处理异常</a>，但是controller中，只能处理当前controller中的异常，如果我们处理全局异常，需要使用到ControllerAdvice</p></blockquote><p>可以看到：</p><ul><li>类上面使用了@ControllerAdvice注解</li><li>处理全局异常的方法使用 @ExceptionHandler(value = [Exception::class])注解，参数表示可以处理哪些异常</li><li>参数：request: HttpServletRequest, e: Exception</li><li>返回值：ModelAndView</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@ControllerAdvice</span><br><span class="line">class GlobalExceptionHandler &#123;</span><br><span class="line"></span><br><span class="line">    private val logger: Logger by lazy &#123; LoggerFactory.getLogger(this.javaClass) &#125;</span><br><span class="line"></span><br><span class="line">    @ExceptionHandler(value &#x3D; [Exception::class])</span><br><span class="line">    fun handleException(request: HttpServletRequest, e: Exception): ModelAndView &#123;</span><br><span class="line">        logger.error(&quot;request url :&#123;&#125;, exception: &#123;&#125;&quot;, request.requestURL, e.message)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;如果有其他自定义异常，则走自定义逻辑，否则走全局异常处理</span><br><span class="line">        if (AnnotationUtils.findAnnotation(e.javaClass, ResponseStatus::class.java) !&#x3D; null) &#123;</span><br><span class="line">            throw  e</span><br><span class="line">        &#125;</span><br><span class="line">        return ModelAndView().apply &#123;</span><br><span class="line">            addObject(&quot;url&quot;,request.requestURL)</span><br><span class="line">            addObject(&quot;exception&quot;,e)</span><br><span class="line">            viewName &#x3D; &quot;error&#x2F;error&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端页面小技巧：将错误信息使用注释异常，用户无法直接看到，但是开发者可以通过查看HTML源码，查看错误信息</p><p>主要是使用了th:utext，它可以转义HTML标签</p><p>用th:text不会解析html，用th:utext会解析html，在页面中显示相应的样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot; xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;..&#x2F;static&#x2F;css&#x2F;bootstrap.min.css&quot; th:href&#x3D;&quot;@&#123;&#x2F;css&#x2F;bootstrap.min.css&#125;&quot;&gt;</span><br><span class="line">    &lt;title&gt;500&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;container&quot; style&#x3D;&quot;max-width: 600px;margin-top: 50px&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;jumbotron&quot;&gt;</span><br><span class="line">            &lt;h2&gt;500&lt;&#x2F;h2&gt;</span><br><span class="line">            &lt;p&gt;对不起，服务异常，请联系管理员！&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div th:utext&#x3D;&quot;&#39;&lt;!--&#39;&quot; th:remove&#x3D;&quot;tag&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div th:utext&#x3D;&quot;&#39;Failed request url : &#39; + $&#123;url&#125;&quot; th:remove&#x3D;&quot;tag&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div th:utext&#x3D;&quot;&#39;Exception message : &#39; + $&#123;exception.message&#125;&quot; th:remove&#x3D;&quot;tag&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;ul th:remove&#x3D;&quot;tag&quot;&gt;</span><br><span class="line">            &lt;li th:each&#x3D;&quot;st:$&#123;exception.stackTrace&#125;&quot; th:remove&#x3D;&quot;tag&quot;&gt;</span><br><span class="line">                &lt;span th:utext&#x3D;&quot;$&#123;st&#125;&quot; th:remove&#x3D;&quot;tag&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">            &lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div th:utext&#x3D;&quot;&#39;--&gt;&#39;&quot; th:remove&#x3D;&quot;tag&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h1 id="第九章-日志与AOP"><a href="#第九章-日志与AOP" class="headerlink" title="第九章 日志与AOP"></a>第九章 日志与AOP</h1><h2 id="9-1日志"><a href="#9-1日志" class="headerlink" title="9.1日志"></a>9.1日志</h2><p><strong>日志级别</strong></p><p>Springboot 默认使用LogBack来记录日志，日志级别从低到高为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR</span><br></pre></td></tr></table></figure><p>Springboot 默认的日志级别为info，即只会打印info及更高级别的日志，如warn,error</p><p><strong>如何修改日志级别？</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    root: debug</span><br><span class="line">    com.ivan.springboot: debug</span><br></pre></td></tr></table></figure><p>修改为debug级别日志，则控制台只会输出debug及以上的日志</p><p>日志输出到文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">logging.file.path:只能指定路径，默认为spring.log</span><br><span class="line">logging.file.name:可以指定路径和文件名，如果同时指定，则path无效，建议指定name</span><br><span class="line"></span><br><span class="line">logging:</span><br><span class="line">  file:</span><br><span class="line">    path: ttt&#x2F;&#x2F;同时指定，这个无效，只能指定目录，默认文件名为spring.log</span><br><span class="line">    name: ddd&#x2F;ivan.log &#x2F;&#x2F;这个生效，同时指定目录和文件名</span><br></pre></td></tr></table></figure><p>默认日志输出文件大小为10M，超过10M的时候，会切分，如spring.0 spring.1等多个文件</p><h2 id="9-2-自定义日志配置"><a href="#9-2-自定义日志配置" class="headerlink" title="9.2 自定义日志配置"></a>9.2 自定义日志配置</h2><p>如果我们要进行更多的精细化的日志配置，那么我们需要使用XML来进行配置</p><p><strong>指定日志配置文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">logging:</span><br><span class="line">  config: classpath:logback-dev.xml</span><br><span class="line">  level:</span><br><span class="line">    root: debug</span><br><span class="line">  file:</span><br><span class="line">    name: devlog&#x2F;my.log</span><br></pre></td></tr></table></figure><p>通过logging.config 来指定日志配置文件</p><p>主要包含两部分：</p><ul><li>继承的默认配置</li><li>需要自定义的配置：appender部分</li></ul><p>在以下文件中，我们主要配置日志文件名和分割大小</p><ul><li>日志文件名：fileNamePattern来配置，加上年月日，方便我们查看日志</li><li>日志切分大小：maxFileSize来配置，默认10兆，我们可以根据需要修改</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--包含Spring boot对logback日志的默认配置--&gt;</span><br><span class="line">    &lt;include resource&#x3D;&quot;org&#x2F;springframework&#x2F;boot&#x2F;logging&#x2F;logback&#x2F;defaults.xml&quot; &#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;LOG_FILE&quot; value&#x3D;&quot;$&#123;LOG_FILE:-$&#123;LOG_PATH:-$&#123;LOG_TEMP:-$&#123;java.io.tmpdir:-&#x2F;tmp&#125;&#125;&#125;&#x2F;spring.log&#125;&quot;&#x2F;&gt;</span><br><span class="line">    &lt;include resource&#x3D;&quot;org&#x2F;springframework&#x2F;boot&#x2F;logging&#x2F;logback&#x2F;console-appender.xml&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--重写了Spring Boot框架 org&#x2F;springframework&#x2F;boot&#x2F;logging&#x2F;logback&#x2F;file-appender.xml 配置--&gt;</span><br><span class="line">    &lt;appender name&#x3D;&quot;TIME_FILE&quot;</span><br><span class="line">              class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;$&#123;FILE_LOG_PATTERN&#125;&lt;&#x2F;pattern&gt;</span><br><span class="line">        &lt;&#x2F;encoder&gt;</span><br><span class="line">        &lt;file&gt;$&#123;LOG_FILE&#125;&lt;&#x2F;file&gt;</span><br><span class="line">        &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;!--LOG_FILE 对应我们在yml中配置的日志文件名--&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;LOG_FILE&#125;.%d&#123;yyyy-MM-dd&#125;.%i&lt;&#x2F;fileNamePattern&gt;</span><br><span class="line">            &lt;!--保留历史日志一年的时间--&gt;</span><br><span class="line">            &lt;maxHistory&gt;30&lt;&#x2F;maxHistory&gt;</span><br><span class="line">            &lt;!--</span><br><span class="line">            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志</span><br><span class="line">            --&gt;</span><br><span class="line">            &lt;timeBasedFileNamingAndTriggeringPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</span><br><span class="line">                &lt;maxFileSize&gt;1MB&lt;&#x2F;maxFileSize&gt;</span><br><span class="line">            &lt;&#x2F;timeBasedFileNamingAndTriggeringPolicy&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;rollingPolicy&gt;</span><br><span class="line">    &lt;&#x2F;appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;root level&#x3D;&quot;INFO&quot;&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;CONSOLE&quot; &#x2F;&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;TIME_FILE&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;root&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">            1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）</span><br><span class="line">            2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：</span><br><span class="line"></span><br><span class="line">                my.2017-08-01.0   80MB</span><br><span class="line">                my.2017-08-01.1   10MB</span><br><span class="line">                my.2017-08-02.0   56MB</span><br><span class="line">                my.2017-08-03.0   53MB</span><br><span class="line">                ......</span><br><span class="line">        --&gt;</span><br></pre></td></tr></table></figure><h2 id="9-3-Spring-AOP"><a href="#9-3-Spring-AOP" class="headerlink" title="9.3 Spring AOP"></a>9.3 Spring AOP</h2><p><strong>引入AOP</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-aop&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>使用AOP</p><p>和AOP相关的几个注解：</p><ul><li>@Aspect 标识这是一个AOP</li><li>@Component</li><li>@Pointcut 定义切面</li><li>@Before 方法执行之前</li><li>@After 方法执行之后</li></ul><p>切面定义规则：</p><p>@Pointcut(“execution(返回值 包名.类名.方法名(方法参数))”)，使用* 表示任意值</p><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Pointcut(&quot;execution(* com.qw.springbootdemo.springbootdemokt.controller.LogTestApi.log(..))&quot;)</span><br></pre></td></tr></table></figure><p>如果是包下面的所有类的所有方法，则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Pointcut(&quot;execution(* com.qw.springbootdemo.springbootdemokt.controller.*.*(..))&quot;)</span><br></pre></td></tr></table></figure><p>案例一：使用aop在方法执行前后打印日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@Aspect</span><br><span class="line">@Component</span><br><span class="line">class LogAspect &#123;</span><br><span class="line"></span><br><span class="line">  private val logger &#x3D; LoggerFactory.getLogger(this.javaClass)</span><br><span class="line"></span><br><span class="line">  @Pointcut(&quot;execution(* com.qw.springbootdemo.springbootdemokt.controller.LogTestApi.log(..))&quot;)</span><br><span class="line">  fun log()&#123;&#125;</span><br><span class="line"></span><br><span class="line">  @Before(&quot;log()&quot;)</span><br><span class="line">  fun doBefore()&#123;</span><br><span class="line">  logger.info(&quot;------doBefore----------&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">  @After(&quot;log()&quot;)</span><br><span class="line">  fun doAfter()&#123;</span><br><span class="line">  logger.info(&quot;------doAfter----------&quot;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @AfterReturning(pointcut &#x3D; &quot;log()&quot;,returning &#x3D; &quot;result&quot;)</span><br><span class="line">  fun doAfterReturning(result:Any)&#123;</span><br><span class="line">  logger.info(&quot;------doAfterReturning---------- 内容：&#123;&#125;&quot;,result)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">class LogTestApi &#123;</span><br><span class="line"></span><br><span class="line">    private val logger &#x3D; LoggerFactory.getLogger(this.javaClass)</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;log&quot;)</span><br><span class="line">    fun log():String&#123;</span><br><span class="line">        logger.info(&quot;-------------log-------------&quot;)</span><br><span class="line">        return &quot;---logTest---&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c.q.s.springbootdemokt.aspect.LogAspect  : ------doBefore----------</span><br><span class="line">c.q.s.s.controller.LogTestApi            : -------------log-------------</span><br><span class="line">c.q.s.springbootdemokt.aspect.LogAspect  : ------doAfterReturning---------- 内容：---logTest---</span><br><span class="line">c.q.s.springbootdemokt.aspect.LogAspect  : ------doAfter----------</span><br></pre></td></tr></table></figure><p><strong>案例2：记录请求与响应</strong></p><p>封装请求数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data class RequestLog(</span><br><span class="line">  var url:String,&#x2F;&#x2F;请求的url资源</span><br><span class="line">  var ip:String,&#x2F;&#x2F;请求方的IP地址</span><br><span class="line">  var method:String,&#x2F;&#x2F;请求的控制器和方法</span><br><span class="line">  var args:Array&lt;Any&gt;,&#x2F;&#x2F;请求参数</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Before(&quot;log()&quot;)</span><br><span class="line">    fun doBefore(joinPoint: JoinPoint)&#123;</span><br><span class="line">        &#x2F;&#x2F;经过如下两步，可以拿到request请求</span><br><span class="line">        val attributes &#x3D; RequestContextHolder.getRequestAttributes() as ServletRequestAttributes</span><br><span class="line">        val request &#x3D; attributes.request</span><br><span class="line">        &#x2F;&#x2F;封装请求数据</span><br><span class="line">        val requestLog &#x3D; RequestLog(</span><br><span class="line">                url &#x3D; request.requestURI,</span><br><span class="line">                ip &#x3D; request.remoteAddr,</span><br><span class="line">                method &#x3D; &quot;$&#123;joinPoint.signature.declaringTypeName&#125;.$&#123;joinPoint.signature.name&#125;&quot;,</span><br><span class="line">                args &#x3D; joinPoint.args</span><br><span class="line">        )</span><br><span class="line">        logger.info(&quot;------request-----&#123;&#125;&quot;,requestLog)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@AfterReturning(pointcut &#x3D; &quot;log()&quot;,returning &#x3D; &quot;result&quot;)</span><br><span class="line">fun doAfterReturning(result:Any)&#123;</span><br><span class="line">logger.info(&quot;------return---------内容：&#123;&#125;&quot;,result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第十章-拦截器Intercepter"><a href="#第十章-拦截器Intercepter" class="headerlink" title="第十章 拦截器Intercepter"></a>第十章 拦截器Intercepter</h1><blockquote><p>知识预览</p><ul><li>实现拦截器</li><li>注册拦截器</li></ul></blockquote><p><strong>实现拦截器</strong></p><p>需要实现HandlerInterceptor接口，里面包含如下三个方法</p><ul><li>preHandle ：从servlet进入controller前拦截</li><li>postHandle ：controller处理完，返回servlet前拦截</li><li>afterCompletion:完成后，一般用于释放资源等</li></ul><p><strong>注册拦截器</strong></p><p>实现WebMvcConfigurer，重写addInterceptors方法，添加拦截器</p><p><strong>案例一：实现登陆拦截</strong></p><p>需求分析：当登陆完成后，可以访问一些页面(这些页面必须要求登陆状态)，等退出登陆后，访问这些页面自动重定向到登陆页面</p><p>实现需求：</p><p>当登陆成功后，添加用户信息到session中：使用httpSession</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;&#x2F;login&quot;)</span><br><span class="line">fun loginPost(@RequestParam username:String,@RequestParam password:String,httpSession: HttpSession):String&#123;</span><br><span class="line">  val user &#x3D; repository.findUserByUsernameAndPassword(username, password)</span><br><span class="line">  if (user !&#x3D; null)&#123;</span><br><span class="line">  httpSession.setAttribute(&quot;user&quot;,user)</span><br><span class="line">  return &quot;index&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  return &quot;login&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>拦截器逻辑</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class LoginInterceptor : HandlerInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    override fun preHandle(request: HttpServletRequest,</span><br><span class="line">                           response: HttpServletResponse,</span><br><span class="line">                           handler: Any): Boolean &#123;</span><br><span class="line">        &#x2F;&#x2F;如果未登录，返回到登陆页面，否则通过</span><br><span class="line">        val user &#x3D; request.session.getAttribute(&quot;user&quot;)</span><br><span class="line">        if (user &#x3D;&#x3D; null) &#123;</span><br><span class="line">            response.sendRedirect(&quot;$&#123;request.contextPath&#125;&#x2F;login&quot;)</span><br><span class="line">            return false</span><br><span class="line">        &#125;</span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注册拦截器：</strong></p><p>需要实现WebMvcConfigurer，重写addInterceptors来添加拦截器</p><ul><li>addInterceptor 添加拦截器</li><li>addPathPatterns：添加需要拦截的页面</li><li>excludePathPatterns：添加不需要拦截的页面，这里登陆页面不需要拦截</li></ul><p>注意：需要使用@Configuration标识</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">class WebConfig : WebMvcConfigurer &#123;</span><br><span class="line"></span><br><span class="line">    override fun addInterceptors(registry: InterceptorRegistry) &#123;</span><br><span class="line">        super.addInterceptors(registry)</span><br><span class="line">        registry.addInterceptor(LoginInterceptor())</span><br><span class="line">                .addPathPatterns(&quot;&#x2F;&quot;)</span><br><span class="line">                .addPathPatterns(&quot;&#x2F;book&#x2F;**&quot;)</span><br><span class="line">                .addPathPatterns(&quot;&#x2F;books&#x2F;**&quot;)</span><br><span class="line">                .excludePathPatterns(&quot;&#x2F;login&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注销：清除session中的用户信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;注销</span><br><span class="line">@GetMapping(&quot;&#x2F;logout&quot;)</span><br><span class="line">fun loginOut(session: HttpSession):String&#123;</span><br><span class="line">  session.removeAttribute(&quot;user&quot;)</span><br><span class="line">  return &quot;login&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第十一章-博客项目初始化"><a href="#第十一章-博客项目初始化" class="headerlink" title="第十一章 博客项目初始化"></a>第十一章 博客项目初始化</h1><blockquote><p>本章节开始，我们将开始实战博客项目</p></blockquote><h1 id="第十二章-其他知识"><a href="#第十二章-其他知识" class="headerlink" title="第十二章 其他知识"></a>第十二章 其他知识</h1><h2 id="6-1-JavaScript"><a href="#6-1-JavaScript" class="headerlink" title="6.1 JavaScript"></a>6.1 JavaScript</h2><p><strong>返回上一页</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a class&#x3D;&quot;btn btn-default&quot; href&#x3D;&quot;javascript:history.go(-1)&quot;&gt;返回上一页&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><h2 id="6-2-BootStrap"><a href="#6-2-BootStrap" class="headerlink" title="6.2 BootStrap"></a>6.2 BootStrap</h2><p><a href="https://v3.bootcss.com/components/#alerts">警告框</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;alert alert-success alert-dismissible fade in&quot; role&#x3D;&quot;alert&quot; th:unless&#x3D;&quot;$&#123;#strings.isEmpty(message)&#125;&quot;&gt;</span><br><span class="line">  &lt;a class&#x3D;&quot;close&quot; data-dismiss&#x3D;&quot;alert&quot;&gt;&lt;span&gt;&amp;times;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;</span><br><span class="line">  &lt;strong&gt;恭喜，&lt;&#x2F;strong&gt;</span><br><span class="line">  &lt;span th:text&#x3D;&quot;$&#123;message&#125;&quot;&gt;信息提交成功&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>注意：遇到一个坑，以上代码中的关闭没有关闭成功，关闭行为是由jquery提供的，最后发现引入jQuery的Script标签，没有闭合造成JS无效，html5要求太严格啦</p><p>分页</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;nav&gt;</span><br><span class="line">&lt;ul class&#x3D;&quot;pager&quot;&gt;</span><br><span class="line">&lt;li class&#x3D;&quot;previous&quot;&gt;&lt;a href&#x3D;&quot;#&quot; th:href&#x3D;&quot;@&#123;&#39;&#x2F;books?page&#x3D;&#39;+$&#123;page.number-1&#125;&#125;&quot; th:unless&#x3D;&quot;$&#123;page.first&#125;&quot;&gt;上一页&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;li class&#x3D;&quot;next&quot;&gt;&lt;a href&#x3D;&quot;#&quot; th:href&#x3D;&quot;@&#123;&#x2F;books(page&#x3D;$&#123;page.number&#125;+1)&#125;&quot; th:unless&#x3D;&quot;$&#123;page.last&#125;&quot;&gt;下一页&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;nav&gt;</span><br></pre></td></tr></table></figure><p>标题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3 class&#x3D;&quot;page-header&quot;&gt;注册&lt;&#x2F;h3&gt;</span><br></pre></td></tr></table></figure><h1 id="第十三章：Kotlin-SpringBoot"><a href="#第十三章：Kotlin-SpringBoot" class="headerlink" title="第十三章：Kotlin SpringBoot"></a>第十三章：Kotlin SpringBoot</h1><h2 id="10-1-常见问题"><a href="#10-1-常见问题" class="headerlink" title="10.1 常见问题"></a>10.1 常见问题</h2><p><strong>SpringBoot Validation + Kotlin校验无效的解决方法</strong></p><p>参考博客：<a href="https://www.jianshu.com/p/239ec85b6bdd?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">https://www.jianshu.com/p/239ec85b6bdd?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation</a></p><p>解决办法：使用@field @get标识符</p>]]></content>
      
      
      <categories>
          
          <category> JavaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
